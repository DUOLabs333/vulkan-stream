
#include <ThreadStruct.hpp>

#include <Serialization.hpp>
#include <Server.hpp>
#include <Synchronization.hpp>
#include <map>


typedef struct {
    void* pUserData;

uintptr_t PFN_vkFreeFunction;
uintptr_t PFN_vkGetInstanceProcAddrLUNARG;
uintptr_t PFN_vkDeviceMemoryReportCallbackEXT;
uintptr_t PFN_vkInternalAllocationNotification;
uintptr_t PFN_vkVoidFunction;
uintptr_t PFN_vkDebugReportCallbackEXT;
uintptr_t PFN_vkFaultCallbackFunction;
uintptr_t PFN_vkDebugUtilsMessengerCallbackEXT;
uintptr_t PFN_vkReallocationFunction;
uintptr_t PFN_vkAllocationFunction;
uintptr_t PFN_vkInternalFreeNotification;
} pUserData;

void serialize_pNext(object& json, void* member){
    if (member==NULL){
        json.erase("sType");
        return;
    }
    
    auto chain=((VkBaseInStructure*)member);
    switch(chain->sType){


    case VK_STRUCTURE_TYPE_APPLICATION_INFO:
        {
        return serialize_struct(json, ((VkApplicationInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDeviceQueueCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDeviceCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkInstanceCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
        {
        return serialize_struct(json, ((VkMemoryAllocateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
        {
        return serialize_struct(json, ((VkMappedMemoryRange*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
        {
        return serialize_struct(json, ((VkWriteDescriptorSet*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
        {
        return serialize_struct(json, ((VkCopyDescriptorSet*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkBufferUsageFlags2CreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
        {
        return serialize_struct(json, ((VkBufferCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
        {
        return serialize_struct(json, ((VkBufferViewCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
        {
        return serialize_struct(json, ((VkMemoryBarrier*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
        {
        return serialize_struct(json, ((VkBufferMemoryBarrier*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
        {
        return serialize_struct(json, ((VkImageMemoryBarrier*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkImageCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
        {
        return serialize_struct(json, ((VkImageViewCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
        {
        return serialize_struct(json, ((VkBindSparseInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkShaderModuleCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDescriptorSetLayoutCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDescriptorPoolCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
        {
        return serialize_struct(json, ((VkDescriptorSetAllocateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineShaderStageCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkComputePipelineCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
        {
        return serialize_struct(json, ((VkComputePipelineIndirectBufferInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkPipelineCreateFlags2CreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineVertexInputStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineInputAssemblyStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineTessellationStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineViewportStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineRasterizationStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineMultisampleStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineColorBlendStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineDynamicStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineDepthStencilStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkGraphicsPipelineCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineCacheCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineLayoutCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
        {
        return serialize_struct(json, ((VkSamplerCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
        {
        return serialize_struct(json, ((VkCommandPoolCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
        {
        return serialize_struct(json, ((VkCommandBufferAllocateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
        {
        return serialize_struct(json, ((VkCommandBufferInheritanceInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
        {
        return serialize_struct(json, ((VkCommandBufferBeginInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
        {
        return serialize_struct(json, ((VkRenderPassBeginInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
        {
        return serialize_struct(json, ((VkRenderPassCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
        {
        return serialize_struct(json, ((VkEventCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkFenceCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkSemaphoreCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
        {
        return serialize_struct(json, ((VkQueryPoolCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
        {
        return serialize_struct(json, ((VkFramebufferCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBMIT_INFO:
        {
        return serialize_struct(json, ((VkSubmitInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkDisplayModeCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkDisplaySurfaceCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
        {
        return serialize_struct(json, ((VkDisplayPresentInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkXlibSurfaceCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkXcbSurfaceCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkSwapchainCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
        {
        return serialize_struct(json, ((VkPresentInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkDebugReportCallbackCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT:
        {
        return serialize_struct(json, ((VkValidationFlagsEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkValidationFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
        {
        return serialize_struct(json, ((VkPipelineRasterizationStateRasterizationOrderAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
        {
        return serialize_struct(json, ((VkDebugMarkerObjectNameInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
        {
        return serialize_struct(json, ((VkDebugMarkerObjectTagInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
        {
        return serialize_struct(json, ((VkDebugMarkerMarkerInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkDedicatedAllocationImageCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkDedicatedAllocationBufferCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
        {
        return serialize_struct(json, ((VkDedicatedAllocationMemoryAllocateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkExternalMemoryImageCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV:
        {
        return serialize_struct(json, ((VkExportMemoryAllocateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDevicePrivateDataCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPrivateDataSlotCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDevicePrivateDataFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultiDrawPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkGraphicsShaderGroupCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkGraphicsPipelineShaderGroupsCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV:
        {
        return serialize_struct(json, ((VkIndirectCommandsLayoutTokenNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkIndirectCommandsLayoutCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV:
        {
        return serialize_struct(json, ((VkGeneratedCommandsInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
        {
        return serialize_struct(json, ((VkGeneratedCommandsMemoryRequirementsInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineIndirectDeviceAddressInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFeatures2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
        {
        return serialize_struct(json, ((VkPhysicalDeviceProperties2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
        {
        return serialize_struct(json, ((VkFormatProperties2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
        {
        return serialize_struct(json, ((VkImageFormatProperties2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageFormatInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
        {
        return serialize_struct(json, ((VkQueueFamilyProperties2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMemoryProperties2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
        {
        return serialize_struct(json, ((VkSparseImageFormatProperties2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSparseImageFormatInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDevicePushDescriptorPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDriverProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
        {
        return serialize_struct(json, ((VkPresentRegionsKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVariablePointersFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExternalImageFormatInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
        {
        return serialize_struct(json, ((VkExternalImageFormatProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExternalBufferInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
        {
        return serialize_struct(json, ((VkExternalBufferProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceIDProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkExternalMemoryImageCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
        {
        return serialize_struct(json, ((VkExternalMemoryBufferCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
        {
        return serialize_struct(json, ((VkExportMemoryAllocateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
        {
        return serialize_struct(json, ((VkImportMemoryFdInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkMemoryFdPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
        {
        return serialize_struct(json, ((VkMemoryGetFdInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExternalSemaphoreInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
        {
        return serialize_struct(json, ((VkExternalSemaphoreProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkExportSemaphoreCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
        {
        return serialize_struct(json, ((VkImportSemaphoreFdInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
        {
        return serialize_struct(json, ((VkSemaphoreGetFdInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExternalFenceInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
        {
        return serialize_struct(json, ((VkExternalFenceProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkExportFenceCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
        {
        return serialize_struct(json, ((VkImportFenceFdInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
        {
        return serialize_struct(json, ((VkFenceGetFdInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultiviewFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultiviewProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
        {
        return serialize_struct(json, ((VkRenderPassMultiviewCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT:
        {
        return serialize_struct(json, ((VkSurfaceCapabilities2EXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT:
        {
        return serialize_struct(json, ((VkDisplayPowerInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT:
        {
        return serialize_struct(json, ((VkDeviceEventInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT:
        {
        return serialize_struct(json, ((VkDisplayEventInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkSwapchainCounterCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceGroupProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
        {
        return serialize_struct(json, ((VkMemoryAllocateFlagsInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
        {
        return serialize_struct(json, ((VkBindBufferMemoryInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
        {
        return serialize_struct(json, ((VkBindBufferMemoryDeviceGroupInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
        {
        return serialize_struct(json, ((VkBindImageMemoryInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
        {
        return serialize_struct(json, ((VkBindImageMemoryDeviceGroupInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
        {
        return serialize_struct(json, ((VkDeviceGroupRenderPassBeginInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
        {
        return serialize_struct(json, ((VkDeviceGroupCommandBufferBeginInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
        {
        return serialize_struct(json, ((VkDeviceGroupSubmitInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
        {
        return serialize_struct(json, ((VkDeviceGroupBindSparseInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
        {
        return serialize_struct(json, ((VkDeviceGroupPresentCapabilitiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkImageSwapchainCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
        {
        return serialize_struct(json, ((VkBindImageMemorySwapchainInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
        {
        return serialize_struct(json, ((VkAcquireNextImageInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
        {
        return serialize_struct(json, ((VkDeviceGroupPresentInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDeviceGroupDeviceCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkDeviceGroupSwapchainCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDescriptorUpdateTemplateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDevicePresentIdFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_ID_KHR:
        {
        return serialize_struct(json, ((VkPresentIdKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDevicePresentWaitFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_HDR_METADATA_EXT:
        {
        return serialize_struct(json, ((VkHdrMetadataEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
        {
        return serialize_struct(json, ((VkDisplayNativeHdrSurfaceCapabilitiesAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
        {
        return serialize_struct(json, ((VkSwapchainDisplayNativeHdrCreateInfoAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE:
        {
        return serialize_struct(json, ((VkPresentTimesInfoGOOGLE*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineViewportWScalingStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineViewportSwizzleStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDiscardRectanglePropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineDiscardRectangleStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
        {
        return serialize_struct(json, ((VkRenderPassInputAttachmentAspectCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSurfaceInfo2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
        {
        return serialize_struct(json, ((VkSurfaceCapabilities2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
        {
        return serialize_struct(json, ((VkSurfaceFormat2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
        {
        return serialize_struct(json, ((VkDisplayProperties2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
        {
        return serialize_struct(json, ((VkDisplayPlaneProperties2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
        {
        return serialize_struct(json, ((VkDisplayModeProperties2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
        {
        return serialize_struct(json, ((VkDisplayPlaneInfo2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
        {
        return serialize_struct(json, ((VkDisplayPlaneCapabilities2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
        {
        return serialize_struct(json, ((VkSharedPresentSurfaceCapabilitiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDevice16BitStorageFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSubgroupProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
        {
        return serialize_struct(json, ((VkBufferMemoryRequirementsInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS:
        {
        return serialize_struct(json, ((VkDeviceBufferMemoryRequirements*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
        {
        return serialize_struct(json, ((VkImageMemoryRequirementsInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
        {
        return serialize_struct(json, ((VkImageSparseMemoryRequirementsInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS:
        {
        return serialize_struct(json, ((VkDeviceImageMemoryRequirements*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
        {
        return serialize_struct(json, ((VkMemoryRequirements2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
        {
        return serialize_struct(json, ((VkSparseImageMemoryRequirements2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDevicePointClippingProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
        {
        return serialize_struct(json, ((VkMemoryDedicatedRequirements*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
        {
        return serialize_struct(json, ((VkMemoryDedicatedAllocateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkImageViewUsageCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkImageViewSlicedCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineTessellationDomainOriginStateCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
        {
        return serialize_struct(json, ((VkSamplerYcbcrConversionInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
        {
        return serialize_struct(json, ((VkSamplerYcbcrConversionCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
        {
        return serialize_struct(json, ((VkBindImagePlaneMemoryInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
        {
        return serialize_struct(json, ((VkImagePlaneMemoryRequirementsInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSamplerYcbcrConversionFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
        {
        return serialize_struct(json, ((VkSamplerYcbcrConversionImageFormatProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
        {
        return serialize_struct(json, ((VkTextureLODGatherFormatPropertiesAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT:
        {
        return serialize_struct(json, ((VkConditionalRenderingBeginInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
        {
        return serialize_struct(json, ((VkProtectedSubmitInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceProtectedMemoryFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceProtectedMemoryProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
        {
        return serialize_struct(json, ((VkDeviceQueueInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineCoverageToColorStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSamplerFilterMinmaxProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
        {
        return serialize_struct(json, ((VkSampleLocationsInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
        {
        return serialize_struct(json, ((VkRenderPassSampleLocationsBeginInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineSampleLocationsStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSampleLocationsPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkMultisamplePropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkSamplerReductionModeCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultiDrawFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineColorBlendAdvancedStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceInlineUniformBlockFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceInlineUniformBlockProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
        {
        return serialize_struct(json, ((VkWriteDescriptorSetInlineUniformBlock*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDescriptorPoolInlineUniformBlockCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineCoverageModulationStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
        {
        return serialize_struct(json, ((VkImageFormatListCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkValidationCacheCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkShaderModuleValidationCacheCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMaintenance3Properties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMaintenance4Features*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMaintenance4Properties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMaintenance5FeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMaintenance5PropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR:
        {
        return serialize_struct(json, ((VkRenderingAreaInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
        {
        return serialize_struct(json, ((VkDescriptorSetLayoutSupport*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderDrawParametersFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderFloat16Int8Features*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFloatControlsProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceHostQueryResetFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkDeviceQueueGlobalPriorityCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkQueueFamilyGlobalPriorityPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
        {
        return serialize_struct(json, ((VkDebugUtilsObjectNameInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
        {
        return serialize_struct(json, ((VkDebugUtilsObjectTagInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
        {
        return serialize_struct(json, ((VkDebugUtilsLabelEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkDebugUtilsMessengerCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
        {
        return serialize_struct(json, ((VkDebugUtilsMessengerCallbackDataEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDeviceMemoryReportFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkDeviceDeviceMemoryReportCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
        {
        return serialize_struct(json, ((VkDeviceMemoryReportCallbackDataEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
        {
        return serialize_struct(json, ((VkImportMemoryHostPointerInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkMemoryHostPointerPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExternalMemoryHostPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceConservativeRasterizationPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
        {
        return serialize_struct(json, ((VkCalibratedTimestampInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderCorePropertiesAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderCoreProperties2AMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineRasterizationConservativeStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDescriptorIndexingFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDescriptorIndexingProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
        {
        return serialize_struct(json, ((VkDescriptorSetLayoutBindingFlagsCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
        {
        return serialize_struct(json, ((VkDescriptorSetVariableDescriptorCountAllocateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
        {
        return serialize_struct(json, ((VkDescriptorSetVariableDescriptorCountLayoutSupport*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
        {
        return serialize_struct(json, ((VkAttachmentDescription2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
        {
        return serialize_struct(json, ((VkAttachmentReference2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
        {
        return serialize_struct(json, ((VkSubpassDescription2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
        {
        return serialize_struct(json, ((VkSubpassDependency2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
        {
        return serialize_struct(json, ((VkRenderPassCreateInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
        {
        return serialize_struct(json, ((VkSubpassBeginInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
        {
        return serialize_struct(json, ((VkSubpassEndInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTimelineSemaphoreFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTimelineSemaphoreProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkSemaphoreTypeCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
        {
        return serialize_struct(json, ((VkTimelineSemaphoreSubmitInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
        {
        return serialize_struct(json, ((VkSemaphoreWaitInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
        {
        return serialize_struct(json, ((VkSemaphoreSignalInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineVertexInputDivisorStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePCIBusInfoPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT:
        {
        return serialize_struct(json, ((VkCommandBufferInheritanceConditionalRenderingInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDevice8BitStorageFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceConditionalRenderingFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVulkanMemoryModelFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderAtomicInt64Features*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderAtomicFloatFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkQueueFamilyCheckpointPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV:
        {
        return serialize_struct(json, ((VkCheckpointDataNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDepthStencilResolveProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
        {
        return serialize_struct(json, ((VkSubpassDescriptionDepthStencilResolve*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT:
        {
        return serialize_struct(json, ((VkImageViewASTCDecodeModeEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceASTCDecodeFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTransformFeedbackFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTransformFeedbackPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineRasterizationStateStreamCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineRepresentativeFragmentTestStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExclusiveScissorFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineViewportExclusiveScissorStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCornerSampledImageFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderImageFootprintFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCopyMemoryIndirectFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCopyMemoryIndirectPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMemoryDecompressionFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMemoryDecompressionPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineViewportShadingRateImageStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShadingRateImageFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShadingRateImagePropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
        {
        return serialize_struct(json, ((VkPhysicalDeviceInvocationMaskFeaturesHUAWEI*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMeshShaderFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMeshShaderPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMeshShaderFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMeshShaderPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkRayTracingShaderGroupCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkRayTracingShaderGroupCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkRayTracingPipelineCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkRayTracingPipelineCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV:
        {
        return serialize_struct(json, ((VkGeometryTrianglesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV:
        {
        return serialize_struct(json, ((VkGeometryAABBNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GEOMETRY_NV:
        {
        return serialize_struct(json, ((VkGeometryNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV:
        {
        return serialize_struct(json, ((VkAccelerationStructureInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkAccelerationStructureCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
        {
        return serialize_struct(json, ((VkBindAccelerationStructureMemoryInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
        {
        return serialize_struct(json, ((VkWriteDescriptorSetAccelerationStructureKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
        {
        return serialize_struct(json, ((VkWriteDescriptorSetAccelerationStructureNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
        {
        return serialize_struct(json, ((VkAccelerationStructureMemoryRequirementsInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceAccelerationStructureFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingPipelineFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayQueryFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceAccelerationStructurePropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingPipelinePropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
        {
        return serialize_struct(json, ((VkDrmFormatModifierPropertiesListEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageDrmFormatModifierInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkImageDrmFormatModifierListCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkImageDrmFormatModifierExplicitCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkImageDrmFormatModifierPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkImageStencilUsageCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
        {
        return serialize_struct(json, ((VkDeviceMemoryOverallocationCreateInfoAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentDensityMapFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentDensityMap2FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentDensityMapPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentDensityMap2PropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkRenderPassFragmentDensityMapCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
        {
        return serialize_struct(json, ((VkSubpassFragmentDensityMapOffsetEndInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceScalarBlockLayoutFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
        {
        return serialize_struct(json, ((VkSurfaceProtectedCapabilitiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceUniformBufferStandardLayoutFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDepthClipEnableFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineRasterizationDepthClipStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMemoryBudgetPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMemoryPriorityFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkMemoryPriorityAllocateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceBufferDeviceAddressFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
        {
        return serialize_struct(json, ((VkBufferDeviceAddressInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
        {
        return serialize_struct(json, ((VkBufferOpaqueCaptureAddressCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkBufferDeviceAddressCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageViewImageFormatInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkFilterCubicImageViewImageFormatPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImagelessFramebufferFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
        {
        return serialize_struct(json, ((VkFramebufferAttachmentsCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
        {
        return serialize_struct(json, ((VkFramebufferAttachmentImageInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
        {
        return serialize_struct(json, ((VkRenderPassAttachmentBeginInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTextureCompressionASTCHDRFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCooperativeMatrixFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCooperativeMatrixPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkCooperativeMatrixPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX:
        {
        return serialize_struct(json, ((VkImageViewHandleInfoNVX*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX:
        {
        return serialize_struct(json, ((VkImageViewAddressPropertiesNVX*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineCreationFeedbackCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDevicePresentBarrierFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
        {
        return serialize_struct(json, ((VkSurfaceCapabilitiesPresentBarrierNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkSwapchainPresentBarrierCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDevicePerformanceQueryFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDevicePerformanceQueryPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
        {
        return serialize_struct(json, ((VkPerformanceCounterKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
        {
        return serialize_struct(json, ((VkPerformanceCounterDescriptionKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkQueryPoolPerformanceCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
        {
        return serialize_struct(json, ((VkAcquireProfilingLockInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
        {
        return serialize_struct(json, ((VkPerformanceQuerySubmitInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkHeadlessSurfaceCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCoverageReductionModeFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineCoverageReductionStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
        {
        return serialize_struct(json, ((VkFramebufferMixedSamplesCombinationNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL:
        {
        return serialize_struct(json, ((VkInitializePerformanceApiInfoINTEL*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
        {
        return serialize_struct(json, ((VkQueryPoolPerformanceQueryCreateInfoINTEL*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL:
        {
        return serialize_struct(json, ((VkPerformanceMarkerInfoINTEL*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL:
        {
        return serialize_struct(json, ((VkPerformanceStreamMarkerInfoINTEL*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL:
        {
        return serialize_struct(json, ((VkPerformanceOverrideInfoINTEL*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
        {
        return serialize_struct(json, ((VkPerformanceConfigurationAcquireInfoINTEL*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderClockFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceIndexTypeUint8FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
        {
        return serialize_struct(json, ((VkAttachmentReferenceStencilLayout*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
        {
        return serialize_struct(json, ((VkAttachmentDescriptionStencilLayout*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
        {
        return serialize_struct(json, ((VkPipelineInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPipelineExecutablePropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
        {
        return serialize_struct(json, ((VkPipelineExecutableInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
        {
        return serialize_struct(json, ((VkPipelineExecutableStatisticKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
        {
        return serialize_struct(json, ((VkPipelineExecutableInternalRepresentationKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTexelBufferAlignmentProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSubgroupSizeControlFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSubgroupSizeControlProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineShaderStageRequiredSubgroupSizeCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
        {
        return serialize_struct(json, ((VkSubpassShadingPipelineCreateInfoHUAWEI*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSubpassShadingPropertiesHUAWEI*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI:
        {
        return serialize_struct(json, ((VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
        {
        return serialize_struct(json, ((VkMemoryOpaqueCaptureAddressAllocateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
        {
        return serialize_struct(json, ((VkDeviceMemoryOpaqueCaptureAddressInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceLineRasterizationFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceLineRasterizationPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineRasterizationLineStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDevicePipelineCreationCacheControlFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVulkan11Features*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVulkan11Properties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVulkan12Features*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVulkan12Properties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVulkan13Features*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVulkan13Properties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
        {
        return serialize_struct(json, ((VkPipelineCompilerControlCreateInfoAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCoherentMemoryFeaturesAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceToolProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkSamplerCustomBorderColorCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCustomBorderColorPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCustomBorderColorFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkSamplerBorderColorComponentMappingCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceBorderColorSwizzleFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureGeometryTrianglesDataKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureGeometryAabbsDataKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureGeometryInstancesDataKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureGeometryKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureBuildGeometryInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureDeviceAddressInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureVersionInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
        {
        return serialize_struct(json, ((VkCopyAccelerationStructureInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
        {
        return serialize_struct(json, ((VkCopyAccelerationStructureToMemoryInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
        {
        return serialize_struct(json, ((VkCopyMemoryToAccelerationStructureInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkRayTracingPipelineInterfaceCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkPipelineLibraryCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExtendedDynamicStateFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExtendedDynamicState2FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExtendedDynamicState3FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExtendedDynamicState3PropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM:
        {
        return serialize_struct(json, ((VkRenderPassTransformBeginInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM:
        {
        return serialize_struct(json, ((VkCopyCommandTransformInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM:
        {
        return serialize_struct(json, ((VkCommandBufferInheritanceRenderPassTransformInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDiagnosticsConfigFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkDeviceDiagnosticsConfigCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRobustness2FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRobustness2PropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageRobustnessFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevice4444FormatsFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSubpassShadingFeaturesHUAWEI*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI:
        {
        return serialize_struct(json, ((VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_COPY_2:
        {
        return serialize_struct(json, ((VkBufferCopy2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_COPY_2:
        {
        return serialize_struct(json, ((VkImageCopy2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_BLIT_2:
        {
        return serialize_struct(json, ((VkImageBlit2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2:
        {
        return serialize_struct(json, ((VkBufferImageCopy2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2:
        {
        return serialize_struct(json, ((VkImageResolve2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2:
        {
        return serialize_struct(json, ((VkCopyBufferInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2:
        {
        return serialize_struct(json, ((VkCopyImageInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2:
        {
        return serialize_struct(json, ((VkBlitImageInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2:
        {
        return serialize_struct(json, ((VkCopyBufferToImageInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2:
        {
        return serialize_struct(json, ((VkCopyImageToBufferInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2:
        {
        return serialize_struct(json, ((VkResolveImageInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
        {
        return serialize_struct(json, ((VkFragmentShadingRateAttachmentInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkPipelineFragmentShadingRateStateCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShadingRateFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShadingRatePropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShadingRateKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderTerminateInvocationFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkPipelineFragmentShadingRateEnumStateCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
        {
        return serialize_struct(json, ((VkAccelerationStructureBuildSizesInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImage2DViewOf3DFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkMutableDescriptorTypeCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDepthClipControlFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineViewportDepthClipControlCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceExternalMemoryRDMAFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
        {
        return serialize_struct(json, ((VkVertexInputBindingDescription2EXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
        {
        return serialize_struct(json, ((VkVertexInputAttributeDescription2EXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceColorWriteEnableFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineColorWriteCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2:
        {
        return serialize_struct(json, ((VkMemoryBarrier2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2:
        {
        return serialize_struct(json, ((VkImageMemoryBarrier2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2:
        {
        return serialize_struct(json, ((VkBufferMemoryBarrier2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEPENDENCY_INFO:
        {
        return serialize_struct(json, ((VkDependencyInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO:
        {
        return serialize_struct(json, ((VkSemaphoreSubmitInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO:
        {
        return serialize_struct(json, ((VkCommandBufferSubmitInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBMIT_INFO_2:
        {
        return serialize_struct(json, ((VkSubmitInfo2*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
        {
        return serialize_struct(json, ((VkQueueFamilyCheckpointProperties2NV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
        {
        return serialize_struct(json, ((VkCheckpointData2NV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSynchronization2Features*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceHostImageCopyFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceHostImageCopyPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT:
        {
        return serialize_struct(json, ((VkMemoryToImageCopyEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT:
        {
        return serialize_struct(json, ((VkImageToMemoryCopyEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT:
        {
        return serialize_struct(json, ((VkCopyMemoryToImageInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT:
        {
        return serialize_struct(json, ((VkCopyImageToMemoryInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT:
        {
        return serialize_struct(json, ((VkCopyImageToImageInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT:
        {
        return serialize_struct(json, ((VkHostImageLayoutTransitionInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT:
        {
        return serialize_struct(json, ((VkSubresourceHostMemcpySizeEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
        {
        return serialize_struct(json, ((VkHostImageCopyDevicePerformanceQueryEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceLegacyDitheringFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT:
        {
        return serialize_struct(json, ((VkSubpassResolvePerformanceQueryEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
        {
        return serialize_struct(json, ((VkMultisampledRenderToSingleSampledInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePipelineProtectedAccessFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkQueueFamilyVideoPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkQueueFamilyQueryResultStatusPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoProfileListInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceVideoFormatInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkVideoFormatPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoProfileInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR:
        {
        return serialize_struct(json, ((VkVideoCapabilitiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR:
        {
        return serialize_struct(json, ((VkVideoSessionMemoryRequirementsKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR:
        {
        return serialize_struct(json, ((VkBindVideoSessionMemoryInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoPictureResourceInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoReferenceSlotInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeCapabilitiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeUsageInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH264ProfileInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH264CapabilitiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH264SessionParametersAddInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH264SessionParametersCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH264PictureInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH264DpbSlotInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH265ProfileInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH265CapabilitiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH265SessionParametersAddInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH265SessionParametersCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH265PictureInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoDecodeH265DpbSlotInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoSessionCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoSessionParametersCreateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoSessionParametersUpdateInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoBeginCodingInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoEndCodingInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR:
        {
        return serialize_struct(json, ((VkVideoCodingControlInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceInheritedViewportScissorFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
        {
        return serialize_struct(json, ((VkCommandBufferInheritanceViewportScissorInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceProvokingVertexFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceProvokingVertexPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineRasterizationProvokingVertexStateCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX:
        {
        return serialize_struct(json, ((VkCuModuleCreateInfoNVX*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX:
        {
        return serialize_struct(json, ((VkCuFunctionCreateInfoNVX*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX:
        {
        return serialize_struct(json, ((VkCuLaunchInfoNVX*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDescriptorBufferFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDescriptorBufferPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT:
        {
        return serialize_struct(json, ((VkDescriptorAddressInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT:
        {
        return serialize_struct(json, ((VkDescriptorBufferBindingInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT:
        {
        return serialize_struct(json, ((VkDescriptorBufferBindingPushDescriptorBufferHandleEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT:
        {
        return serialize_struct(json, ((VkDescriptorGetInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        return serialize_struct(json, ((VkBufferCaptureDescriptorDataInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        return serialize_struct(json, ((VkImageCaptureDescriptorDataInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        return serialize_struct(json, ((VkImageViewCaptureDescriptorDataInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        return serialize_struct(json, ((VkSamplerCaptureDescriptorDataInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        return serialize_struct(json, ((VkAccelerationStructureCaptureDescriptorDataInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkOpaqueCaptureDescriptorDataCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderIntegerDotProductFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderIntegerDotProductProperties*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDrmPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingMotionBlurFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV:
        {
        return serialize_struct(json, ((VkAccelerationStructureGeometryMotionTrianglesDataNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV:
        {
        return serialize_struct(json, ((VkAccelerationStructureMotionInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV:
        {
        return serialize_struct(json, ((VkMemoryGetRemoteAddressInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3:
        {
        return serialize_struct(json, ((VkFormatProperties3*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
        {
        return serialize_struct(json, ((VkDrmFormatModifierPropertiesList2EXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO:
        {
        return serialize_struct(json, ((VkPipelineRenderingCreateInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_INFO:
        {
        return serialize_struct(json, ((VkRenderingInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO:
        {
        return serialize_struct(json, ((VkRenderingAttachmentInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
        {
        return serialize_struct(json, ((VkRenderingFragmentShadingRateAttachmentInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
        {
        return serialize_struct(json, ((VkRenderingFragmentDensityMapAttachmentInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDynamicRenderingFeatures*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
        {
        return serialize_struct(json, ((VkCommandBufferInheritanceRenderingInfo*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD:
        {
        return serialize_struct(json, ((VkAttachmentSampleCountInfoAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
        {
        return serialize_struct(json, ((VkMultiviewPerViewAttributesInfoNVX*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageViewMinLodFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkImageViewMinLodCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceLinearColorAttachmentFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkGraphicsPipelineLibraryCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
        {
        return serialize_struct(json, ((VkDescriptorSetBindingReferenceVALVE*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
        {
        return serialize_struct(json, ((VkDescriptorSetLayoutHostMappingInfoVALVE*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineShaderStageModuleIdentifierCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT:
        {
        return serialize_struct(json, ((VkShaderModuleIdentifierEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT:
        {
        return serialize_struct(json, ((VkImageCompressionControlEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageCompressionControlFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkImageCompressionPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR:
        {
        return serialize_struct(json, ((VkImageSubresource2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR:
        {
        return serialize_struct(json, ((VkSubresourceLayout2KHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT:
        {
        return serialize_struct(json, ((VkRenderPassCreationControlEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkRenderPassCreationFeedbackCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkRenderPassSubpassFeedbackCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT:
        {
        return serialize_struct(json, ((VkMicromapBuildInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkMicromapCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT:
        {
        return serialize_struct(json, ((VkMicromapVersionInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT:
        {
        return serialize_struct(json, ((VkCopyMicromapInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT:
        {
        return serialize_struct(json, ((VkCopyMicromapToMemoryInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT:
        {
        return serialize_struct(json, ((VkCopyMemoryToMicromapInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT:
        {
        return serialize_struct(json, ((VkMicromapBuildSizesInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceOpacityMicromapFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceOpacityMicromapPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT:
        {
        return serialize_struct(json, ((VkAccelerationStructureTrianglesOpacityMicromapEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT:
        {
        return serialize_struct(json, ((VkPipelinePropertiesIdentifierEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePipelinePropertiesFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
        {
        return serialize_struct(json, ((VkExternalMemoryAcquireUnmodifiedEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePipelineRobustnessFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkPipelineRobustnessCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePipelineRobustnessPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
        {
        return serialize_struct(json, ((VkImageViewSampleWeightCreateInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageProcessingFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageProcessingPropertiesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceTilePropertiesFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM:
        {
        return serialize_struct(json, ((VkTilePropertiesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
        {
        return serialize_struct(json, ((VkPhysicalDeviceAmigoProfilingFeaturesSEC*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC:
        {
        return serialize_struct(json, ((VkAmigoProfilingSubmitInfoSEC*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDepthClampZeroOneFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceAddressBindingReportFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
        {
        return serialize_struct(json, ((VkDeviceAddressBindingCallbackDataEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceOpticalFlowFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceOpticalFlowPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV:
        {
        return serialize_struct(json, ((VkOpticalFlowImageFormatInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkOpticalFlowImageFormatPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV:
        {
        return serialize_struct(json, ((VkOpticalFlowSessionCreateInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
        {
        return serialize_struct(json, ((VkOpticalFlowSessionCreatePrivateDataInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV:
        {
        return serialize_struct(json, ((VkOpticalFlowExecuteInfoNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFaultFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT:
        {
        return serialize_struct(json, ((VkDeviceFaultCountsEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT:
        {
        return serialize_struct(json, ((VkDeviceFaultInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT:
        {
        return serialize_struct(json, ((VkDepthBiasInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT:
        {
        return serialize_struct(json, ((VkDepthBiasRepresentationInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT:
        {
        return serialize_struct(json, ((VkFrameBoundaryEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceFrameBoundaryFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT:
        {
        return serialize_struct(json, ((VkSurfacePresentModeEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
        {
        return serialize_struct(json, ((VkSurfacePresentScalingCapabilitiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
        {
        return serialize_struct(json, ((VkSurfacePresentModeCompatibilityEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT:
        {
        return serialize_struct(json, ((VkSwapchainPresentFenceInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkSwapchainPresentModesCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT:
        {
        return serialize_struct(json, ((VkSwapchainPresentModeInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkSwapchainPresentScalingCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT:
        {
        return serialize_struct(json, ((VkReleaseSwapchainImagesInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDepthBiasControlFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG:
        {
        return serialize_struct(json, ((VkDirectDriverLoadingInfoLUNARG*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG:
        {
        return serialize_struct(json, ((VkDirectDriverLoadingListLUNARG*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR:
        {
        return serialize_struct(json, ((VkDeviceImageSubresourceInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderCorePropertiesARM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM:
        {
        return serialize_struct(json, ((VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV:
        {
        return serialize_struct(json, ((VkQueryLowLatencySupportNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR:
        {
        return serialize_struct(json, ((VkMemoryMapInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR:
        {
        return serialize_struct(json, ((VkMemoryUnmapInfoKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderObjectFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderObjectPropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT:
        {
        return serialize_struct(json, ((VkShaderCreateInfoEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderTileImageFeaturesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceShaderTileImagePropertiesEXT*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCooperativeMatrixFeaturesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkCooperativeMatrixPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCooperativeMatrixPropertiesKHR*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCubicClampFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceYcbcrDegammaFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM:
        {
        return serialize_struct(json, ((VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceCubicWeightsFeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM:
        {
        return serialize_struct(json, ((VkSamplerCubicWeightsCreateInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM:
        {
        return serialize_struct(json, ((VkBlitImageCubicWeightsInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageProcessing2FeaturesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM:
        {
        return serialize_struct(json, ((VkPhysicalDeviceImageProcessing2PropertiesQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM:
        {
        return serialize_struct(json, ((VkSamplerBlockMatchWindowCreateInfoQCOM*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV:
        {
        return serialize_struct(json, ((VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV*)(member))[0]);
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT:
        {
        return serialize_struct(json, ((VkPhysicalDeviceLayeredDriverPropertiesMSFT*)(member))[0]);
        }
    

default:
    return serialize_pNext(json, (void*)(chain->pNext)); //Ignore invalid sTypes
}
}


void deserialize_pNext(object& json, void*& member ){
    if (!json.contains("sType")){
        return NULL;
    }
    
    switch (value_to<int>(json["sType"])){


    case VK_STRUCTURE_TYPE_APPLICATION_INFO:
        {
        auto result= new VkApplicationInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
        {
        auto result= new VkDeviceQueueCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
        {
        auto result= new VkDeviceCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
        {
        auto result= new VkInstanceCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
        {
        auto result= new VkMemoryAllocateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
        {
        auto result= new VkMappedMemoryRange;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
        {
        auto result= new VkWriteDescriptorSet;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
        {
        auto result= new VkCopyDescriptorSet;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR:
        {
        auto result= new VkBufferUsageFlags2CreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
        {
        auto result= new VkBufferCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
        {
        auto result= new VkBufferViewCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
        {
        auto result= new VkMemoryBarrier;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
        {
        auto result= new VkBufferMemoryBarrier;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
        {
        auto result= new VkImageMemoryBarrier;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
        {
        auto result= new VkImageCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
        {
        auto result= new VkImageViewCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
        {
        auto result= new VkBindSparseInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
        {
        auto result= new VkShaderModuleCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
        {
        auto result= new VkDescriptorSetLayoutCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
        {
        auto result= new VkDescriptorPoolCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
        {
        auto result= new VkDescriptorSetAllocateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
        {
        auto result= new VkPipelineShaderStageCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
        {
        auto result= new VkComputePipelineCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
        {
        auto result= new VkComputePipelineIndirectBufferInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR:
        {
        auto result= new VkPipelineCreateFlags2CreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineVertexInputStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineInputAssemblyStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineTessellationStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineViewportStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineRasterizationStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineMultisampleStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineColorBlendStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineDynamicStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineDepthStencilStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
        {
        auto result= new VkGraphicsPipelineCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
        {
        auto result= new VkPipelineCacheCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
        {
        auto result= new VkPipelineLayoutCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
        {
        auto result= new VkSamplerCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
        {
        auto result= new VkCommandPoolCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
        {
        auto result= new VkCommandBufferAllocateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
        {
        auto result= new VkCommandBufferInheritanceInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
        {
        auto result= new VkCommandBufferBeginInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
        {
        auto result= new VkRenderPassBeginInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
        {
        auto result= new VkRenderPassCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
        {
        auto result= new VkEventCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
        {
        auto result= new VkFenceCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
        {
        auto result= new VkSemaphoreCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
        {
        auto result= new VkQueryPoolCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
        {
        auto result= new VkFramebufferCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBMIT_INFO:
        {
        auto result= new VkSubmitInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
        {
        auto result= new VkDisplayModeCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
        {
        auto result= new VkDisplaySurfaceCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
        {
        auto result= new VkDisplayPresentInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR:
        {
        auto result= new VkXlibSurfaceCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
        {
        auto result= new VkXcbSurfaceCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
        {
        auto result= new VkSwapchainCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
        {
        auto result= new VkPresentInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
        {
        auto result= new VkDebugReportCallbackCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT:
        {
        auto result= new VkValidationFlagsEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT:
        {
        auto result= new VkValidationFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
        {
        auto result= new VkPipelineRasterizationStateRasterizationOrderAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
        {
        auto result= new VkDebugMarkerObjectNameInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
        {
        auto result= new VkDebugMarkerObjectTagInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
        {
        auto result= new VkDebugMarkerMarkerInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
        {
        auto result= new VkDedicatedAllocationImageCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
        {
        auto result= new VkDedicatedAllocationBufferCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
        {
        auto result= new VkDedicatedAllocationMemoryAllocateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV:
        {
        auto result= new VkExternalMemoryImageCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV:
        {
        auto result= new VkExportMemoryAllocateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO:
        {
        auto result= new VkDevicePrivateDataCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO:
        {
        auto result= new VkPrivateDataSlotCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES:
        {
        auto result= new VkPhysicalDevicePrivateDataFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceMultiDrawPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV:
        {
        auto result= new VkGraphicsShaderGroupCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
        {
        auto result= new VkGraphicsPipelineShaderGroupsCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV:
        {
        auto result= new VkIndirectCommandsLayoutTokenNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
        {
        auto result= new VkIndirectCommandsLayoutCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV:
        {
        auto result= new VkGeneratedCommandsInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
        {
        auto result= new VkGeneratedCommandsMemoryRequirementsInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
        {
        auto result= new VkPipelineIndirectDeviceAddressInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
        {
        auto result= new VkPhysicalDeviceFeatures2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
        {
        auto result= new VkPhysicalDeviceProperties2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
        {
        auto result= new VkFormatProperties2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
        {
        auto result= new VkImageFormatProperties2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
        {
        auto result= new VkPhysicalDeviceImageFormatInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
        {
        auto result= new VkQueueFamilyProperties2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
        {
        auto result= new VkPhysicalDeviceMemoryProperties2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
        {
        auto result= new VkSparseImageFormatProperties2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
        {
        auto result= new VkPhysicalDeviceSparseImageFormatInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDevicePushDescriptorPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceDriverProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
        {
        auto result= new VkPresentRegionsKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
        {
        auto result= new VkPhysicalDeviceVariablePointersFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
        {
        auto result= new VkPhysicalDeviceExternalImageFormatInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
        {
        auto result= new VkExternalImageFormatProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
        {
        auto result= new VkPhysicalDeviceExternalBufferInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
        {
        auto result= new VkExternalBufferProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceIDProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
        {
        auto result= new VkExternalMemoryImageCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
        {
        auto result= new VkExternalMemoryBufferCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
        {
        auto result= new VkExportMemoryAllocateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
        {
        auto result= new VkImportMemoryFdInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
        {
        auto result= new VkMemoryFdPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
        {
        auto result= new VkMemoryGetFdInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
        {
        auto result= new VkPhysicalDeviceExternalSemaphoreInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
        {
        auto result= new VkExternalSemaphoreProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
        {
        auto result= new VkExportSemaphoreCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
        {
        auto result= new VkImportSemaphoreFdInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
        {
        auto result= new VkSemaphoreGetFdInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
        {
        auto result= new VkPhysicalDeviceExternalFenceInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
        {
        auto result= new VkExternalFenceProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
        {
        auto result= new VkExportFenceCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
        {
        auto result= new VkImportFenceFdInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
        {
        auto result= new VkFenceGetFdInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
        {
        auto result= new VkPhysicalDeviceMultiviewFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceMultiviewProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
        {
        auto result= new VkRenderPassMultiviewCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT:
        {
        auto result= new VkSurfaceCapabilities2EXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT:
        {
        auto result= new VkDisplayPowerInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT:
        {
        auto result= new VkDeviceEventInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT:
        {
        auto result= new VkDisplayEventInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT:
        {
        auto result= new VkSwapchainCounterCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceGroupProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
        {
        auto result= new VkMemoryAllocateFlagsInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
        {
        auto result= new VkBindBufferMemoryInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
        {
        auto result= new VkBindBufferMemoryDeviceGroupInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
        {
        auto result= new VkBindImageMemoryInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
        {
        auto result= new VkBindImageMemoryDeviceGroupInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
        {
        auto result= new VkDeviceGroupRenderPassBeginInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
        {
        auto result= new VkDeviceGroupCommandBufferBeginInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
        {
        auto result= new VkDeviceGroupSubmitInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
        {
        auto result= new VkDeviceGroupBindSparseInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
        {
        auto result= new VkDeviceGroupPresentCapabilitiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
        {
        auto result= new VkImageSwapchainCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
        {
        auto result= new VkBindImageMemorySwapchainInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
        {
        auto result= new VkAcquireNextImageInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
        {
        auto result= new VkDeviceGroupPresentInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
        {
        auto result= new VkDeviceGroupDeviceCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
        {
        auto result= new VkDeviceGroupSwapchainCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
        {
        auto result= new VkDescriptorUpdateTemplateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
        {
        auto result= new VkPhysicalDevicePresentIdFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_ID_KHR:
        {
        auto result= new VkPresentIdKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
        {
        auto result= new VkPhysicalDevicePresentWaitFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_HDR_METADATA_EXT:
        {
        auto result= new VkHdrMetadataEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
        {
        auto result= new VkDisplayNativeHdrSurfaceCapabilitiesAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
        {
        auto result= new VkSwapchainDisplayNativeHdrCreateInfoAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE:
        {
        auto result= new VkPresentTimesInfoGOOGLE;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineViewportWScalingStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineViewportSwizzleStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceDiscardRectanglePropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineDiscardRectangleStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX:
        {
        auto result= new VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
        {
        auto result= new VkRenderPassInputAttachmentAspectCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
        {
        auto result= new VkPhysicalDeviceSurfaceInfo2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
        {
        auto result= new VkSurfaceCapabilities2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
        {
        auto result= new VkSurfaceFormat2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
        {
        auto result= new VkDisplayProperties2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
        {
        auto result= new VkDisplayPlaneProperties2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
        {
        auto result= new VkDisplayModeProperties2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
        {
        auto result= new VkDisplayPlaneInfo2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
        {
        auto result= new VkDisplayPlaneCapabilities2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
        {
        auto result= new VkSharedPresentSurfaceCapabilitiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
        {
        auto result= new VkPhysicalDevice16BitStorageFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceSubgroupProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
        {
        auto result= new VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
        {
        auto result= new VkBufferMemoryRequirementsInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS:
        {
        auto result= new VkDeviceBufferMemoryRequirements;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
        {
        auto result= new VkImageMemoryRequirementsInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
        {
        auto result= new VkImageSparseMemoryRequirementsInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS:
        {
        auto result= new VkDeviceImageMemoryRequirements;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
        {
        auto result= new VkMemoryRequirements2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
        {
        auto result= new VkSparseImageMemoryRequirements2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
        {
        auto result= new VkPhysicalDevicePointClippingProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
        {
        auto result= new VkMemoryDedicatedRequirements;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
        {
        auto result= new VkMemoryDedicatedAllocateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
        {
        auto result= new VkImageViewUsageCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT:
        {
        auto result= new VkImageViewSlicedCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
        {
        auto result= new VkPipelineTessellationDomainOriginStateCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
        {
        auto result= new VkSamplerYcbcrConversionInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
        {
        auto result= new VkSamplerYcbcrConversionCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
        {
        auto result= new VkBindImagePlaneMemoryInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
        {
        auto result= new VkImagePlaneMemoryRequirementsInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
        {
        auto result= new VkPhysicalDeviceSamplerYcbcrConversionFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
        {
        auto result= new VkSamplerYcbcrConversionImageFormatProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
        {
        auto result= new VkTextureLODGatherFormatPropertiesAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT:
        {
        auto result= new VkConditionalRenderingBeginInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
        {
        auto result= new VkProtectedSubmitInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
        {
        auto result= new VkPhysicalDeviceProtectedMemoryFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceProtectedMemoryProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
        {
        auto result= new VkDeviceQueueInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineCoverageToColorStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceSamplerFilterMinmaxProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
        {
        auto result= new VkSampleLocationsInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
        {
        auto result= new VkRenderPassSampleLocationsBeginInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineSampleLocationsStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceSampleLocationsPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
        {
        auto result= new VkMultisamplePropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
        {
        auto result= new VkSamplerReductionModeCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceMultiDrawFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineColorBlendAdvancedStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
        {
        auto result= new VkPhysicalDeviceInlineUniformBlockFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceInlineUniformBlockProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
        {
        auto result= new VkWriteDescriptorSetInlineUniformBlock;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
        {
        auto result= new VkDescriptorPoolInlineUniformBlockCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineCoverageModulationStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
        {
        auto result= new VkImageFormatListCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT:
        {
        auto result= new VkValidationCacheCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
        {
        auto result= new VkShaderModuleValidationCacheCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceMaintenance3Properties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
        {
        auto result= new VkPhysicalDeviceMaintenance4Features;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceMaintenance4Properties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceMaintenance5FeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDeviceMaintenance5PropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR:
        {
        auto result= new VkRenderingAreaInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
        {
        auto result= new VkDescriptorSetLayoutSupport;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
        {
        auto result= new VkPhysicalDeviceShaderDrawParametersFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
        {
        auto result= new VkPhysicalDeviceShaderFloat16Int8Features;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceFloatControlsProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
        {
        auto result= new VkPhysicalDeviceHostQueryResetFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
        {
        auto result= new VkDeviceQueueGlobalPriorityCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
        {
        auto result= new VkQueueFamilyGlobalPriorityPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
        {
        auto result= new VkDebugUtilsObjectNameInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
        {
        auto result= new VkDebugUtilsObjectTagInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
        {
        auto result= new VkDebugUtilsLabelEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
        {
        auto result= new VkDebugUtilsMessengerCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
        {
        auto result= new VkDebugUtilsMessengerCallbackDataEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
        {
        auto result= new VkDeviceDeviceMemoryReportCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
        {
        auto result= new VkDeviceMemoryReportCallbackDataEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
        {
        auto result= new VkImportMemoryHostPointerInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
        {
        auto result= new VkMemoryHostPointerPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
        {
        auto result= new VkCalibratedTimestampInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
        {
        auto result= new VkPhysicalDeviceShaderCorePropertiesAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
        {
        auto result= new VkPhysicalDeviceShaderCoreProperties2AMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineRasterizationConservativeStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
        {
        auto result= new VkPhysicalDeviceDescriptorIndexingFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceDescriptorIndexingProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
        {
        auto result= new VkDescriptorSetLayoutBindingFlagsCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
        {
        auto result= new VkDescriptorSetVariableDescriptorCountAllocateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
        {
        auto result= new VkDescriptorSetVariableDescriptorCountLayoutSupport;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
        {
        auto result= new VkAttachmentDescription2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
        {
        auto result= new VkAttachmentReference2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
        {
        auto result= new VkSubpassDescription2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
        {
        auto result= new VkSubpassDependency2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
        {
        auto result= new VkRenderPassCreateInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
        {
        auto result= new VkSubpassBeginInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
        {
        auto result= new VkSubpassEndInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
        {
        auto result= new VkPhysicalDeviceTimelineSemaphoreFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceTimelineSemaphoreProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
        {
        auto result= new VkSemaphoreTypeCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
        {
        auto result= new VkTimelineSemaphoreSubmitInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
        {
        auto result= new VkSemaphoreWaitInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
        {
        auto result= new VkSemaphoreSignalInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineVertexInputDivisorStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDevicePCIBusInfoPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT:
        {
        auto result= new VkCommandBufferInheritanceConditionalRenderingInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
        {
        auto result= new VkPhysicalDevice8BitStorageFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceConditionalRenderingFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
        {
        auto result= new VkPhysicalDeviceVulkanMemoryModelFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
        {
        auto result= new VkPhysicalDeviceShaderAtomicInt64Features;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV:
        {
        auto result= new VkQueueFamilyCheckpointPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV:
        {
        auto result= new VkCheckpointDataNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceDepthStencilResolveProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
        {
        auto result= new VkSubpassDescriptionDepthStencilResolve;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT:
        {
        auto result= new VkImageViewASTCDecodeModeEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceASTCDecodeFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceTransformFeedbackFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceTransformFeedbackPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineRasterizationStateStreamCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceExclusiveScissorFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineViewportExclusiveScissorStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceCornerSampledImageFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceShaderImageFootprintFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceMemoryDecompressionFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceMemoryDecompressionPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineViewportShadingRateImageStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceShadingRateImageFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceShadingRateImagePropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
        {
        auto result= new VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceMeshShaderFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceMeshShaderPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceMeshShaderFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceMeshShaderPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
        {
        auto result= new VkRayTracingShaderGroupCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
        {
        auto result= new VkRayTracingShaderGroupCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV:
        {
        auto result= new VkRayTracingPipelineCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
        {
        auto result= new VkRayTracingPipelineCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV:
        {
        auto result= new VkGeometryTrianglesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV:
        {
        auto result= new VkGeometryAABBNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GEOMETRY_NV:
        {
        auto result= new VkGeometryNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV:
        {
        auto result= new VkAccelerationStructureInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV:
        {
        auto result= new VkAccelerationStructureCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
        {
        auto result= new VkBindAccelerationStructureMemoryInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
        {
        auto result= new VkWriteDescriptorSetAccelerationStructureKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
        {
        auto result= new VkWriteDescriptorSetAccelerationStructureNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
        {
        auto result= new VkAccelerationStructureMemoryRequirementsInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceAccelerationStructureFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceRayTracingPipelineFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceRayQueryFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDeviceAccelerationStructurePropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDeviceRayTracingPipelinePropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceRayTracingPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
        {
        auto result= new VkDrmFormatModifierPropertiesListEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
        {
        auto result= new VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
        {
        auto result= new VkImageDrmFormatModifierListCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
        {
        auto result= new VkImageDrmFormatModifierExplicitCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
        {
        auto result= new VkImageDrmFormatModifierPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
        {
        auto result= new VkImageStencilUsageCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
        {
        auto result= new VkDeviceMemoryOverallocationCreateInfoAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM:
        {
        auto result= new VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
        {
        auto result= new VkRenderPassFragmentDensityMapCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
        {
        auto result= new VkSubpassFragmentDensityMapOffsetEndInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
        {
        auto result= new VkPhysicalDeviceScalarBlockLayoutFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
        {
        auto result= new VkSurfaceProtectedCapabilitiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
        {
        auto result= new VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceDepthClipEnableFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineRasterizationDepthClipStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceMemoryBudgetPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceMemoryPriorityFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
        {
        auto result= new VkMemoryPriorityAllocateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
        {
        auto result= new VkPhysicalDeviceBufferDeviceAddressFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
        {
        auto result= new VkBufferDeviceAddressInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
        {
        auto result= new VkBufferOpaqueCaptureAddressCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT:
        {
        auto result= new VkBufferDeviceAddressCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
        {
        auto result= new VkPhysicalDeviceImageViewImageFormatInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
        {
        auto result= new VkFilterCubicImageViewImageFormatPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
        {
        auto result= new VkPhysicalDeviceImagelessFramebufferFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
        {
        auto result= new VkFramebufferAttachmentsCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
        {
        auto result= new VkFramebufferAttachmentImageInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
        {
        auto result= new VkRenderPassAttachmentBeginInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES:
        {
        auto result= new VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceCooperativeMatrixFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceCooperativeMatrixPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV:
        {
        auto result= new VkCooperativeMatrixPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX:
        {
        auto result= new VkImageViewHandleInfoNVX;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX:
        {
        auto result= new VkImageViewAddressPropertiesNVX;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
        {
        auto result= new VkPipelineCreationFeedbackCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
        {
        auto result= new VkPhysicalDevicePresentBarrierFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
        {
        auto result= new VkSurfaceCapabilitiesPresentBarrierNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
        {
        auto result= new VkSwapchainPresentBarrierCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
        {
        auto result= new VkPhysicalDevicePerformanceQueryFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDevicePerformanceQueryPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
        {
        auto result= new VkPerformanceCounterKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
        {
        auto result= new VkPerformanceCounterDescriptionKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
        {
        auto result= new VkQueryPoolPerformanceCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
        {
        auto result= new VkAcquireProfilingLockInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
        {
        auto result= new VkPerformanceQuerySubmitInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
        {
        auto result= new VkHeadlessSurfaceCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceCoverageReductionModeFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineCoverageReductionStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
        {
        auto result= new VkFramebufferMixedSamplesCombinationNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL:
        {
        auto result= new VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL:
        {
        auto result= new VkInitializePerformanceApiInfoINTEL;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
        {
        auto result= new VkQueryPoolPerformanceQueryCreateInfoINTEL;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL:
        {
        auto result= new VkPerformanceMarkerInfoINTEL;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL:
        {
        auto result= new VkPerformanceStreamMarkerInfoINTEL;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL:
        {
        auto result= new VkPerformanceOverrideInfoINTEL;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
        {
        auto result= new VkPerformanceConfigurationAcquireInfoINTEL;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceShaderClockFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceIndexTypeUint8FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
        {
        auto result= new VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
        {
        auto result= new VkAttachmentReferenceStencilLayout;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
        {
        auto result= new VkAttachmentDescriptionStencilLayout;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
        {
        auto result= new VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
        {
        auto result= new VkPipelineInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
        {
        auto result= new VkPipelineExecutablePropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
        {
        auto result= new VkPipelineExecutableInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
        {
        auto result= new VkPipelineExecutableStatisticKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
        {
        auto result= new VkPipelineExecutableInternalRepresentationKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES:
        {
        auto result= new VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceTexelBufferAlignmentProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
        {
        auto result= new VkPhysicalDeviceSubgroupSizeControlFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceSubgroupSizeControlProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO:
        {
        auto result= new VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
        {
        auto result= new VkSubpassShadingPipelineCreateInfoHUAWEI;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
        {
        auto result= new VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI:
        {
        auto result= new VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
        {
        auto result= new VkMemoryOpaqueCaptureAddressAllocateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
        {
        auto result= new VkDeviceMemoryOpaqueCaptureAddressInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceLineRasterizationFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceLineRasterizationPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineRasterizationLineStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES:
        {
        auto result= new VkPhysicalDevicePipelineCreationCacheControlFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
        {
        auto result= new VkPhysicalDeviceVulkan11Features;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceVulkan11Properties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
        {
        auto result= new VkPhysicalDeviceVulkan12Features;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceVulkan12Properties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES:
        {
        auto result= new VkPhysicalDeviceVulkan13Features;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceVulkan13Properties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
        {
        auto result= new VkPipelineCompilerControlCreateInfoAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
        {
        auto result= new VkPhysicalDeviceCoherentMemoryFeaturesAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceToolProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
        {
        auto result= new VkSamplerCustomBorderColorCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceCustomBorderColorPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceCustomBorderColorFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT:
        {
        auto result= new VkSamplerBorderColorComponentMappingCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
        {
        auto result= new VkAccelerationStructureGeometryTrianglesDataKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
        {
        auto result= new VkAccelerationStructureGeometryAabbsDataKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
        {
        auto result= new VkAccelerationStructureGeometryInstancesDataKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
        {
        auto result= new VkAccelerationStructureGeometryKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
        {
        auto result= new VkAccelerationStructureBuildGeometryInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
        {
        auto result= new VkAccelerationStructureCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
        {
        auto result= new VkAccelerationStructureDeviceAddressInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
        {
        auto result= new VkAccelerationStructureVersionInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
        {
        auto result= new VkCopyAccelerationStructureInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
        {
        auto result= new VkCopyAccelerationStructureToMemoryInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
        {
        auto result= new VkCopyMemoryToAccelerationStructureInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
        {
        auto result= new VkRayTracingPipelineInterfaceCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
        {
        auto result= new VkPipelineLibraryCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM:
        {
        auto result= new VkRenderPassTransformBeginInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM:
        {
        auto result= new VkCopyCommandTransformInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM:
        {
        auto result= new VkCommandBufferInheritanceRenderPassTransformInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceDiagnosticsConfigFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
        {
        auto result= new VkDeviceDiagnosticsConfigCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES:
        {
        auto result= new VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceRobustness2FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceRobustness2PropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
        {
        auto result= new VkPhysicalDeviceImageRobustnessFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevice4444FormatsFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
        {
        auto result= new VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI:
        {
        auto result= new VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_COPY_2:
        {
        auto result= new VkBufferCopy2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_COPY_2:
        {
        auto result= new VkImageCopy2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_BLIT_2:
        {
        auto result= new VkImageBlit2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2:
        {
        auto result= new VkBufferImageCopy2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2:
        {
        auto result= new VkImageResolve2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2:
        {
        auto result= new VkCopyBufferInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2:
        {
        auto result= new VkCopyImageInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2:
        {
        auto result= new VkBlitImageInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2:
        {
        auto result= new VkCopyBufferToImageInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2:
        {
        auto result= new VkCopyImageToBufferInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2:
        {
        auto result= new VkResolveImageInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
        {
        auto result= new VkFragmentShadingRateAttachmentInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
        {
        auto result= new VkPipelineFragmentShadingRateStateCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceFragmentShadingRateFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDeviceFragmentShadingRatePropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
        {
        auto result= new VkPhysicalDeviceFragmentShadingRateKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
        {
        auto result= new VkPhysicalDeviceShaderTerminateInvocationFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV:
        {
        auto result= new VkPipelineFragmentShadingRateEnumStateCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
        {
        auto result= new VkAccelerationStructureBuildSizesInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
        {
        auto result= new VkMutableDescriptorTypeCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceDepthClipControlFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineViewportDepthClipControlCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
        {
        auto result= new VkVertexInputBindingDescription2EXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
        {
        auto result= new VkVertexInputAttributeDescription2EXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceColorWriteEnableFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineColorWriteCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2:
        {
        auto result= new VkMemoryBarrier2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2:
        {
        auto result= new VkImageMemoryBarrier2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2:
        {
        auto result= new VkBufferMemoryBarrier2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEPENDENCY_INFO:
        {
        auto result= new VkDependencyInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO:
        {
        auto result= new VkSemaphoreSubmitInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO:
        {
        auto result= new VkCommandBufferSubmitInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBMIT_INFO_2:
        {
        auto result= new VkSubmitInfo2;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
        {
        auto result= new VkQueueFamilyCheckpointProperties2NV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
        {
        auto result= new VkCheckpointData2NV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
        {
        auto result= new VkPhysicalDeviceSynchronization2Features;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceHostImageCopyFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceHostImageCopyPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT:
        {
        auto result= new VkMemoryToImageCopyEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT:
        {
        auto result= new VkImageToMemoryCopyEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT:
        {
        auto result= new VkCopyMemoryToImageInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT:
        {
        auto result= new VkCopyImageToMemoryInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT:
        {
        auto result= new VkCopyImageToImageInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT:
        {
        auto result= new VkHostImageLayoutTransitionInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT:
        {
        auto result= new VkSubresourceHostMemcpySizeEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
        {
        auto result= new VkHostImageCopyDevicePerformanceQueryEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceLegacyDitheringFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT:
        {
        auto result= new VkSubpassResolvePerformanceQueryEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
        {
        auto result= new VkMultisampledRenderToSingleSampledInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR:
        {
        auto result= new VkQueueFamilyVideoPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
        {
        auto result= new VkQueueFamilyQueryResultStatusPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR:
        {
        auto result= new VkVideoProfileListInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR:
        {
        auto result= new VkPhysicalDeviceVideoFormatInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR:
        {
        auto result= new VkVideoFormatPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR:
        {
        auto result= new VkVideoProfileInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR:
        {
        auto result= new VkVideoCapabilitiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR:
        {
        auto result= new VkVideoSessionMemoryRequirementsKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR:
        {
        auto result= new VkBindVideoSessionMemoryInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR:
        {
        auto result= new VkVideoPictureResourceInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR:
        {
        auto result= new VkVideoReferenceSlotInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR:
        {
        auto result= new VkVideoDecodeCapabilitiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR:
        {
        auto result= new VkVideoDecodeUsageInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR:
        {
        auto result= new VkVideoDecodeInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR:
        {
        auto result= new VkVideoDecodeH264ProfileInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR:
        {
        auto result= new VkVideoDecodeH264CapabilitiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
        {
        auto result= new VkVideoDecodeH264SessionParametersAddInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
        {
        auto result= new VkVideoDecodeH264SessionParametersCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR:
        {
        auto result= new VkVideoDecodeH264PictureInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR:
        {
        auto result= new VkVideoDecodeH264DpbSlotInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR:
        {
        auto result= new VkVideoDecodeH265ProfileInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR:
        {
        auto result= new VkVideoDecodeH265CapabilitiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
        {
        auto result= new VkVideoDecodeH265SessionParametersAddInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
        {
        auto result= new VkVideoDecodeH265SessionParametersCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR:
        {
        auto result= new VkVideoDecodeH265PictureInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR:
        {
        auto result= new VkVideoDecodeH265DpbSlotInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR:
        {
        auto result= new VkVideoSessionCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
        {
        auto result= new VkVideoSessionParametersCreateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
        {
        auto result= new VkVideoSessionParametersUpdateInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR:
        {
        auto result= new VkVideoBeginCodingInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR:
        {
        auto result= new VkVideoEndCodingInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR:
        {
        auto result= new VkVideoCodingControlInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceInheritedViewportScissorFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
        {
        auto result= new VkCommandBufferInheritanceViewportScissorInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceProvokingVertexFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceProvokingVertexPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX:
        {
        auto result= new VkCuModuleCreateInfoNVX;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX:
        {
        auto result= new VkCuFunctionCreateInfoNVX;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX:
        {
        auto result= new VkCuLaunchInfoNVX;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceDescriptorBufferFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceDescriptorBufferPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT:
        {
        auto result= new VkDescriptorAddressInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT:
        {
        auto result= new VkDescriptorBufferBindingInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT:
        {
        auto result= new VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT:
        {
        auto result= new VkDescriptorGetInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        auto result= new VkBufferCaptureDescriptorDataInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        auto result= new VkImageCaptureDescriptorDataInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        auto result= new VkImageViewCaptureDescriptorDataInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        auto result= new VkSamplerCaptureDescriptorDataInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
        {
        auto result= new VkAccelerationStructureCaptureDescriptorDataInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
        {
        auto result= new VkOpaqueCaptureDescriptorDataCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
        {
        auto result= new VkPhysicalDeviceShaderIntegerDotProductFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES:
        {
        auto result= new VkPhysicalDeviceShaderIntegerDotProductProperties;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceDrmPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV:
        {
        auto result= new VkAccelerationStructureGeometryMotionTrianglesDataNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV:
        {
        auto result= new VkAccelerationStructureMotionInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV:
        {
        auto result= new VkMemoryGetRemoteAddressInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3:
        {
        auto result= new VkFormatProperties3;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
        {
        auto result= new VkDrmFormatModifierPropertiesList2EXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO:
        {
        auto result= new VkPipelineRenderingCreateInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_INFO:
        {
        auto result= new VkRenderingInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO:
        {
        auto result= new VkRenderingAttachmentInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
        {
        auto result= new VkRenderingFragmentShadingRateAttachmentInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
        {
        auto result= new VkRenderingFragmentDensityMapAttachmentInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
        {
        auto result= new VkPhysicalDeviceDynamicRenderingFeatures;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
        {
        auto result= new VkCommandBufferInheritanceRenderingInfo;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD:
        {
        auto result= new VkAttachmentSampleCountInfoAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
        {
        auto result= new VkMultiviewPerViewAttributesInfoNVX;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceImageViewMinLodFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT:
        {
        auto result= new VkImageViewMinLodCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceLinearColorAttachmentFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
        {
        auto result= new VkGraphicsPipelineLibraryCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE:
        {
        auto result= new VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
        {
        auto result= new VkDescriptorSetBindingReferenceVALVE;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
        {
        auto result= new VkDescriptorSetLayoutHostMappingInfoVALVE;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineShaderStageModuleIdentifierCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT:
        {
        auto result= new VkShaderModuleIdentifierEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT:
        {
        auto result= new VkImageCompressionControlEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceImageCompressionControlFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT:
        {
        auto result= new VkImageCompressionPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR:
        {
        auto result= new VkImageSubresource2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR:
        {
        auto result= new VkSubresourceLayout2KHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT:
        {
        auto result= new VkRenderPassCreationControlEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
        {
        auto result= new VkRenderPassCreationFeedbackCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
        {
        auto result= new VkRenderPassSubpassFeedbackCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT:
        {
        auto result= new VkMicromapBuildInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT:
        {
        auto result= new VkMicromapCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT:
        {
        auto result= new VkMicromapVersionInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT:
        {
        auto result= new VkCopyMicromapInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT:
        {
        auto result= new VkCopyMicromapToMemoryInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT:
        {
        auto result= new VkCopyMemoryToMicromapInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT:
        {
        auto result= new VkMicromapBuildSizesInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceOpacityMicromapFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceOpacityMicromapPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT:
        {
        auto result= new VkAccelerationStructureTrianglesOpacityMicromapEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT:
        {
        auto result= new VkPipelinePropertiesIdentifierEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevicePipelinePropertiesFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD:
        {
        auto result= new VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
        {
        auto result= new VkExternalMemoryAcquireUnmodifiedEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevicePipelineRobustnessFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT:
        {
        auto result= new VkPipelineRobustnessCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDevicePipelineRobustnessPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
        {
        auto result= new VkImageViewSampleWeightCreateInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceImageProcessingFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
        {
        auto result= new VkPhysicalDeviceImageProcessingPropertiesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceTilePropertiesFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM:
        {
        auto result= new VkTilePropertiesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
        {
        auto result= new VkPhysicalDeviceAmigoProfilingFeaturesSEC;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC:
        {
        auto result= new VkAmigoProfilingSubmitInfoSEC;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceAddressBindingReportFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
        {
        auto result= new VkDeviceAddressBindingCallbackDataEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceOpticalFlowFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceOpticalFlowPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV:
        {
        auto result= new VkOpticalFlowImageFormatInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
        {
        auto result= new VkOpticalFlowImageFormatPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV:
        {
        auto result= new VkOpticalFlowSessionCreateInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
        {
        auto result= new VkOpticalFlowSessionCreatePrivateDataInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV:
        {
        auto result= new VkOpticalFlowExecuteInfoNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceFaultFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT:
        {
        auto result= new VkDeviceFaultCountsEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT:
        {
        auto result= new VkDeviceFaultInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT:
        {
        auto result= new VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT:
        {
        auto result= new VkDepthBiasInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT:
        {
        auto result= new VkDepthBiasRepresentationInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
        {
        auto result= new VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
        {
        auto result= new VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT:
        {
        auto result= new VkFrameBoundaryEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceFrameBoundaryFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT:
        {
        auto result= new VkSurfacePresentModeEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
        {
        auto result= new VkSurfacePresentScalingCapabilitiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
        {
        auto result= new VkSurfacePresentModeCompatibilityEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT:
        {
        auto result= new VkSwapchainPresentFenceInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
        {
        auto result= new VkSwapchainPresentModesCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT:
        {
        auto result= new VkSwapchainPresentModeInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
        {
        auto result= new VkSwapchainPresentScalingCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT:
        {
        auto result= new VkReleaseSwapchainImagesInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceDepthBiasControlFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV:
        {
        auto result= new VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG:
        {
        auto result= new VkDirectDriverLoadingInfoLUNARG;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG:
        {
        auto result= new VkDirectDriverLoadingListLUNARG;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR:
        {
        auto result= new VkDeviceImageSubresourceInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
        {
        auto result= new VkPhysicalDeviceShaderCorePropertiesARM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM:
        {
        auto result= new VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV:
        {
        auto result= new VkQueryLowLatencySupportNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR:
        {
        auto result= new VkMemoryMapInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR:
        {
        auto result= new VkMemoryUnmapInfoKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderObjectFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderObjectPropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT:
        {
        auto result= new VkShaderCreateInfoEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderTileImageFeaturesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
        {
        auto result= new VkPhysicalDeviceShaderTileImagePropertiesEXT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
        {
        auto result= new VkPhysicalDeviceCooperativeMatrixFeaturesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
        {
        auto result= new VkCooperativeMatrixPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
        {
        auto result= new VkPhysicalDeviceCooperativeMatrixPropertiesKHR;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceCubicClampFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM:
        {
        auto result= new VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceCubicWeightsFeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM:
        {
        auto result= new VkSamplerCubicWeightsCreateInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM:
        {
        auto result= new VkBlitImageCubicWeightsInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM:
        {
        auto result= new VkPhysicalDeviceImageProcessing2FeaturesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM:
        {
        auto result= new VkPhysicalDeviceImageProcessing2PropertiesQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM:
        {
        auto result= new VkSamplerBlockMatchWindowCreateInfoQCOM;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV:
        {
        auto result= new VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    

    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT:
        {
        auto result= new VkPhysicalDeviceLayeredDriverPropertiesMSFT;
        deserialize_struct(json, result);
        member=result;
        return;
        }
    
}}
std::map<VkStructureType, size_t> structure_type_to_size={
{VK_STRUCTURE_TYPE_APPLICATION_INFO, sizeof(VkApplicationInfo) },
{VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, sizeof(VkDeviceQueueCreateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, sizeof(VkDeviceCreateInfo) },
{VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, sizeof(VkInstanceCreateInfo) },
{VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, sizeof(VkMemoryAllocateInfo) },
{VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, sizeof(VkMappedMemoryRange) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, sizeof(VkWriteDescriptorSet) },
{VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, sizeof(VkCopyDescriptorSet) },
{VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR, sizeof(VkBufferUsageFlags2CreateInfoKHR) },
{VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, sizeof(VkBufferCreateInfo) },
{VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, sizeof(VkBufferViewCreateInfo) },
{VK_STRUCTURE_TYPE_MEMORY_BARRIER, sizeof(VkMemoryBarrier) },
{VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, sizeof(VkBufferMemoryBarrier) },
{VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, sizeof(VkImageMemoryBarrier) },
{VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, sizeof(VkImageCreateInfo) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, sizeof(VkImageViewCreateInfo) },
{VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, sizeof(VkBindSparseInfo) },
{VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, sizeof(VkShaderModuleCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, sizeof(VkDescriptorSetLayoutCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, sizeof(VkDescriptorPoolCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, sizeof(VkDescriptorSetAllocateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, sizeof(VkPipelineShaderStageCreateInfo) },
{VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, sizeof(VkComputePipelineCreateInfo) },
{VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV, sizeof(VkComputePipelineIndirectBufferInfoNV) },
{VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR, sizeof(VkPipelineCreateFlags2CreateInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, sizeof(VkPipelineVertexInputStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, sizeof(VkPipelineInputAssemblyStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, sizeof(VkPipelineTessellationStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, sizeof(VkPipelineViewportStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, sizeof(VkPipelineRasterizationStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, sizeof(VkPipelineMultisampleStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, sizeof(VkPipelineColorBlendStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, sizeof(VkPipelineDynamicStateCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, sizeof(VkPipelineDepthStencilStateCreateInfo) },
{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, sizeof(VkGraphicsPipelineCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, sizeof(VkPipelineCacheCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, sizeof(VkPipelineLayoutCreateInfo) },
{VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, sizeof(VkSamplerCreateInfo) },
{VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, sizeof(VkCommandPoolCreateInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, sizeof(VkCommandBufferAllocateInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, sizeof(VkCommandBufferInheritanceInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, sizeof(VkCommandBufferBeginInfo) },
{VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, sizeof(VkRenderPassBeginInfo) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, sizeof(VkRenderPassCreateInfo) },
{VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, sizeof(VkEventCreateInfo) },
{VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, sizeof(VkFenceCreateInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, sizeof(VkSemaphoreCreateInfo) },
{VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, sizeof(VkQueryPoolCreateInfo) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, sizeof(VkFramebufferCreateInfo) },
{VK_STRUCTURE_TYPE_SUBMIT_INFO, sizeof(VkSubmitInfo) },
{VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, sizeof(VkDisplayModeCreateInfoKHR) },
{VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, sizeof(VkDisplaySurfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, sizeof(VkDisplayPresentInfoKHR) },
{VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, sizeof(VkXlibSurfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, sizeof(VkXcbSurfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkSwapchainCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, sizeof(VkPresentInfoKHR) },
{VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, sizeof(VkDebugReportCallbackCreateInfoEXT) },
{VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, sizeof(VkValidationFlagsEXT) },
{VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, sizeof(VkValidationFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, sizeof(VkPipelineRasterizationStateRasterizationOrderAMD) },
{VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, sizeof(VkDebugMarkerObjectNameInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, sizeof(VkDebugMarkerObjectTagInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, sizeof(VkDebugMarkerMarkerInfoEXT) },
{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, sizeof(VkDedicatedAllocationImageCreateInfoNV) },
{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, sizeof(VkDedicatedAllocationBufferCreateInfoNV) },
{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, sizeof(VkDedicatedAllocationMemoryAllocateInfoNV) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, sizeof(VkExternalMemoryImageCreateInfoNV) },
{VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, sizeof(VkExportMemoryAllocateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) },
{VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO, sizeof(VkDevicePrivateDataCreateInfo) },
{VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO, sizeof(VkPrivateDataSlotCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES, sizeof(VkPhysicalDevicePrivateDataFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT, sizeof(VkPhysicalDeviceMultiDrawPropertiesEXT) },
{VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, sizeof(VkGraphicsShaderGroupCreateInfoNV) },
{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV) },
{VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, sizeof(VkIndirectCommandsLayoutTokenNV) },
{VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, sizeof(VkIndirectCommandsLayoutCreateInfoNV) },
{VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, sizeof(VkGeneratedCommandsInfoNV) },
{VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV) },
{VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV, sizeof(VkPipelineIndirectDeviceAddressInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, sizeof(VkPhysicalDeviceFeatures2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, sizeof(VkPhysicalDeviceProperties2) },
{VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2, sizeof(VkFormatProperties2) },
{VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkImageFormatProperties2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceImageFormatInfo2) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, sizeof(VkQueueFamilyProperties2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, sizeof(VkPhysicalDeviceMemoryProperties2) },
{VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, sizeof(VkSparseImageFormatProperties2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, sizeof(VkPhysicalDeviceSparseImageFormatInfo2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR, sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, sizeof(VkPhysicalDeviceDriverProperties) },
{VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, sizeof(VkPresentRegionsKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, sizeof(VkPhysicalDeviceVariablePointersFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, sizeof(VkPhysicalDeviceExternalImageFormatInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES, sizeof(VkExternalImageFormatProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, sizeof(VkPhysicalDeviceExternalBufferInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES, sizeof(VkExternalBufferProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, sizeof(VkPhysicalDeviceIDProperties) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, sizeof(VkExternalMemoryImageCreateInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, sizeof(VkExternalMemoryBufferCreateInfo) },
{VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, sizeof(VkExportMemoryAllocateInfo) },
{VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, sizeof(VkImportMemoryFdInfoKHR) },
{VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, sizeof(VkMemoryFdPropertiesKHR) },
{VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, sizeof(VkMemoryGetFdInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, sizeof(VkPhysicalDeviceExternalSemaphoreInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES, sizeof(VkExternalSemaphoreProperties) },
{VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, sizeof(VkExportSemaphoreCreateInfo) },
{VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, sizeof(VkImportSemaphoreFdInfoKHR) },
{VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, sizeof(VkSemaphoreGetFdInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, sizeof(VkPhysicalDeviceExternalFenceInfo) },
{VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES, sizeof(VkExternalFenceProperties) },
{VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, sizeof(VkExportFenceCreateInfo) },
{VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, sizeof(VkImportFenceFdInfoKHR) },
{VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, sizeof(VkFenceGetFdInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, sizeof(VkPhysicalDeviceMultiviewFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, sizeof(VkPhysicalDeviceMultiviewProperties) },
{VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, sizeof(VkRenderPassMultiviewCreateInfo) },
{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT, sizeof(VkSurfaceCapabilities2EXT) },
{VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, sizeof(VkDisplayPowerInfoEXT) },
{VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, sizeof(VkDeviceEventInfoEXT) },
{VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, sizeof(VkDisplayEventInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, sizeof(VkSwapchainCounterCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES, sizeof(VkPhysicalDeviceGroupProperties) },
{VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, sizeof(VkMemoryAllocateFlagsInfo) },
{VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, sizeof(VkBindBufferMemoryInfo) },
{VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, sizeof(VkBindBufferMemoryDeviceGroupInfo) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, sizeof(VkBindImageMemoryInfo) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, sizeof(VkBindImageMemoryDeviceGroupInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, sizeof(VkDeviceGroupRenderPassBeginInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, sizeof(VkDeviceGroupCommandBufferBeginInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, sizeof(VkDeviceGroupSubmitInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, sizeof(VkDeviceGroupBindSparseInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, sizeof(VkDeviceGroupPresentCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkImageSwapchainCreateInfoKHR) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, sizeof(VkBindImageMemorySwapchainInfoKHR) },
{VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, sizeof(VkAcquireNextImageInfoKHR) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, sizeof(VkDeviceGroupPresentInfoKHR) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, sizeof(VkDeviceGroupDeviceCreateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, sizeof(VkDeviceGroupSwapchainCreateInfoKHR) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, sizeof(VkDescriptorUpdateTemplateCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR, sizeof(VkPhysicalDevicePresentIdFeaturesKHR) },
{VK_STRUCTURE_TYPE_PRESENT_ID_KHR, sizeof(VkPresentIdKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR, sizeof(VkPhysicalDevicePresentWaitFeaturesKHR) },
{VK_STRUCTURE_TYPE_HDR_METADATA_EXT, sizeof(VkHdrMetadataEXT) },
{VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD, sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD) },
{VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, sizeof(VkPresentTimesInfoGOOGLE) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportWScalingStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportSwizzleStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX) },
{VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, sizeof(VkRenderPassInputAttachmentAspectCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, sizeof(VkPhysicalDeviceSurfaceInfo2KHR) },
{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, sizeof(VkSurfaceCapabilities2KHR) },
{VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, sizeof(VkSurfaceFormat2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, sizeof(VkDisplayProperties2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, sizeof(VkDisplayPlaneProperties2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, sizeof(VkDisplayModeProperties2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, sizeof(VkDisplayPlaneInfo2KHR) },
{VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, sizeof(VkDisplayPlaneCapabilities2KHR) },
{VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR, sizeof(VkSharedPresentSurfaceCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, sizeof(VkPhysicalDevice16BitStorageFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, sizeof(VkPhysicalDeviceSubgroupProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) },
{VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, sizeof(VkBufferMemoryRequirementsInfo2) },
{VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS, sizeof(VkDeviceBufferMemoryRequirements) },
{VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, sizeof(VkImageMemoryRequirementsInfo2) },
{VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, sizeof(VkImageSparseMemoryRequirementsInfo2) },
{VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS, sizeof(VkDeviceImageMemoryRequirements) },
{VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, sizeof(VkMemoryRequirements2) },
{VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, sizeof(VkSparseImageMemoryRequirements2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, sizeof(VkPhysicalDevicePointClippingProperties) },
{VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS, sizeof(VkMemoryDedicatedRequirements) },
{VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, sizeof(VkMemoryDedicatedAllocateInfo) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, sizeof(VkImageViewUsageCreateInfo) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT, sizeof(VkImageViewSlicedCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, sizeof(VkPipelineTessellationDomainOriginStateCreateInfo) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, sizeof(VkSamplerYcbcrConversionInfo) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, sizeof(VkSamplerYcbcrConversionCreateInfo) },
{VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, sizeof(VkBindImagePlaneMemoryInfo) },
{VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, sizeof(VkImagePlaneMemoryRequirementsInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES, sizeof(VkSamplerYcbcrConversionImageFormatProperties) },
{VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD, sizeof(VkTextureLODGatherFormatPropertiesAMD) },
{VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, sizeof(VkConditionalRenderingBeginInfoEXT) },
{VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, sizeof(VkProtectedSubmitInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, sizeof(VkPhysicalDeviceProtectedMemoryFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, sizeof(VkPhysicalDeviceProtectedMemoryProperties) },
{VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, sizeof(VkDeviceQueueInfo2) },
{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, sizeof(VkPipelineCoverageToColorStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties) },
{VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, sizeof(VkSampleLocationsInfoEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, sizeof(VkRenderPassSampleLocationsBeginInfoEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, sizeof(VkPipelineSampleLocationsStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT) },
{VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, sizeof(VkMultisamplePropertiesEXT) },
{VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, sizeof(VkSamplerReductionModeCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT, sizeof(VkPhysicalDeviceMultiDrawFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES, sizeof(VkPhysicalDeviceInlineUniformBlockFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES, sizeof(VkPhysicalDeviceInlineUniformBlockProperties) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK, sizeof(VkWriteDescriptorSetInlineUniformBlock) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO, sizeof(VkDescriptorPoolInlineUniformBlockCreateInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, sizeof(VkPipelineCoverageModulationStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, sizeof(VkImageFormatListCreateInfo) },
{VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkValidationCacheCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, sizeof(VkShaderModuleValidationCacheCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, sizeof(VkPhysicalDeviceMaintenance3Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES, sizeof(VkPhysicalDeviceMaintenance4Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES, sizeof(VkPhysicalDeviceMaintenance4Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR, sizeof(VkPhysicalDeviceMaintenance5FeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR, sizeof(VkPhysicalDeviceMaintenance5PropertiesKHR) },
{VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR, sizeof(VkRenderingAreaInfoKHR) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, sizeof(VkDescriptorSetLayoutSupport) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, sizeof(VkPhysicalDeviceShaderDrawParametersFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, sizeof(VkPhysicalDeviceShaderFloat16Int8Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, sizeof(VkPhysicalDeviceFloatControlsProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, sizeof(VkPhysicalDeviceHostQueryResetFeatures) },
{VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR, sizeof(VkDeviceQueueGlobalPriorityCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR, sizeof(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR, sizeof(VkQueueFamilyGlobalPriorityPropertiesKHR) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, sizeof(VkDebugUtilsObjectNameInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, sizeof(VkDebugUtilsObjectTagInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, sizeof(VkDebugUtilsLabelEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, sizeof(VkDebugUtilsMessengerCreateInfoEXT) },
{VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, sizeof(VkDebugUtilsMessengerCallbackDataEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT) },
{VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, sizeof(VkDeviceMemoryReportCallbackDataEXT) },
{VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, sizeof(VkImportMemoryHostPointerInfoEXT) },
{VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, sizeof(VkMemoryHostPointerPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT) },
{VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, sizeof(VkCalibratedTimestampInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, sizeof(VkPhysicalDeviceShaderCorePropertiesAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, sizeof(VkPhysicalDeviceShaderCoreProperties2AMD) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, sizeof(VkPhysicalDeviceDescriptorIndexingProperties) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT, sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport) },
{VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, sizeof(VkAttachmentDescription2) },
{VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, sizeof(VkAttachmentReference2) },
{VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, sizeof(VkSubpassDescription2) },
{VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, sizeof(VkSubpassDependency2) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, sizeof(VkRenderPassCreateInfo2) },
{VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, sizeof(VkSubpassBeginInfo) },
{VK_STRUCTURE_TYPE_SUBPASS_END_INFO, sizeof(VkSubpassEndInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, sizeof(VkPhysicalDeviceTimelineSemaphoreProperties) },
{VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, sizeof(VkSemaphoreTypeCreateInfo) },
{VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, sizeof(VkTimelineSemaphoreSubmitInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, sizeof(VkSemaphoreWaitInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, sizeof(VkSemaphoreSignalInfo) },
{VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, sizeof(VkPhysicalDevice8BitStorageFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, sizeof(VkPhysicalDeviceShaderAtomicInt64Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV, sizeof(VkQueueFamilyCheckpointPropertiesNV) },
{VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV, sizeof(VkCheckpointDataNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, sizeof(VkPhysicalDeviceDepthStencilResolveProperties) },
{VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, sizeof(VkSubpassDescriptionDepthStencilResolve) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, sizeof(VkImageViewASTCDecodeModeEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV, sizeof(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV, sizeof(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV, sizeof(VkPhysicalDeviceMemoryDecompressionFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV, sizeof(VkPhysicalDeviceMemoryDecompressionPropertiesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI, sizeof(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, sizeof(VkPhysicalDeviceMeshShaderFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, sizeof(VkPhysicalDeviceMeshShaderPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT, sizeof(VkPhysicalDeviceMeshShaderFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT, sizeof(VkPhysicalDeviceMeshShaderPropertiesEXT) },
{VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, sizeof(VkRayTracingShaderGroupCreateInfoNV) },
{VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, sizeof(VkRayTracingShaderGroupCreateInfoKHR) },
{VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, sizeof(VkRayTracingPipelineCreateInfoNV) },
{VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineCreateInfoKHR) },
{VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, sizeof(VkGeometryTrianglesNV) },
{VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV, sizeof(VkGeometryAABBNV) },
{VK_STRUCTURE_TYPE_GEOMETRY_NV, sizeof(VkGeometryNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, sizeof(VkAccelerationStructureInfoNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, sizeof(VkAccelerationStructureCreateInfoNV) },
{VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, sizeof(VkBindAccelerationStructureMemoryInfoNV) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, sizeof(VkWriteDescriptorSetAccelerationStructureKHR) },
{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, sizeof(VkWriteDescriptorSetAccelerationStructureNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, sizeof(VkAccelerationStructureMemoryRequirementsInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, sizeof(VkPhysicalDeviceRayQueryFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, sizeof(VkPhysicalDeviceRayTracingPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR, sizeof(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) },
{VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, sizeof(VkDrmFormatModifierPropertiesListEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierListCreateInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, sizeof(VkImageDrmFormatModifierPropertiesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, sizeof(VkImageStencilUsageCreateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, sizeof(VkDeviceMemoryOverallocationCreateInfoAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM, sizeof(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM, sizeof(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM) },
{VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM, sizeof(VkSubpassFragmentDensityMapOffsetEndInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures) },
{VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, sizeof(VkSurfaceProtectedCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT, sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT) },
{VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, sizeof(VkMemoryPriorityAllocateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT, sizeof(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT) },
{VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, sizeof(VkBufferDeviceAddressInfo) },
{VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, sizeof(VkBufferOpaqueCaptureAddressCreateInfo) },
{VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, sizeof(VkBufferDeviceAddressCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT) },
{VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, sizeof(VkPhysicalDeviceImagelessFramebufferFeatures) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, sizeof(VkFramebufferAttachmentsCreateInfo) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, sizeof(VkFramebufferAttachmentImageInfo) },
{VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, sizeof(VkRenderPassAttachmentBeginInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES, sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV) },
{VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, sizeof(VkCooperativeMatrixPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, sizeof(VkImageViewHandleInfoNVX) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX, sizeof(VkImageViewAddressPropertiesNVX) },
{VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO, sizeof(VkPipelineCreationFeedbackCreateInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV, sizeof(VkPhysicalDevicePresentBarrierFeaturesNV) },
{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV, sizeof(VkSurfaceCapabilitiesPresentBarrierNV) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV, sizeof(VkSwapchainPresentBarrierCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR) },
{VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, sizeof(VkPerformanceCounterKHR) },
{VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, sizeof(VkPerformanceCounterDescriptionKHR) },
{VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, sizeof(VkQueryPoolPerformanceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, sizeof(VkAcquireProfilingLockInfoKHR) },
{VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, sizeof(VkPerformanceQuerySubmitInfoKHR) },
{VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, sizeof(VkHeadlessSurfaceCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, sizeof(VkPipelineCoverageReductionStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV, sizeof(VkFramebufferMixedSamplesCombinationNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) },
{VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, sizeof(VkInitializePerformanceApiInfoINTEL) },
{VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, sizeof(VkPerformanceMarkerInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, sizeof(VkPerformanceStreamMarkerInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, sizeof(VkPerformanceOverrideInfoINTEL) },
{VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, sizeof(VkPerformanceConfigurationAcquireInfoINTEL) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) },
{VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, sizeof(VkAttachmentReferenceStencilLayout) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT, sizeof(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) },
{VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, sizeof(VkAttachmentDescriptionStencilLayout) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, sizeof(VkPipelineInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, sizeof(VkPipelineExecutablePropertiesKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, sizeof(VkPipelineExecutableInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, sizeof(VkPipelineExecutableStatisticKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, sizeof(VkPipelineExecutableInternalRepresentationKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES, sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES, sizeof(VkPhysicalDeviceTexelBufferAlignmentProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES, sizeof(VkPhysicalDeviceSubgroupSizeControlFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES, sizeof(VkPhysicalDeviceSubgroupSizeControlProperties) },
{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO, sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo) },
{VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI, sizeof(VkSubpassShadingPipelineCreateInfoHUAWEI) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI, sizeof(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI, sizeof(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI) },
{VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo) },
{VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT, sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationLineStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES, sizeof(VkPhysicalDevicePipelineCreationCacheControlFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, sizeof(VkPhysicalDeviceVulkan11Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES, sizeof(VkPhysicalDeviceVulkan11Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, sizeof(VkPhysicalDeviceVulkan12Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES, sizeof(VkPhysicalDeviceVulkan12Properties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES, sizeof(VkPhysicalDeviceVulkan13Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES, sizeof(VkPhysicalDeviceVulkan13Properties) },
{VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, sizeof(VkPipelineCompilerControlCreateInfoAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES, sizeof(VkPhysicalDeviceToolProperties) },
{VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, sizeof(VkSamplerCustomBorderColorCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT) },
{VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT, sizeof(VkSamplerBorderColorComponentMappingCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT, sizeof(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, sizeof(VkAccelerationStructureGeometryTrianglesDataKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, sizeof(VkAccelerationStructureGeometryAabbsDataKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, sizeof(VkAccelerationStructureGeometryInstancesDataKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, sizeof(VkAccelerationStructureGeometryKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, sizeof(VkAccelerationStructureBuildGeometryInfoKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, sizeof(VkAccelerationStructureCreateInfoKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, sizeof(VkAccelerationStructureDeviceAddressInfoKHR) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, sizeof(VkAccelerationStructureVersionInfoKHR) },
{VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyAccelerationStructureInfoKHR) },
{VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, sizeof(VkCopyAccelerationStructureToMemoryInfoKHR) },
{VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, sizeof(VkCopyMemoryToAccelerationStructureInfoKHR) },
{VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, sizeof(VkPipelineLibraryCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT, sizeof(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, sizeof(VkRenderPassTransformBeginInfoQCOM) },
{VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, sizeof(VkCopyCommandTransformInfoQCOM) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV) },
{VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, sizeof(VkDeviceDiagnosticsConfigCreateInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES, sizeof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR, sizeof(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT, sizeof(VkPhysicalDeviceRobustness2PropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES, sizeof(VkPhysicalDeviceImageRobustnessFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, sizeof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI, sizeof(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI, sizeof(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) },
{VK_STRUCTURE_TYPE_BUFFER_COPY_2, sizeof(VkBufferCopy2) },
{VK_STRUCTURE_TYPE_IMAGE_COPY_2, sizeof(VkImageCopy2) },
{VK_STRUCTURE_TYPE_IMAGE_BLIT_2, sizeof(VkImageBlit2) },
{VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2, sizeof(VkBufferImageCopy2) },
{VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2, sizeof(VkImageResolve2) },
{VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2, sizeof(VkCopyBufferInfo2) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2, sizeof(VkCopyImageInfo2) },
{VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2, sizeof(VkBlitImageInfo2) },
{VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2, sizeof(VkCopyBufferToImageInfo2) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2, sizeof(VkCopyImageToBufferInfo2) },
{VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2, sizeof(VkResolveImageInfo2) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) },
{VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkFragmentShadingRateAttachmentInfoKHR) },
{VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, sizeof(VkPhysicalDeviceFragmentShadingRateKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES, sizeof(VkPhysicalDeviceShaderTerminateInvocationFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV) },
{VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, sizeof(VkAccelerationStructureBuildSizesInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT, sizeof(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT, sizeof(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT, sizeof(VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT, sizeof(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) },
{VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT, sizeof(VkMutableDescriptorTypeCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthClipControlFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT, sizeof(VkPipelineViewportDepthClipControlCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, sizeof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV, sizeof(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) },
{VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, sizeof(VkVertexInputBindingDescription2EXT) },
{VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, sizeof(VkVertexInputAttributeDescription2EXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, sizeof(VkPhysicalDeviceColorWriteEnableFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, sizeof(VkPipelineColorWriteCreateInfoEXT) },
{VK_STRUCTURE_TYPE_MEMORY_BARRIER_2, sizeof(VkMemoryBarrier2) },
{VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2, sizeof(VkImageMemoryBarrier2) },
{VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2, sizeof(VkBufferMemoryBarrier2) },
{VK_STRUCTURE_TYPE_DEPENDENCY_INFO, sizeof(VkDependencyInfo) },
{VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO, sizeof(VkSemaphoreSubmitInfo) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO, sizeof(VkCommandBufferSubmitInfo) },
{VK_STRUCTURE_TYPE_SUBMIT_INFO_2, sizeof(VkSubmitInfo2) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV, sizeof(VkQueueFamilyCheckpointProperties2NV) },
{VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV, sizeof(VkCheckpointData2NV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES, sizeof(VkPhysicalDeviceSynchronization2Features) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT, sizeof(VkPhysicalDeviceHostImageCopyFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT, sizeof(VkPhysicalDeviceHostImageCopyPropertiesEXT) },
{VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT, sizeof(VkMemoryToImageCopyEXT) },
{VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT, sizeof(VkImageToMemoryCopyEXT) },
{VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT, sizeof(VkCopyMemoryToImageInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT, sizeof(VkCopyImageToMemoryInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT, sizeof(VkCopyImageToImageInfoEXT) },
{VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT, sizeof(VkHostImageLayoutTransitionInfoEXT) },
{VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT, sizeof(VkSubresourceHostMemcpySizeEXT) },
{VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT, sizeof(VkHostImageCopyDevicePerformanceQueryEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT, sizeof(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT, sizeof(VkPhysicalDeviceLegacyDitheringFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT, sizeof(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) },
{VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT, sizeof(VkSubpassResolvePerformanceQueryEXT) },
{VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT, sizeof(VkMultisampledRenderToSingleSampledInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT, sizeof(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR, sizeof(VkQueueFamilyVideoPropertiesKHR) },
{VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR, sizeof(VkQueueFamilyQueryResultStatusPropertiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR, sizeof(VkVideoProfileListInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR, sizeof(VkPhysicalDeviceVideoFormatInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR, sizeof(VkVideoFormatPropertiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR, sizeof(VkVideoProfileInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR, sizeof(VkVideoCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR, sizeof(VkVideoSessionMemoryRequirementsKHR) },
{VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR, sizeof(VkBindVideoSessionMemoryInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR, sizeof(VkVideoPictureResourceInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR, sizeof(VkVideoReferenceSlotInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR, sizeof(VkVideoDecodeCapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR, sizeof(VkVideoDecodeUsageInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, sizeof(VkVideoDecodeInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR, sizeof(VkVideoDecodeH264ProfileInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR, sizeof(VkVideoDecodeH264CapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR, sizeof(VkVideoDecodeH264SessionParametersAddInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR, sizeof(VkVideoDecodeH264SessionParametersCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR, sizeof(VkVideoDecodeH264PictureInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR, sizeof(VkVideoDecodeH264DpbSlotInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR, sizeof(VkVideoDecodeH265ProfileInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR, sizeof(VkVideoDecodeH265CapabilitiesKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR, sizeof(VkVideoDecodeH265SessionParametersAddInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR, sizeof(VkVideoDecodeH265SessionParametersCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR, sizeof(VkVideoDecodeH265PictureInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR, sizeof(VkVideoDecodeH265DpbSlotInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, sizeof(VkVideoSessionCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, sizeof(VkVideoSessionParametersCreateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, sizeof(VkVideoSessionParametersUpdateInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, sizeof(VkVideoBeginCodingInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, sizeof(VkVideoEndCodingInfoKHR) },
{VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, sizeof(VkVideoCodingControlInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, sizeof(VkPhysicalDeviceInheritedViewportScissorFeaturesNV) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, sizeof(VkCommandBufferInheritanceViewportScissorInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, sizeof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, sizeof(VkPhysicalDeviceProvokingVertexFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, sizeof(VkPhysicalDeviceProvokingVertexPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, sizeof(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT) },
{VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX, sizeof(VkCuModuleCreateInfoNVX) },
{VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX, sizeof(VkCuFunctionCreateInfoNVX) },
{VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX, sizeof(VkCuLaunchInfoNVX) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT, sizeof(VkPhysicalDeviceDescriptorBufferFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDescriptorBufferPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT, sizeof(VkDescriptorAddressInfoEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT, sizeof(VkDescriptorBufferBindingInfoEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT, sizeof(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT, sizeof(VkDescriptorGetInfoEXT) },
{VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkBufferCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkImageCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkImageViewCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkSamplerCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, sizeof(VkAccelerationStructureCaptureDescriptorDataInfoEXT) },
{VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT, sizeof(VkOpaqueCaptureDescriptorDataCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES, sizeof(VkPhysicalDeviceShaderIntegerDotProductFeatures) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES, sizeof(VkPhysicalDeviceShaderIntegerDotProductProperties) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT, sizeof(VkPhysicalDeviceDrmPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR, sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR, sizeof(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV, sizeof(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV, sizeof(VkAccelerationStructureGeometryMotionTrianglesDataNV) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV, sizeof(VkAccelerationStructureMotionInfoNV) },
{VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV, sizeof(VkMemoryGetRemoteAddressInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT, sizeof(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) },
{VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3, sizeof(VkFormatProperties3) },
{VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT, sizeof(VkDrmFormatModifierPropertiesList2EXT) },
{VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO, sizeof(VkPipelineRenderingCreateInfo) },
{VK_STRUCTURE_TYPE_RENDERING_INFO, sizeof(VkRenderingInfo) },
{VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO, sizeof(VkRenderingAttachmentInfo) },
{VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, sizeof(VkRenderingFragmentShadingRateAttachmentInfoKHR) },
{VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT, sizeof(VkRenderingFragmentDensityMapAttachmentInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES, sizeof(VkPhysicalDeviceDynamicRenderingFeatures) },
{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO, sizeof(VkCommandBufferInheritanceRenderingInfo) },
{VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD, sizeof(VkAttachmentSampleCountInfoAMD) },
{VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX, sizeof(VkMultiviewPerViewAttributesInfoNVX) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT, sizeof(VkPhysicalDeviceImageViewMinLodFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT, sizeof(VkImageViewMinLodCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT, sizeof(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV, sizeof(VkPhysicalDeviceLinearColorAttachmentFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT, sizeof(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT, sizeof(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT) },
{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT, sizeof(VkGraphicsPipelineLibraryCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE, sizeof(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE, sizeof(VkDescriptorSetBindingReferenceVALVE) },
{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE, sizeof(VkDescriptorSetLayoutHostMappingInfoVALVE) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT, sizeof(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT, sizeof(VkPipelineShaderStageModuleIdentifierCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT, sizeof(VkShaderModuleIdentifierEXT) },
{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT, sizeof(VkImageCompressionControlEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT, sizeof(VkPhysicalDeviceImageCompressionControlFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT, sizeof(VkImageCompressionPropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT, sizeof(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR, sizeof(VkImageSubresource2KHR) },
{VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR, sizeof(VkSubresourceLayout2KHR) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT, sizeof(VkRenderPassCreationControlEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT, sizeof(VkRenderPassCreationFeedbackCreateInfoEXT) },
{VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT, sizeof(VkRenderPassSubpassFeedbackCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT, sizeof(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT, sizeof(VkMicromapBuildInfoEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT, sizeof(VkMicromapCreateInfoEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT, sizeof(VkMicromapVersionInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT, sizeof(VkCopyMicromapInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT, sizeof(VkCopyMicromapToMemoryInfoEXT) },
{VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT, sizeof(VkCopyMemoryToMicromapInfoEXT) },
{VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT, sizeof(VkMicromapBuildSizesInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT, sizeof(VkPhysicalDeviceOpacityMicromapFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT, sizeof(VkPhysicalDeviceOpacityMicromapPropertiesEXT) },
{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT, sizeof(VkAccelerationStructureTrianglesOpacityMicromapEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT, sizeof(VkPipelinePropertiesIdentifierEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT, sizeof(VkPhysicalDevicePipelinePropertiesFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD, sizeof(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) },
{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT, sizeof(VkExternalMemoryAcquireUnmodifiedEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT, sizeof(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT, sizeof(VkPhysicalDevicePipelineRobustnessFeaturesEXT) },
{VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT, sizeof(VkPipelineRobustnessCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT, sizeof(VkPhysicalDevicePipelineRobustnessPropertiesEXT) },
{VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM, sizeof(VkImageViewSampleWeightCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM, sizeof(VkPhysicalDeviceImageProcessingFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM, sizeof(VkPhysicalDeviceImageProcessingPropertiesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM, sizeof(VkPhysicalDeviceTilePropertiesFeaturesQCOM) },
{VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM, sizeof(VkTilePropertiesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC, sizeof(VkPhysicalDeviceAmigoProfilingFeaturesSEC) },
{VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC, sizeof(VkAmigoProfilingSubmitInfoSEC) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT, sizeof(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT, sizeof(VkPhysicalDeviceAddressBindingReportFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT, sizeof(VkDeviceAddressBindingCallbackDataEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV, sizeof(VkPhysicalDeviceOpticalFlowFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV, sizeof(VkPhysicalDeviceOpticalFlowPropertiesNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV, sizeof(VkOpticalFlowImageFormatInfoNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV, sizeof(VkOpticalFlowImageFormatPropertiesNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV, sizeof(VkOpticalFlowSessionCreateInfoNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV, sizeof(VkOpticalFlowSessionCreatePrivateDataInfoNV) },
{VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV, sizeof(VkOpticalFlowExecuteInfoNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT, sizeof(VkPhysicalDeviceFaultFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT, sizeof(VkDeviceFaultCountsEXT) },
{VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT, sizeof(VkDeviceFaultInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT, sizeof(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) },
{VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT, sizeof(VkDepthBiasInfoEXT) },
{VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT, sizeof(VkDepthBiasRepresentationInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM, sizeof(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM, sizeof(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) },
{VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT, sizeof(VkFrameBoundaryEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT, sizeof(VkPhysicalDeviceFrameBoundaryFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT, sizeof(VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) },
{VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT, sizeof(VkSurfacePresentModeEXT) },
{VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT, sizeof(VkSurfacePresentScalingCapabilitiesEXT) },
{VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT, sizeof(VkSurfacePresentModeCompatibilityEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT, sizeof(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT, sizeof(VkSwapchainPresentFenceInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT, sizeof(VkSwapchainPresentModesCreateInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT, sizeof(VkSwapchainPresentModeInfoEXT) },
{VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT, sizeof(VkSwapchainPresentScalingCreateInfoEXT) },
{VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT, sizeof(VkReleaseSwapchainImagesInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT, sizeof(VkPhysicalDeviceDepthBiasControlFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV, sizeof(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV, sizeof(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV) },
{VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG, sizeof(VkDirectDriverLoadingInfoLUNARG) },
{VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG, sizeof(VkDirectDriverLoadingListLUNARG) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM, sizeof(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR, sizeof(VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) },
{VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR, sizeof(VkDeviceImageSubresourceInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM, sizeof(VkPhysicalDeviceShaderCorePropertiesARM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM, sizeof(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) },
{VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM, sizeof(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM) },
{VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV, sizeof(VkQueryLowLatencySupportNV) },
{VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR, sizeof(VkMemoryMapInfoKHR) },
{VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR, sizeof(VkMemoryUnmapInfoKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderObjectFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT, sizeof(VkPhysicalDeviceShaderObjectPropertiesEXT) },
{VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT, sizeof(VkShaderCreateInfoEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT, sizeof(VkPhysicalDeviceShaderTileImageFeaturesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT, sizeof(VkPhysicalDeviceShaderTileImagePropertiesEXT) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR, sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesKHR) },
{VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR, sizeof(VkCooperativeMatrixPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR, sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesKHR) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM, sizeof(VkPhysicalDeviceCubicClampFeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM, sizeof(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM) },
{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM, sizeof(VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM, sizeof(VkPhysicalDeviceCubicWeightsFeaturesQCOM) },
{VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM, sizeof(VkSamplerCubicWeightsCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM, sizeof(VkBlitImageCubicWeightsInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM, sizeof(VkPhysicalDeviceImageProcessing2FeaturesQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM, sizeof(VkPhysicalDeviceImageProcessing2PropertiesQCOM) },
{VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM, sizeof(VkSamplerBlockMatchWindowCreateInfoQCOM) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV, sizeof(VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) },
{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT, sizeof(VkPhysicalDeviceLayeredDriverPropertiesMSFT) },
};

void* memdup(const void* mem, size_t size) { 
   void* out = malloc(size);

   if(out != NULL)
       memcpy(out, mem, size);

   return out;
}


void* copyVkStruct (const void* data){
    auto curr=data;
    while (true){
        if (curr==NULL){
        return NULL;
        }
        auto structure_type=((StreamStructure*)curr)->sType;
        if (!structure_type_to_size.contains(structure_type)){
            curr=((StreamStructure*)curr)->pNext;
            continue;
        }
        
        auto struct_size=structure_type_to_size[structure_type];
        auto result=memdup(curr, struct_size);
        
        return result;
    }
    
}


    void serialize_struct(object& json, VkBaseOutStructure& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            if (member.pNext==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int kpmyioI=0; kpmyioI < 1; kpmyioI++){
            [&](){
            auto& temp=json_value[kpmyioI].emplace_object();
            return serialize_struct(temp, member.pNext[kpmyioI]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkBaseOutStructure& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pNext=NULL;
            return; }member.pNext=(VkBaseOutStructure*)malloc(1*sizeof(VkBaseOutStructure));
        auto& arr=json_value.as_array();
        for(int kpmyioI=0; kpmyioI < 1; kpmyioI++){
            [&](){
            auto& temp=json_value[kpmyioI].as_object();
            deserialize_struct(temp,member.pNext[kpmyioI]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkBaseOutStructure& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBaseOutStructure& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBaseInStructure& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            if (member.pNext==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int zewiUOi=0; zewiUOi < 1; zewiUOi++){
            [&](){
            auto& temp=json_value[zewiUOi].emplace_object();
            return serialize_struct(temp, member.pNext[zewiUOi]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkBaseInStructure& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ struct VkBaseInStructure* temp_dxnEHeC[&](){
            if (!json_value.as_array().size()==0){
                temp_dxnEHeC=NULL;
            return; }temp_dxnEHeC=(VkBaseInStructure*)malloc(1*sizeof(VkBaseInStructure));
        auto& arr=json_value.as_array();
        for(int JabJMHC=0; JabJMHC < 1; JabJMHC++){
            [&](){
            auto& temp=json_value[JabJMHC].as_object();
            deserialize_struct(temp,temp_dxnEHeC[JabJMHC]);
            }();
        }
        }();member.pNext=temp_dxnEHeC;}();
}

    void serialize_pUserData(object& json, VkBaseInStructure& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBaseInStructure& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOffset2D& member){
        
    
auto& json_value=json["x"];
[&](){json_value=member.x;}();
auto& json_value=json["y"];
[&](){json_value=member.y;}();
}
void deserialize_struct(object& json, VkOffset2D& member){
auto& json_value=json["x"];
[&](){member.x=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["y"];
[&](){member.y=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkOffset2D& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOffset2D& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOffset3D& member){
        
    
auto& json_value=json["x"];
[&](){json_value=member.x;}();
auto& json_value=json["y"];
[&](){json_value=member.y;}();
auto& json_value=json["z"];
[&](){json_value=member.z;}();
}
void deserialize_struct(object& json, VkOffset3D& member){
auto& json_value=json["x"];
[&](){member.x=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["y"];
[&](){member.y=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["z"];
[&](){member.z=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkOffset3D& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOffset3D& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExtent2D& member){
        
    
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
}
void deserialize_struct(object& json, VkExtent2D& member){
auto& json_value=json["width"];
[&](){member.width=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkExtent2D& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExtent2D& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExtent3D& member){
        
    
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
auto& json_value=json["depth"];
[&](){json_value=member.depth;}();
}
void deserialize_struct(object& json, VkExtent3D& member){
auto& json_value=json["width"];
[&](){member.width=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["depth"];
[&](){member.depth=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkExtent3D& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExtent3D& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkViewport& member){
        
    
auto& json_value=json["x"];
[&](){json_value=member.x;}();
auto& json_value=json["y"];
[&](){json_value=member.y;}();
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
auto& json_value=json["minDepth"];
[&](){json_value=member.minDepth;}();
auto& json_value=json["maxDepth"];
[&](){json_value=member.maxDepth;}();
}
void deserialize_struct(object& json, VkViewport& member){
auto& json_value=json["x"];
[&](){member.x=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["y"];
[&](){member.y=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["width"];
[&](){member.width=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["minDepth"];
[&](){member.minDepth=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxDepth"];
[&](){member.maxDepth=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkViewport& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkViewport& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRect2D& member){
        
    
auto& json_value=json["offset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.offset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
}
void deserialize_struct(object& json, VkRect2D& member){
auto& json_value=json["offset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.offset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
}

    void serialize_pUserData(object& json, VkRect2D& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRect2D& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkClearRect& member){
        
    
auto& json_value=json["rect"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.rect);
            }();
auto& json_value=json["baseArrayLayer"];
[&](){json_value=member.baseArrayLayer;}();
auto& json_value=json["layerCount"];
[&](){json_value=member.layerCount;}();
}
void deserialize_struct(object& json, VkClearRect& member){
auto& json_value=json["rect"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.rect);
            }();
auto& json_value=json["baseArrayLayer"];
[&](){member.baseArrayLayer=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layerCount"];
[&](){member.layerCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkClearRect& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkClearRect& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkComponentMapping& member){
        
    
auto& json_value=json["r"];
[&](){[&](){[&](){json_value=member.r;}();}();}();
auto& json_value=json["g"];
[&](){[&](){[&](){json_value=member.g;}();}();}();
auto& json_value=json["b"];
[&](){[&](){[&](){json_value=member.b;}();}();}();
auto& json_value=json["a"];
[&](){[&](){[&](){json_value=member.a;}();}();}();
}
void deserialize_struct(object& json, VkComponentMapping& member){
auto& json_value=json["r"];
[&](){[&](){VkComponentSwizzle temp_IkpZIya[&](){temp_IkpZIya=static_cast<int>(value_to<int>(json_value));}();member.r=(VkComponentSwizzle)temp_IkpZIya;}();}();
auto& json_value=json["g"];
[&](){[&](){VkComponentSwizzle temp_GxUkJRH[&](){temp_GxUkJRH=static_cast<int>(value_to<int>(json_value));}();member.g=(VkComponentSwizzle)temp_GxUkJRH;}();}();
auto& json_value=json["b"];
[&](){[&](){VkComponentSwizzle temp_KQoPqTk[&](){temp_KQoPqTk=static_cast<int>(value_to<int>(json_value));}();member.b=(VkComponentSwizzle)temp_KQoPqTk;}();}();
auto& json_value=json["a"];
[&](){[&](){VkComponentSwizzle temp_GQOgdVZ[&](){temp_GQOgdVZ=static_cast<int>(value_to<int>(json_value));}();member.a=(VkComponentSwizzle)temp_GQOgdVZ;}();}();
}

    void serialize_pUserData(object& json, VkComponentMapping& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkComponentMapping& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceProperties& member){
        
    
auto& json_value=json["apiVersion"];
[&](){json_value=member.apiVersion;}();
auto& json_value=json["driverVersion"];
[&](){json_value=member.driverVersion;}();
auto& json_value=json["vendorID"];
[&](){json_value=member.vendorID;}();
auto& json_value=json["deviceID"];
[&](){json_value=member.deviceID;}();
auto& json_value=json["deviceType"];
[&](){[&](){[&](){json_value=member.deviceType;}();}();}();
auto& json_value=json["deviceName"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int XalWwmc=0; XalWwmc < VK_MAX_PHYSICAL_DEVICE_NAME_SIZE; XalWwmc++){
            [&](){json_value[XalWwmc]=member.deviceName[XalWwmc];}();
        }
        }();
auto& json_value=json["pipelineCacheUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){json_value[pKnzMjr]=member.pipelineCacheUUID[pKnzMjr];}();
        }
        }();
auto& json_value=json["limits"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.limits);
            }();
auto& json_value=json["sparseProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.sparseProperties);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceProperties& member){
auto& json_value=json["apiVersion"];
[&](){member.apiVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["driverVersion"];
[&](){member.driverVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vendorID"];
[&](){member.vendorID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["deviceID"];
[&](){member.deviceID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["deviceType"];
[&](){[&](){VkPhysicalDeviceType temp_hyUnqJJ[&](){temp_hyUnqJJ=static_cast<int>(value_to<int>(json_value));}();member.deviceType=(VkPhysicalDeviceType)temp_hyUnqJJ;}();}();
auto& json_value=json["deviceName"];
[&](){
        auto& arr=json_value.as_array();
        for(int XalWwmc=0; XalWwmc < VK_MAX_PHYSICAL_DEVICE_NAME_SIZE; XalWwmc++){
            [&](){member.deviceName[XalWwmc]=static_cast<char>(value_to<int>(json_value[XalWwmc]));}();
        }
        }();
auto& json_value=json["pipelineCacheUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){member.pipelineCacheUUID[pKnzMjr]=static_cast<uint8_t>(value_to<int>(json_value[pKnzMjr]));}();
        }
        }();
auto& json_value=json["limits"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.limits);
            }();
auto& json_value=json["sparseProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.sparseProperties);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExtensionProperties& member){
        
    
auto& json_value=json["extensionName"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int XIWGMoc=0; XIWGMoc < VK_MAX_EXTENSION_NAME_SIZE; XIWGMoc++){
            [&](){json_value[XIWGMoc]=member.extensionName[XIWGMoc];}();
        }
        }();
auto& json_value=json["specVersion"];
[&](){json_value=member.specVersion;}();
}
void deserialize_struct(object& json, VkExtensionProperties& member){
auto& json_value=json["extensionName"];
[&](){
        auto& arr=json_value.as_array();
        for(int XIWGMoc=0; XIWGMoc < VK_MAX_EXTENSION_NAME_SIZE; XIWGMoc++){
            [&](){member.extensionName[XIWGMoc]=static_cast<char>(value_to<int>(json_value[XIWGMoc]));}();
        }
        }();
auto& json_value=json["specVersion"];
[&](){member.specVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkExtensionProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExtensionProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkLayerProperties& member){
        
    
auto& json_value=json["layerName"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int IKkuigH=0; IKkuigH < VK_MAX_EXTENSION_NAME_SIZE; IKkuigH++){
            [&](){json_value[IKkuigH]=member.layerName[IKkuigH];}();
        }
        }();
auto& json_value=json["specVersion"];
[&](){json_value=member.specVersion;}();
auto& json_value=json["implementationVersion"];
[&](){json_value=member.implementationVersion;}();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
}
void deserialize_struct(object& json, VkLayerProperties& member){
auto& json_value=json["layerName"];
[&](){
        auto& arr=json_value.as_array();
        for(int IKkuigH=0; IKkuigH < VK_MAX_EXTENSION_NAME_SIZE; IKkuigH++){
            [&](){member.layerName[IKkuigH]=static_cast<char>(value_to<int>(json_value[IKkuigH]));}();
        }
        }();
auto& json_value=json["specVersion"];
[&](){member.specVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["implementationVersion"];
[&](){member.implementationVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkLayerProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkLayerProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkApplicationInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pApplicationName"];
[&](){
            if (member.pApplicationName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ljeveAN=0; ljeveAN < strlen(member.pApplicationName)+1; ljeveAN++){
            [&](){json_value[ljeveAN]=member.pApplicationName[ljeveAN];}();
        }
        }();
auto& json_value=json["applicationVersion"];
[&](){json_value=member.applicationVersion;}();
auto& json_value=json["pEngineName"];
[&](){
            if (member.pEngineName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int VZCarDF=0; VZCarDF < strlen(member.pEngineName)+1; VZCarDF++){
            [&](){json_value[VZCarDF]=member.pEngineName[VZCarDF];}();
        }
        }();
auto& json_value=json["engineVersion"];
[&](){json_value=member.engineVersion;}();
auto& json_value=json["apiVersion"];
[&](){json_value=member.apiVersion;}();
}
void deserialize_struct(object& json, VkApplicationInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pApplicationName"];
[&](){ char* temp_ITGZlxN[&](){
            if (!json_value.as_array().size()==0){
                temp_ITGZlxN=NULL;
            return; }temp_ITGZlxN=(char*)malloc(temp_ITGZlxN.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int zWUmIFj=0; zWUmIFj < temp_ITGZlxN.as_array().size();; zWUmIFj++){
            [&](){temp_ITGZlxN[zWUmIFj]=static_cast<char>(value_to<int>(json_value[zWUmIFj]));}();
        }
        }();member.pApplicationName=temp_ITGZlxN;}();
auto& json_value=json["applicationVersion"];
[&](){member.applicationVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pEngineName"];
[&](){ char* temp_QLKspfD[&](){
            if (!json_value.as_array().size()==0){
                temp_QLKspfD=NULL;
            return; }temp_QLKspfD=(char*)malloc(temp_QLKspfD.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int nQADTdz=0; nQADTdz < temp_QLKspfD.as_array().size();; nQADTdz++){
            [&](){temp_QLKspfD[nQADTdz]=static_cast<char>(value_to<int>(json_value[nQADTdz]));}();
        }
        }();member.pEngineName=temp_QLKspfD;}();
auto& json_value=json["engineVersion"];
[&](){member.engineVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["apiVersion"];
[&](){member.apiVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkApplicationInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkApplicationInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAllocationCallbacks& member){
        
    
auto& json_value=json["pUserData"];
serialize_pUserData(json_value, member);
auto& json_value=json["pfnAllocation"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnAllocation);
            }();
auto& json_value=json["pfnReallocation"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnReallocation);
            }();
auto& json_value=json["pfnFree"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnFree);
            }();
auto& json_value=json["pfnInternalAllocation"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnInternalAllocation);
            }();
auto& json_value=json["pfnInternalFree"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnInternalFree);
            }();
}
void deserialize_struct(object& json, VkAllocationCallbacks& member){
auto& json_value=json["pUserData"];
deserialize_pUserData(json_value, member);
auto& json_value=json["pfnAllocation"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnAllocation);
            #endif
}();
auto& json_value=json["pfnReallocation"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnReallocation);
            #endif
}();
auto& json_value=json["pfnFree"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnFree);
            #endif
}();
auto& json_value=json["pfnInternalAllocation"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnInternalAllocation);
            #endif
}();
auto& json_value=json["pfnInternalFree"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnInternalFree);
            #endif
}();
}

    void serialize_pUserData(object& json, VkAllocationCallbacks& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
json["PFN_vkAllocationFunction"]=(uintptr_t)(member.pfnAllocation);
json["PFN_vkReallocationFunction"]=(uintptr_t)(member.pfnReallocation);
json["PFN_vkFreeFunction"]=(uintptr_t)(member.pfnFree);
json["PFN_vkInternalAllocationNotification"]=(uintptr_t)(member.pfnInternalAllocation);
json["PFN_vkInternalFreeNotification"]=(uintptr_t)(member.pfnInternalFree);
}

    void deserialize_pUserData(object& json, VkAllocationCallbacks& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();
pUserData.pfnAllocation=(PFN_vkAllocationFunction)(value_to<uintptr_t>(json["PFN_vkAllocationFunction"]));
pUserData.pfnReallocation=(PFN_vkReallocationFunction)(value_to<uintptr_t>(json["PFN_vkReallocationFunction"]));
pUserData.pfnFree=(PFN_vkFreeFunction)(value_to<uintptr_t>(json["PFN_vkFreeFunction"]));
pUserData.pfnInternalAllocation=(PFN_vkInternalAllocationNotification)(value_to<uintptr_t>(json["PFN_vkInternalAllocationNotification"]));
pUserData.pfnInternalFree=(PFN_vkInternalFreeNotification)(value_to<uintptr_t>(json["PFN_vkInternalFreeNotification"]));

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceQueueCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["queueFamilyIndex"];
[&](){json_value=member.queueFamilyIndex;}();
auto& json_value=json["queueCount"];
[&](){json_value=member.queueCount;}();
auto& json_value=json["pQueuePriorities"];
[&](){
            if (member.pQueuePriorities==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int WPvLdwr=0; WPvLdwr < member.queueCount; WPvLdwr++){
            [&](){json_value[WPvLdwr]=member.pQueuePriorities[WPvLdwr];}();
        }
        }();
}
void deserialize_struct(object& json, VkDeviceQueueCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDeviceQueueCreateFlags temp_cLvxMpp[&](){temp_cLvxMpp=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDeviceQueueCreateFlags)temp_cLvxMpp;}();}();
auto& json_value=json["queueFamilyIndex"];
[&](){member.queueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["queueCount"];
[&](){member.queueCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pQueuePriorities"];
[&](){ float* temp_JLYZEio[&](){
            if (!json_value.as_array().size()==0){
                temp_JLYZEio=NULL;
            return; }temp_JLYZEio=(float*)malloc(member.queueCount*sizeof(float));
        auto& arr=json_value.as_array();
        for(int kxeXVtw=0; kxeXVtw < member.queueCount; kxeXVtw++){
            [&](){temp_JLYZEio[kxeXVtw]=static_cast<float>(value_to<int>(json_value[kxeXVtw]));}();
        }
        }();member.pQueuePriorities=temp_JLYZEio;}();
}

    void serialize_pUserData(object& json, VkDeviceQueueCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceQueueCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["queueCreateInfoCount"];
[&](){json_value=member.queueCreateInfoCount;}();
auto& json_value=json["pQueueCreateInfos"];
[&](){
            if (member.pQueueCreateInfos==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int YssfcdP=0; YssfcdP < member.queueCreateInfoCount; YssfcdP++){
            [&](){
            auto& temp=json_value[YssfcdP].emplace_object();
            return serialize_struct(temp, member.pQueueCreateInfos[YssfcdP]);
            }();
        }
        }();
auto& json_value=json["enabledLayerCount"];
[&](){json_value=member.enabledLayerCount;}();
auto& json_value=json["ppEnabledLayerNames"];
[&](){
            if (member.ppEnabledLayerNames==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int pbCJWPr=0; pbCJWPr < member.enabledLayerCount; pbCJWPr++){
            [&](){
            if (member.ppEnabledLayerNames[pbCJWPr]==NULL){
                json_value[pbCJWPr]=array();
            return; }
        auto& arr=json_value[pbCJWPr].emplace_array();
        for(int PianVMT=0; PianVMT < strlen(member.ppEnabledLayerNames[pbCJWPr])+1; PianVMT++){
            [&](){json_value[pbCJWPr][PianVMT]=member.ppEnabledLayerNames[pbCJWPr][PianVMT];}();
        }
        }();
        }
        }();
auto& json_value=json["enabledExtensionCount"];
[&](){json_value=member.enabledExtensionCount;}();
auto& json_value=json["ppEnabledExtensionNames"];
[&](){
            if (member.ppEnabledExtensionNames==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int JSZSZLT=0; JSZSZLT < member.enabledExtensionCount; JSZSZLT++){
            [&](){
            if (member.ppEnabledExtensionNames[JSZSZLT]==NULL){
                json_value[JSZSZLT]=array();
            return; }
        auto& arr=json_value[JSZSZLT].emplace_array();
        for(int fxilxJe=0; fxilxJe < strlen(member.ppEnabledExtensionNames[JSZSZLT])+1; fxilxJe++){
            [&](){json_value[JSZSZLT][fxilxJe]=member.ppEnabledExtensionNames[JSZSZLT][fxilxJe];}();
        }
        }();
        }
        }();
auto& json_value=json["pEnabledFeatures"];
[&](){
            if (member.pEnabledFeatures==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int cHCoRqz=0; cHCoRqz < 1; cHCoRqz++){
            [&](){
            auto& temp=json_value[cHCoRqz].emplace_object();
            return serialize_struct(temp, member.pEnabledFeatures[cHCoRqz]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDeviceCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDeviceCreateFlags temp_MsgbMvH[&](){temp_MsgbMvH=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDeviceCreateFlags)temp_MsgbMvH;}();}();
auto& json_value=json["queueCreateInfoCount"];
[&](){member.queueCreateInfoCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pQueueCreateInfos"];
[&](){ VkDeviceQueueCreateInfo* temp_aRmLvba[&](){
            if (!json_value.as_array().size()==0){
                temp_aRmLvba=NULL;
            return; }temp_aRmLvba=(VkDeviceQueueCreateInfo*)malloc(member.queueCreateInfoCount*sizeof(VkDeviceQueueCreateInfo));
        auto& arr=json_value.as_array();
        for(int xSivxym=0; xSivxym < member.queueCreateInfoCount; xSivxym++){
            [&](){
            auto& temp=json_value[xSivxym].as_object();
            deserialize_struct(temp,temp_aRmLvba[xSivxym]);
            }();
        }
        }();member.pQueueCreateInfos=temp_aRmLvba;}();
auto& json_value=json["enabledLayerCount"];
[&](){member.enabledLayerCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["ppEnabledLayerNames"];
[&](){ char* * temp_eSKBPEc[&](){
            if (!json_value.as_array().size()==0){
                temp_eSKBPEc=NULL;
            return; }temp_eSKBPEc=(char**)malloc(member.enabledLayerCount*sizeof(char*));
        auto& arr=json_value.as_array();
        for(int SnzIzcs=0; SnzIzcs < member.enabledLayerCount; SnzIzcs++){
            [&](){
            if (!json_value[SnzIzcs].as_array().size()==0){
                temp_eSKBPEc[SnzIzcs]=NULL;
            return; }temp_eSKBPEc[SnzIzcs]=(char*)malloc(temp_eSKBPEc[SnzIzcs].as_array().size();*sizeof(char));
        auto& arr=json_value[SnzIzcs].as_array();
        for(int zFkqpdm=0; zFkqpdm < temp_eSKBPEc[SnzIzcs].as_array().size();; zFkqpdm++){
            [&](){temp_eSKBPEc[SnzIzcs][zFkqpdm]=static_cast<char>(value_to<int>(json_value[SnzIzcs][zFkqpdm]));}();
        }
        }();
        }
        }();member.ppEnabledLayerNames=temp_eSKBPEc;}();
auto& json_value=json["enabledExtensionCount"];
[&](){member.enabledExtensionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["ppEnabledExtensionNames"];
[&](){ char* * temp_WkuuHVd[&](){
            if (!json_value.as_array().size()==0){
                temp_WkuuHVd=NULL;
            return; }temp_WkuuHVd=(char**)malloc(member.enabledExtensionCount*sizeof(char*));
        auto& arr=json_value.as_array();
        for(int aUXPvjC=0; aUXPvjC < member.enabledExtensionCount; aUXPvjC++){
            [&](){
            if (!json_value[aUXPvjC].as_array().size()==0){
                temp_WkuuHVd[aUXPvjC]=NULL;
            return; }temp_WkuuHVd[aUXPvjC]=(char*)malloc(temp_WkuuHVd[aUXPvjC].as_array().size();*sizeof(char));
        auto& arr=json_value[aUXPvjC].as_array();
        for(int SDeGYag=0; SDeGYag < temp_WkuuHVd[aUXPvjC].as_array().size();; SDeGYag++){
            [&](){temp_WkuuHVd[aUXPvjC][SDeGYag]=static_cast<char>(value_to<int>(json_value[aUXPvjC][SDeGYag]));}();
        }
        }();
        }
        }();member.ppEnabledExtensionNames=temp_WkuuHVd;}();
auto& json_value=json["pEnabledFeatures"];
[&](){ VkPhysicalDeviceFeatures* temp_vaqmebP[&](){
            if (!json_value.as_array().size()==0){
                temp_vaqmebP=NULL;
            return; }temp_vaqmebP=(VkPhysicalDeviceFeatures*)malloc(1*sizeof(VkPhysicalDeviceFeatures));
        auto& arr=json_value.as_array();
        for(int XDDQdol=0; XDDQdol < 1; XDDQdol++){
            [&](){
            auto& temp=json_value[XDDQdol].as_object();
            deserialize_struct(temp,temp_vaqmebP[XDDQdol]);
            }();
        }
        }();member.pEnabledFeatures=temp_vaqmebP;}();
}

    void serialize_pUserData(object& json, VkDeviceCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkInstanceCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pApplicationInfo"];
[&](){
            if (member.pApplicationInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KcjBZRF=0; KcjBZRF < 1; KcjBZRF++){
            [&](){
            auto& temp=json_value[KcjBZRF].emplace_object();
            return serialize_struct(temp, member.pApplicationInfo[KcjBZRF]);
            }();
        }
        }();
auto& json_value=json["enabledLayerCount"];
[&](){json_value=member.enabledLayerCount;}();
auto& json_value=json["ppEnabledLayerNames"];
[&](){
            if (member.ppEnabledLayerNames==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int pbCJWPr=0; pbCJWPr < member.enabledLayerCount; pbCJWPr++){
            [&](){
            if (member.ppEnabledLayerNames[pbCJWPr]==NULL){
                json_value[pbCJWPr]=array();
            return; }
        auto& arr=json_value[pbCJWPr].emplace_array();
        for(int PianVMT=0; PianVMT < strlen(member.ppEnabledLayerNames[pbCJWPr])+1; PianVMT++){
            [&](){json_value[pbCJWPr][PianVMT]=member.ppEnabledLayerNames[pbCJWPr][PianVMT];}();
        }
        }();
        }
        }();
auto& json_value=json["enabledExtensionCount"];
[&](){json_value=member.enabledExtensionCount;}();
auto& json_value=json["ppEnabledExtensionNames"];
[&](){
            if (member.ppEnabledExtensionNames==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int JSZSZLT=0; JSZSZLT < member.enabledExtensionCount; JSZSZLT++){
            [&](){
            if (member.ppEnabledExtensionNames[JSZSZLT]==NULL){
                json_value[JSZSZLT]=array();
            return; }
        auto& arr=json_value[JSZSZLT].emplace_array();
        for(int fxilxJe=0; fxilxJe < strlen(member.ppEnabledExtensionNames[JSZSZLT])+1; fxilxJe++){
            [&](){json_value[JSZSZLT][fxilxJe]=member.ppEnabledExtensionNames[JSZSZLT][fxilxJe];}();
        }
        }();
        }
        }();
}
void deserialize_struct(object& json, VkInstanceCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkInstanceCreateFlags temp_AraZgfy[&](){temp_AraZgfy=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkInstanceCreateFlags)temp_AraZgfy;}();}();
auto& json_value=json["pApplicationInfo"];
[&](){ VkApplicationInfo* temp_szpthba[&](){
            if (!json_value.as_array().size()==0){
                temp_szpthba=NULL;
            return; }temp_szpthba=(VkApplicationInfo*)malloc(1*sizeof(VkApplicationInfo));
        auto& arr=json_value.as_array();
        for(int ihjOJvT=0; ihjOJvT < 1; ihjOJvT++){
            [&](){
            auto& temp=json_value[ihjOJvT].as_object();
            deserialize_struct(temp,temp_szpthba[ihjOJvT]);
            }();
        }
        }();member.pApplicationInfo=temp_szpthba;}();
auto& json_value=json["enabledLayerCount"];
[&](){member.enabledLayerCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["ppEnabledLayerNames"];
[&](){ char* * temp_eSKBPEc[&](){
            if (!json_value.as_array().size()==0){
                temp_eSKBPEc=NULL;
            return; }temp_eSKBPEc=(char**)malloc(member.enabledLayerCount*sizeof(char*));
        auto& arr=json_value.as_array();
        for(int SnzIzcs=0; SnzIzcs < member.enabledLayerCount; SnzIzcs++){
            [&](){
            if (!json_value[SnzIzcs].as_array().size()==0){
                temp_eSKBPEc[SnzIzcs]=NULL;
            return; }temp_eSKBPEc[SnzIzcs]=(char*)malloc(temp_eSKBPEc[SnzIzcs].as_array().size();*sizeof(char));
        auto& arr=json_value[SnzIzcs].as_array();
        for(int zFkqpdm=0; zFkqpdm < temp_eSKBPEc[SnzIzcs].as_array().size();; zFkqpdm++){
            [&](){temp_eSKBPEc[SnzIzcs][zFkqpdm]=static_cast<char>(value_to<int>(json_value[SnzIzcs][zFkqpdm]));}();
        }
        }();
        }
        }();member.ppEnabledLayerNames=temp_eSKBPEc;}();
auto& json_value=json["enabledExtensionCount"];
[&](){member.enabledExtensionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["ppEnabledExtensionNames"];
[&](){ char* * temp_WkuuHVd[&](){
            if (!json_value.as_array().size()==0){
                temp_WkuuHVd=NULL;
            return; }temp_WkuuHVd=(char**)malloc(member.enabledExtensionCount*sizeof(char*));
        auto& arr=json_value.as_array();
        for(int aUXPvjC=0; aUXPvjC < member.enabledExtensionCount; aUXPvjC++){
            [&](){
            if (!json_value[aUXPvjC].as_array().size()==0){
                temp_WkuuHVd[aUXPvjC]=NULL;
            return; }temp_WkuuHVd[aUXPvjC]=(char*)malloc(temp_WkuuHVd[aUXPvjC].as_array().size();*sizeof(char));
        auto& arr=json_value[aUXPvjC].as_array();
        for(int SDeGYag=0; SDeGYag < temp_WkuuHVd[aUXPvjC].as_array().size();; SDeGYag++){
            [&](){temp_WkuuHVd[aUXPvjC][SDeGYag]=static_cast<char>(value_to<int>(json_value[aUXPvjC][SDeGYag]));}();
        }
        }();
        }
        }();member.ppEnabledExtensionNames=temp_WkuuHVd;}();
}

    void serialize_pUserData(object& json, VkInstanceCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkInstanceCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueueFamilyProperties& member){
        
    
auto& json_value=json["queueFlags"];
[&](){[&](){[&](){json_value=member.queueFlags;}();}();}();
auto& json_value=json["queueCount"];
[&](){json_value=member.queueCount;}();
auto& json_value=json["timestampValidBits"];
[&](){json_value=member.timestampValidBits;}();
auto& json_value=json["minImageTransferGranularity"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minImageTransferGranularity);
            }();
}
void deserialize_struct(object& json, VkQueueFamilyProperties& member){
auto& json_value=json["queueFlags"];
[&](){[&](){VkQueueFlags temp_tkpRfFc[&](){temp_tkpRfFc=static_cast<int>(value_to<int>(json_value));}();member.queueFlags=(VkQueueFlags)temp_tkpRfFc;}();}();
auto& json_value=json["queueCount"];
[&](){member.queueCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["timestampValidBits"];
[&](){member.timestampValidBits=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minImageTransferGranularity"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minImageTransferGranularity);
            }();
}

    void serialize_pUserData(object& json, VkQueueFamilyProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueueFamilyProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMemoryProperties& member){
        
    
auto& json_value=json["memoryTypeCount"];
[&](){json_value=member.memoryTypeCount;}();
auto& json_value=json["memoryTypes"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int PfmqQVb=0; PfmqQVb < VK_MAX_MEMORY_TYPES; PfmqQVb++){
            [&](){
            auto& temp=json_value[PfmqQVb].emplace_object();
            return serialize_struct(temp, member.memoryTypes[PfmqQVb]);
            }();
        }
        }();
auto& json_value=json["memoryHeapCount"];
[&](){json_value=member.memoryHeapCount;}();
auto& json_value=json["memoryHeaps"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int HzUoGww=0; HzUoGww < VK_MAX_MEMORY_HEAPS; HzUoGww++){
            [&](){
            auto& temp=json_value[HzUoGww].emplace_object();
            return serialize_struct(temp, member.memoryHeaps[HzUoGww]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPhysicalDeviceMemoryProperties& member){
auto& json_value=json["memoryTypeCount"];
[&](){member.memoryTypeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["memoryTypes"];
[&](){
        auto& arr=json_value.as_array();
        for(int PfmqQVb=0; PfmqQVb < VK_MAX_MEMORY_TYPES; PfmqQVb++){
            [&](){
            auto& temp=json_value[PfmqQVb].as_object();
            deserialize_struct(temp,member.memoryTypes[PfmqQVb]);
            }();
        }
        }();
auto& json_value=json["memoryHeapCount"];
[&](){member.memoryHeapCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["memoryHeaps"];
[&](){
        auto& arr=json_value.as_array();
        for(int HzUoGww=0; HzUoGww < VK_MAX_MEMORY_HEAPS; HzUoGww++){
            [&](){
            auto& temp=json_value[HzUoGww].as_object();
            deserialize_struct(temp,member.memoryHeaps[HzUoGww]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMemoryProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMemoryProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryAllocateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["allocationSize"];
[&](){[&](){json_value=member.allocationSize;}();}();
auto& json_value=json["memoryTypeIndex"];
[&](){json_value=member.memoryTypeIndex;}();
}
void deserialize_struct(object& json, VkMemoryAllocateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["allocationSize"];
[&](){[&](){member.allocationSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["memoryTypeIndex"];
[&](){member.memoryTypeIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryAllocateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryAllocateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryRequirements& member){
        
    
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["alignment"];
[&](){[&](){json_value=member.alignment;}();}();
auto& json_value=json["memoryTypeBits"];
[&](){json_value=member.memoryTypeBits;}();
}
void deserialize_struct(object& json, VkMemoryRequirements& member){
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["alignment"];
[&](){[&](){member.alignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["memoryTypeBits"];
[&](){member.memoryTypeBits=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryRequirements& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryRequirements& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseImageFormatProperties& member){
        
    
auto& json_value=json["aspectMask"];
[&](){[&](){[&](){json_value=member.aspectMask;}();}();}();
auto& json_value=json["imageGranularity"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageGranularity);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkSparseImageFormatProperties& member){
auto& json_value=json["aspectMask"];
[&](){[&](){VkImageAspectFlags temp_JsnReia[&](){temp_JsnReia=static_cast<int>(value_to<int>(json_value));}();member.aspectMask=(VkImageAspectFlags)temp_JsnReia;}();}();
auto& json_value=json["imageGranularity"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageGranularity);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkSparseImageFormatFlags temp_jwJZkuC[&](){temp_jwJZkuC=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSparseImageFormatFlags)temp_jwJZkuC;}();}();
}

    void serialize_pUserData(object& json, VkSparseImageFormatProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseImageFormatProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseImageMemoryRequirements& member){
        
    
auto& json_value=json["formatProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.formatProperties);
            }();
auto& json_value=json["imageMipTailFirstLod"];
[&](){json_value=member.imageMipTailFirstLod;}();
auto& json_value=json["imageMipTailSize"];
[&](){[&](){json_value=member.imageMipTailSize;}();}();
auto& json_value=json["imageMipTailOffset"];
[&](){[&](){json_value=member.imageMipTailOffset;}();}();
auto& json_value=json["imageMipTailStride"];
[&](){[&](){json_value=member.imageMipTailStride;}();}();
}
void deserialize_struct(object& json, VkSparseImageMemoryRequirements& member){
auto& json_value=json["formatProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.formatProperties);
            }();
auto& json_value=json["imageMipTailFirstLod"];
[&](){member.imageMipTailFirstLod=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageMipTailSize"];
[&](){[&](){member.imageMipTailSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["imageMipTailOffset"];
[&](){[&](){member.imageMipTailOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["imageMipTailStride"];
[&](){[&](){member.imageMipTailStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSparseImageMemoryRequirements& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseImageMemoryRequirements& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryType& member){
        
    
auto& json_value=json["propertyFlags"];
[&](){[&](){[&](){json_value=member.propertyFlags;}();}();}();
auto& json_value=json["heapIndex"];
[&](){json_value=member.heapIndex;}();
}
void deserialize_struct(object& json, VkMemoryType& member){
auto& json_value=json["propertyFlags"];
[&](){[&](){VkMemoryPropertyFlags temp_znBcfiM[&](){temp_znBcfiM=static_cast<int>(value_to<int>(json_value));}();member.propertyFlags=(VkMemoryPropertyFlags)temp_znBcfiM;}();}();
auto& json_value=json["heapIndex"];
[&](){member.heapIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryType& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryType& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryHeap& member){
        
    
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkMemoryHeap& member){
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["flags"];
[&](){[&](){VkMemoryHeapFlags temp_iLjOCGt[&](){temp_iLjOCGt=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkMemoryHeapFlags)temp_iLjOCGt;}();}();
}

    void serialize_pUserData(object& json, VkMemoryHeap& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryHeap& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMappedMemoryRange& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkMappedMemoryRange& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkMappedMemoryRange& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMappedMemoryRange& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFormatProperties& member){
        
    
auto& json_value=json["linearTilingFeatures"];
[&](){[&](){[&](){json_value=member.linearTilingFeatures;}();}();}();
auto& json_value=json["optimalTilingFeatures"];
[&](){[&](){[&](){json_value=member.optimalTilingFeatures;}();}();}();
auto& json_value=json["bufferFeatures"];
[&](){[&](){[&](){json_value=member.bufferFeatures;}();}();}();
}
void deserialize_struct(object& json, VkFormatProperties& member){
auto& json_value=json["linearTilingFeatures"];
[&](){[&](){VkFormatFeatureFlags temp_StjAFci[&](){temp_StjAFci=static_cast<int>(value_to<int>(json_value));}();member.linearTilingFeatures=(VkFormatFeatureFlags)temp_StjAFci;}();}();
auto& json_value=json["optimalTilingFeatures"];
[&](){[&](){VkFormatFeatureFlags temp_WSWrGhS[&](){temp_WSWrGhS=static_cast<int>(value_to<int>(json_value));}();member.optimalTilingFeatures=(VkFormatFeatureFlags)temp_WSWrGhS;}();}();
auto& json_value=json["bufferFeatures"];
[&](){[&](){VkFormatFeatureFlags temp_vUKMMrQ[&](){temp_vUKMMrQ=static_cast<int>(value_to<int>(json_value));}();member.bufferFeatures=(VkFormatFeatureFlags)temp_vUKMMrQ;}();}();
}

    void serialize_pUserData(object& json, VkFormatProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFormatProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageFormatProperties& member){
        
    
auto& json_value=json["maxExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxExtent);
            }();
auto& json_value=json["maxMipLevels"];
[&](){json_value=member.maxMipLevels;}();
auto& json_value=json["maxArrayLayers"];
[&](){json_value=member.maxArrayLayers;}();
auto& json_value=json["sampleCounts"];
[&](){[&](){[&](){json_value=member.sampleCounts;}();}();}();
auto& json_value=json["maxResourceSize"];
[&](){[&](){json_value=member.maxResourceSize;}();}();
}
void deserialize_struct(object& json, VkImageFormatProperties& member){
auto& json_value=json["maxExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxExtent);
            }();
auto& json_value=json["maxMipLevels"];
[&](){member.maxMipLevels=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxArrayLayers"];
[&](){member.maxArrayLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sampleCounts"];
[&](){[&](){VkSampleCountFlags temp_NdjRKKA[&](){temp_NdjRKKA=static_cast<int>(value_to<int>(json_value));}();member.sampleCounts=(VkSampleCountFlags)temp_NdjRKKA;}();}();
auto& json_value=json["maxResourceSize"];
[&](){[&](){member.maxResourceSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkImageFormatProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageFormatProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorBufferInfo& member){
        
    
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["range"];
[&](){[&](){json_value=member.range;}();}();
}
void deserialize_struct(object& json, VkDescriptorBufferInfo& member){
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["range"];
[&](){[&](){member.range=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDescriptorBufferInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorBufferInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorImageInfo& member){
        
    
auto& json_value=json["sampler"];
[&](){serialize_handle(json_value,member.sampler);}();
auto& json_value=json["imageView"];
[&](){serialize_handle(json_value,member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){[&](){json_value=member.imageLayout;}();}();}();
}
void deserialize_struct(object& json, VkDescriptorImageInfo& member){
auto& json_value=json["sampler"];
[&](){deserialize_handle(json_value, member.sampler);}();
auto& json_value=json["imageView"];
[&](){deserialize_handle(json_value, member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){VkImageLayout temp_UMdMFdm[&](){temp_UMdMFdm=static_cast<int>(value_to<int>(json_value));}();member.imageLayout=(VkImageLayout)temp_UMdMFdm;}();}();
}

    void serialize_pUserData(object& json, VkDescriptorImageInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorImageInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkWriteDescriptorSet& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dstSet"];
[&](){serialize_handle(json_value,member.dstSet);}();
auto& json_value=json["dstBinding"];
[&](){json_value=member.dstBinding;}();
auto& json_value=json["dstArrayElement"];
[&](){json_value=member.dstArrayElement;}();
auto& json_value=json["descriptorCount"];
[&](){json_value=member.descriptorCount;}();
auto& json_value=json["descriptorType"];
[&](){[&](){[&](){json_value=member.descriptorType;}();}();}();
auto& json_value=json["pImageInfo"];
[&](){
            if (member.pImageInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RAArEkL=0; RAArEkL < member.descriptorCount; RAArEkL++){
            [&](){
            auto& temp=json_value[RAArEkL].emplace_object();
            return serialize_struct(temp, member.pImageInfo[RAArEkL]);
            }();
        }
        }();
auto& json_value=json["pBufferInfo"];
[&](){
            if (member.pBufferInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wdqHwXo=0; wdqHwXo < member.descriptorCount; wdqHwXo++){
            [&](){
            auto& temp=json_value[wdqHwXo].emplace_object();
            return serialize_struct(temp, member.pBufferInfo[wdqHwXo]);
            }();
        }
        }();
auto& json_value=json["pTexelBufferView"];
[&](){
            if (member.pTexelBufferView==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int eTpfpkN=0; eTpfpkN < member.descriptorCount; eTpfpkN++){
            [&](){serialize_handle(json_value[eTpfpkN],member.pTexelBufferView[eTpfpkN]);}();
        }
        }();
}
void deserialize_struct(object& json, VkWriteDescriptorSet& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["dstSet"];
[&](){deserialize_handle(json_value, member.dstSet);}();
auto& json_value=json["dstBinding"];
[&](){member.dstBinding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstArrayElement"];
[&](){member.dstArrayElement=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["descriptorCount"];
[&](){member.descriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["descriptorType"];
[&](){[&](){VkDescriptorType temp_xewOskh[&](){temp_xewOskh=static_cast<int>(value_to<int>(json_value));}();member.descriptorType=(VkDescriptorType)temp_xewOskh;}();}();
auto& json_value=json["pImageInfo"];
[&](){ VkDescriptorImageInfo* temp_VlxQmAS[&](){
            if (!json_value.as_array().size()==0){
                temp_VlxQmAS=NULL;
            return; }temp_VlxQmAS=(VkDescriptorImageInfo*)malloc(member.descriptorCount*sizeof(VkDescriptorImageInfo));
        auto& arr=json_value.as_array();
        for(int sQwJhaj=0; sQwJhaj < member.descriptorCount; sQwJhaj++){
            [&](){
            auto& temp=json_value[sQwJhaj].as_object();
            deserialize_struct(temp,temp_VlxQmAS[sQwJhaj]);
            }();
        }
        }();member.pImageInfo=temp_VlxQmAS;}();
auto& json_value=json["pBufferInfo"];
[&](){ VkDescriptorBufferInfo* temp_cKSgqZu[&](){
            if (!json_value.as_array().size()==0){
                temp_cKSgqZu=NULL;
            return; }temp_cKSgqZu=(VkDescriptorBufferInfo*)malloc(member.descriptorCount*sizeof(VkDescriptorBufferInfo));
        auto& arr=json_value.as_array();
        for(int LhnoBjF=0; LhnoBjF < member.descriptorCount; LhnoBjF++){
            [&](){
            auto& temp=json_value[LhnoBjF].as_object();
            deserialize_struct(temp,temp_cKSgqZu[LhnoBjF]);
            }();
        }
        }();member.pBufferInfo=temp_cKSgqZu;}();
auto& json_value=json["pTexelBufferView"];
[&](){ VkBufferView* temp_vGwTgIz[&](){
            if (!json_value.as_array().size()==0){
                temp_vGwTgIz=NULL;
            return; }temp_vGwTgIz=(VkBufferView*)malloc(member.descriptorCount*sizeof(VkBufferView));
        auto& arr=json_value.as_array();
        for(int WHRJRXx=0; WHRJRXx < member.descriptorCount; WHRJRXx++){
            [&](){deserialize_handle(json_value[WHRJRXx], temp_vGwTgIz[WHRJRXx]);}();
        }
        }();member.pTexelBufferView=temp_vGwTgIz;}();
}

    void serialize_pUserData(object& json, VkWriteDescriptorSet& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkWriteDescriptorSet& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyDescriptorSet& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcSet"];
[&](){serialize_handle(json_value,member.srcSet);}();
auto& json_value=json["srcBinding"];
[&](){json_value=member.srcBinding;}();
auto& json_value=json["srcArrayElement"];
[&](){json_value=member.srcArrayElement;}();
auto& json_value=json["dstSet"];
[&](){serialize_handle(json_value,member.dstSet);}();
auto& json_value=json["dstBinding"];
[&](){json_value=member.dstBinding;}();
auto& json_value=json["dstArrayElement"];
[&](){json_value=member.dstArrayElement;}();
auto& json_value=json["descriptorCount"];
[&](){json_value=member.descriptorCount;}();
}
void deserialize_struct(object& json, VkCopyDescriptorSet& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcSet"];
[&](){deserialize_handle(json_value, member.srcSet);}();
auto& json_value=json["srcBinding"];
[&](){member.srcBinding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["srcArrayElement"];
[&](){member.srcArrayElement=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstSet"];
[&](){deserialize_handle(json_value, member.dstSet);}();
auto& json_value=json["dstBinding"];
[&](){member.dstBinding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstArrayElement"];
[&](){member.dstArrayElement=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["descriptorCount"];
[&](){member.descriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkCopyDescriptorSet& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyDescriptorSet& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferUsageFlags2CreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
}
void deserialize_struct(object& json, VkBufferUsageFlags2CreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["usage"];
[&](){[&](){VkBufferUsageFlags2KHR temp_ErUACUn[&](){temp_ErUACUn=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkBufferUsageFlags2KHR)temp_ErUACUn;}();}();
}

    void serialize_pUserData(object& json, VkBufferUsageFlags2CreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferUsageFlags2CreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
auto& json_value=json["sharingMode"];
[&](){[&](){[&](){json_value=member.sharingMode;}();}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){json_value=member.queueFamilyIndexCount;}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){
            if (member.pQueueFamilyIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){json_value[rqZQqua]=member.pQueueFamilyIndices[rqZQqua];}();
        }
        }();
}
void deserialize_struct(object& json, VkBufferCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkBufferCreateFlags temp_SvLLkek[&](){temp_SvLLkek=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkBufferCreateFlags)temp_SvLLkek;}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["usage"];
[&](){[&](){VkBufferUsageFlags temp_AJXZWOt[&](){temp_AJXZWOt=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkBufferUsageFlags)temp_AJXZWOt;}();}();
auto& json_value=json["sharingMode"];
[&](){[&](){VkSharingMode temp_EIYFEAs[&](){temp_EIYFEAs=static_cast<int>(value_to<int>(json_value));}();member.sharingMode=(VkSharingMode)temp_EIYFEAs;}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){member.queueFamilyIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){ uint32_t* temp_uPDeaNU[&](){
            if (!json_value.as_array().size()==0){
                temp_uPDeaNU=NULL;
            return; }temp_uPDeaNU=(uint32_t*)malloc(member.queueFamilyIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int JEqKTnG=0; JEqKTnG < member.queueFamilyIndexCount; JEqKTnG++){
            [&](){temp_uPDeaNU[JEqKTnG]=static_cast<uint32_t>(value_to<int>(json_value[JEqKTnG]));}();
        }
        }();member.pQueueFamilyIndices=temp_uPDeaNU;}();
}

    void serialize_pUserData(object& json, VkBufferCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferViewCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["range"];
[&](){[&](){json_value=member.range;}();}();
}
void deserialize_struct(object& json, VkBufferViewCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkBufferViewCreateFlags temp_ZyKzhDe[&](){temp_ZyKzhDe=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkBufferViewCreateFlags)temp_ZyKzhDe;}();}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["range"];
[&](){[&](){member.range=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBufferViewCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferViewCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageSubresource& member){
        
    
auto& json_value=json["aspectMask"];
[&](){[&](){[&](){json_value=member.aspectMask;}();}();}();
auto& json_value=json["mipLevel"];
[&](){json_value=member.mipLevel;}();
auto& json_value=json["arrayLayer"];
[&](){json_value=member.arrayLayer;}();
}
void deserialize_struct(object& json, VkImageSubresource& member){
auto& json_value=json["aspectMask"];
[&](){[&](){VkImageAspectFlags temp_JsnReia[&](){temp_JsnReia=static_cast<int>(value_to<int>(json_value));}();member.aspectMask=(VkImageAspectFlags)temp_JsnReia;}();}();
auto& json_value=json["mipLevel"];
[&](){member.mipLevel=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["arrayLayer"];
[&](){member.arrayLayer=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImageSubresource& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageSubresource& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageSubresourceLayers& member){
        
    
auto& json_value=json["aspectMask"];
[&](){[&](){[&](){json_value=member.aspectMask;}();}();}();
auto& json_value=json["mipLevel"];
[&](){json_value=member.mipLevel;}();
auto& json_value=json["baseArrayLayer"];
[&](){json_value=member.baseArrayLayer;}();
auto& json_value=json["layerCount"];
[&](){json_value=member.layerCount;}();
}
void deserialize_struct(object& json, VkImageSubresourceLayers& member){
auto& json_value=json["aspectMask"];
[&](){[&](){VkImageAspectFlags temp_JsnReia[&](){temp_JsnReia=static_cast<int>(value_to<int>(json_value));}();member.aspectMask=(VkImageAspectFlags)temp_JsnReia;}();}();
auto& json_value=json["mipLevel"];
[&](){member.mipLevel=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["baseArrayLayer"];
[&](){member.baseArrayLayer=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layerCount"];
[&](){member.layerCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImageSubresourceLayers& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageSubresourceLayers& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageSubresourceRange& member){
        
    
auto& json_value=json["aspectMask"];
[&](){[&](){[&](){json_value=member.aspectMask;}();}();}();
auto& json_value=json["baseMipLevel"];
[&](){json_value=member.baseMipLevel;}();
auto& json_value=json["levelCount"];
[&](){json_value=member.levelCount;}();
auto& json_value=json["baseArrayLayer"];
[&](){json_value=member.baseArrayLayer;}();
auto& json_value=json["layerCount"];
[&](){json_value=member.layerCount;}();
}
void deserialize_struct(object& json, VkImageSubresourceRange& member){
auto& json_value=json["aspectMask"];
[&](){[&](){VkImageAspectFlags temp_JsnReia[&](){temp_JsnReia=static_cast<int>(value_to<int>(json_value));}();member.aspectMask=(VkImageAspectFlags)temp_JsnReia;}();}();
auto& json_value=json["baseMipLevel"];
[&](){member.baseMipLevel=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["levelCount"];
[&](){member.levelCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["baseArrayLayer"];
[&](){member.baseArrayLayer=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layerCount"];
[&](){member.layerCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImageSubresourceRange& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageSubresourceRange& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryBarrier& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
}
void deserialize_struct(object& json, VkMemoryBarrier& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags temp_iFaYQjj[&](){temp_iFaYQjj=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags)temp_iFaYQjj;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags temp_miAPAJe[&](){temp_miAPAJe=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags)temp_miAPAJe;}();}();
}

    void serialize_pUserData(object& json, VkMemoryBarrier& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryBarrier& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferMemoryBarrier& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){json_value=member.srcQueueFamilyIndex;}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){json_value=member.dstQueueFamilyIndex;}();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkBufferMemoryBarrier& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags temp_iFaYQjj[&](){temp_iFaYQjj=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags)temp_iFaYQjj;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags temp_miAPAJe[&](){temp_miAPAJe=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags)temp_miAPAJe;}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){member.srcQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){member.dstQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBufferMemoryBarrier& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferMemoryBarrier& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageMemoryBarrier& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
auto& json_value=json["oldLayout"];
[&](){[&](){[&](){json_value=member.oldLayout;}();}();}();
auto& json_value=json["newLayout"];
[&](){[&](){[&](){json_value=member.newLayout;}();}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){json_value=member.srcQueueFamilyIndex;}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){json_value=member.dstQueueFamilyIndex;}();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.subresourceRange);
            }();
}
void deserialize_struct(object& json, VkImageMemoryBarrier& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags temp_iFaYQjj[&](){temp_iFaYQjj=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags)temp_iFaYQjj;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags temp_miAPAJe[&](){temp_miAPAJe=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags)temp_miAPAJe;}();}();
auto& json_value=json["oldLayout"];
[&](){[&](){VkImageLayout temp_IGNsBlw[&](){temp_IGNsBlw=static_cast<int>(value_to<int>(json_value));}();member.oldLayout=(VkImageLayout)temp_IGNsBlw;}();}();
auto& json_value=json["newLayout"];
[&](){[&](){VkImageLayout temp_MiDuiqN[&](){temp_MiDuiqN=static_cast<int>(value_to<int>(json_value));}();member.newLayout=(VkImageLayout)temp_MiDuiqN;}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){member.srcQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){member.dstQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.subresourceRange);
            }();
}

    void serialize_pUserData(object& json, VkImageMemoryBarrier& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageMemoryBarrier& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["imageType"];
[&](){[&](){[&](){json_value=member.imageType;}();}();}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
auto& json_value=json["mipLevels"];
[&](){json_value=member.mipLevels;}();
auto& json_value=json["arrayLayers"];
[&](){json_value=member.arrayLayers;}();
auto& json_value=json["samples"];
[&](){[&](){[&](){json_value=member.samples;}();}();}();
auto& json_value=json["tiling"];
[&](){[&](){[&](){json_value=member.tiling;}();}();}();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
auto& json_value=json["sharingMode"];
[&](){[&](){[&](){json_value=member.sharingMode;}();}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){json_value=member.queueFamilyIndexCount;}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){
            if (member.pQueueFamilyIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){json_value[rqZQqua]=member.pQueueFamilyIndices[rqZQqua];}();
        }
        }();
auto& json_value=json["initialLayout"];
[&](){[&](){[&](){json_value=member.initialLayout;}();}();}();
}
void deserialize_struct(object& json, VkImageCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkImageCreateFlags temp_IdOZaju[&](){temp_IdOZaju=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkImageCreateFlags)temp_IdOZaju;}();}();
auto& json_value=json["imageType"];
[&](){[&](){VkImageType temp_ZiBhoWZ[&](){temp_ZiBhoWZ=static_cast<int>(value_to<int>(json_value));}();member.imageType=(VkImageType)temp_ZiBhoWZ;}();}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
auto& json_value=json["mipLevels"];
[&](){member.mipLevels=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["arrayLayers"];
[&](){member.arrayLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["samples"];
[&](){[&](){VkSampleCountFlagBits temp_sbydRzr[&](){temp_sbydRzr=static_cast<int>(value_to<int>(json_value));}();member.samples=(VkSampleCountFlagBits)temp_sbydRzr;}();}();
auto& json_value=json["tiling"];
[&](){[&](){VkImageTiling temp_zOVFPJK[&](){temp_zOVFPJK=static_cast<int>(value_to<int>(json_value));}();member.tiling=(VkImageTiling)temp_zOVFPJK;}();}();
auto& json_value=json["usage"];
[&](){[&](){VkImageUsageFlags temp_wDutYxX[&](){temp_wDutYxX=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkImageUsageFlags)temp_wDutYxX;}();}();
auto& json_value=json["sharingMode"];
[&](){[&](){VkSharingMode temp_EIYFEAs[&](){temp_EIYFEAs=static_cast<int>(value_to<int>(json_value));}();member.sharingMode=(VkSharingMode)temp_EIYFEAs;}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){member.queueFamilyIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){ uint32_t* temp_uPDeaNU[&](){
            if (!json_value.as_array().size()==0){
                temp_uPDeaNU=NULL;
            return; }temp_uPDeaNU=(uint32_t*)malloc(member.queueFamilyIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int JEqKTnG=0; JEqKTnG < member.queueFamilyIndexCount; JEqKTnG++){
            [&](){temp_uPDeaNU[JEqKTnG]=static_cast<uint32_t>(value_to<int>(json_value[JEqKTnG]));}();
        }
        }();member.pQueueFamilyIndices=temp_uPDeaNU;}();
auto& json_value=json["initialLayout"];
[&](){[&](){VkImageLayout temp_FbubONM[&](){temp_FbubONM=static_cast<int>(value_to<int>(json_value));}();member.initialLayout=(VkImageLayout)temp_FbubONM;}();}();
}

    void serialize_pUserData(object& json, VkImageCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubresourceLayout& member){
        
    
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["rowPitch"];
[&](){[&](){json_value=member.rowPitch;}();}();
auto& json_value=json["arrayPitch"];
[&](){[&](){json_value=member.arrayPitch;}();}();
auto& json_value=json["depthPitch"];
[&](){[&](){json_value=member.depthPitch;}();}();
}
void deserialize_struct(object& json, VkSubresourceLayout& member){
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rowPitch"];
[&](){[&](){member.rowPitch=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["arrayPitch"];
[&](){[&](){member.arrayPitch=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthPitch"];
[&](){[&](){member.depthPitch=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSubresourceLayout& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubresourceLayout& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["viewType"];
[&](){[&](){[&](){json_value=member.viewType;}();}();}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["components"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.components);
            }();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.subresourceRange);
            }();
}
void deserialize_struct(object& json, VkImageViewCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkImageViewCreateFlags temp_OtDqiXG[&](){temp_OtDqiXG=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkImageViewCreateFlags)temp_OtDqiXG;}();}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["viewType"];
[&](){[&](){VkImageViewType temp_otRlYEC[&](){temp_otRlYEC=static_cast<int>(value_to<int>(json_value));}();member.viewType=(VkImageViewType)temp_otRlYEC;}();}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["components"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.components);
            }();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.subresourceRange);
            }();
}

    void serialize_pUserData(object& json, VkImageViewCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferCopy& member){
        
    
auto& json_value=json["srcOffset"];
[&](){[&](){json_value=member.srcOffset;}();}();
auto& json_value=json["dstOffset"];
[&](){[&](){json_value=member.dstOffset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkBufferCopy& member){
auto& json_value=json["srcOffset"];
[&](){[&](){member.srcOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dstOffset"];
[&](){[&](){member.dstOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBufferCopy& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferCopy& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseMemoryBind& member){
        
    
auto& json_value=json["resourceOffset"];
[&](){[&](){json_value=member.resourceOffset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){json_value=member.memoryOffset;}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkSparseMemoryBind& member){
auto& json_value=json["resourceOffset"];
[&](){[&](){member.resourceOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){member.memoryOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["flags"];
[&](){[&](){VkSparseMemoryBindFlags temp_QQEUQdF[&](){temp_QQEUQdF=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSparseMemoryBindFlags)temp_QQEUQdF;}();}();
}

    void serialize_pUserData(object& json, VkSparseMemoryBind& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseMemoryBind& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseImageMemoryBind& member){
        
    
auto& json_value=json["subresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.subresource);
            }();
auto& json_value=json["offset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.offset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){json_value=member.memoryOffset;}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkSparseImageMemoryBind& member){
auto& json_value=json["subresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.subresource);
            }();
auto& json_value=json["offset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.offset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){member.memoryOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["flags"];
[&](){[&](){VkSparseMemoryBindFlags temp_QQEUQdF[&](){temp_QQEUQdF=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSparseMemoryBindFlags)temp_QQEUQdF;}();}();
}

    void serialize_pUserData(object& json, VkSparseImageMemoryBind& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseImageMemoryBind& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseBufferMemoryBindInfo& member){
        
    
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["bindCount"];
[&](){json_value=member.bindCount;}();
auto& json_value=json["pBinds"];
[&](){
            if (member.pBinds==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int HwvIdVs=0; HwvIdVs < member.bindCount; HwvIdVs++){
            [&](){
            auto& temp=json_value[HwvIdVs].emplace_object();
            return serialize_struct(temp, member.pBinds[HwvIdVs]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkSparseBufferMemoryBindInfo& member){
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["bindCount"];
[&](){member.bindCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBinds"];
[&](){ VkSparseMemoryBind* temp_mgCsaif[&](){
            if (!json_value.as_array().size()==0){
                temp_mgCsaif=NULL;
            return; }temp_mgCsaif=(VkSparseMemoryBind*)malloc(member.bindCount*sizeof(VkSparseMemoryBind));
        auto& arr=json_value.as_array();
        for(int FqSYJtl=0; FqSYJtl < member.bindCount; FqSYJtl++){
            [&](){
            auto& temp=json_value[FqSYJtl].as_object();
            deserialize_struct(temp,temp_mgCsaif[FqSYJtl]);
            }();
        }
        }();member.pBinds=temp_mgCsaif;}();
}

    void serialize_pUserData(object& json, VkSparseBufferMemoryBindInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseBufferMemoryBindInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseImageOpaqueMemoryBindInfo& member){
        
    
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["bindCount"];
[&](){json_value=member.bindCount;}();
auto& json_value=json["pBinds"];
[&](){
            if (member.pBinds==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int HwvIdVs=0; HwvIdVs < member.bindCount; HwvIdVs++){
            [&](){
            auto& temp=json_value[HwvIdVs].emplace_object();
            return serialize_struct(temp, member.pBinds[HwvIdVs]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkSparseImageOpaqueMemoryBindInfo& member){
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["bindCount"];
[&](){member.bindCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBinds"];
[&](){ VkSparseMemoryBind* temp_mgCsaif[&](){
            if (!json_value.as_array().size()==0){
                temp_mgCsaif=NULL;
            return; }temp_mgCsaif=(VkSparseMemoryBind*)malloc(member.bindCount*sizeof(VkSparseMemoryBind));
        auto& arr=json_value.as_array();
        for(int FqSYJtl=0; FqSYJtl < member.bindCount; FqSYJtl++){
            [&](){
            auto& temp=json_value[FqSYJtl].as_object();
            deserialize_struct(temp,temp_mgCsaif[FqSYJtl]);
            }();
        }
        }();member.pBinds=temp_mgCsaif;}();
}

    void serialize_pUserData(object& json, VkSparseImageOpaqueMemoryBindInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseImageOpaqueMemoryBindInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseImageMemoryBindInfo& member){
        
    
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["bindCount"];
[&](){json_value=member.bindCount;}();
auto& json_value=json["pBinds"];
[&](){
            if (member.pBinds==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int JvNztWs=0; JvNztWs < member.bindCount; JvNztWs++){
            [&](){
            auto& temp=json_value[JvNztWs].emplace_object();
            return serialize_struct(temp, member.pBinds[JvNztWs]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkSparseImageMemoryBindInfo& member){
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["bindCount"];
[&](){member.bindCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBinds"];
[&](){ VkSparseImageMemoryBind* temp_PsKiJVp[&](){
            if (!json_value.as_array().size()==0){
                temp_PsKiJVp=NULL;
            return; }temp_PsKiJVp=(VkSparseImageMemoryBind*)malloc(member.bindCount*sizeof(VkSparseImageMemoryBind));
        auto& arr=json_value.as_array();
        for(int HjYbXsd=0; HjYbXsd < member.bindCount; HjYbXsd++){
            [&](){
            auto& temp=json_value[HjYbXsd].as_object();
            deserialize_struct(temp,temp_PsKiJVp[HjYbXsd]);
            }();
        }
        }();member.pBinds=temp_PsKiJVp;}();
}

    void serialize_pUserData(object& json, VkSparseImageMemoryBindInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseImageMemoryBindInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindSparseInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["waitSemaphoreCount"];
[&](){json_value=member.waitSemaphoreCount;}();
auto& json_value=json["pWaitSemaphores"];
[&](){
            if (member.pWaitSemaphores==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UPuCjkG=0; UPuCjkG < member.waitSemaphoreCount; UPuCjkG++){
            [&](){serialize_handle(json_value[UPuCjkG],member.pWaitSemaphores[UPuCjkG]);}();
        }
        }();
auto& json_value=json["bufferBindCount"];
[&](){json_value=member.bufferBindCount;}();
auto& json_value=json["pBufferBinds"];
[&](){
            if (member.pBufferBinds==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RRvLWWb=0; RRvLWWb < member.bufferBindCount; RRvLWWb++){
            [&](){
            auto& temp=json_value[RRvLWWb].emplace_object();
            return serialize_struct(temp, member.pBufferBinds[RRvLWWb]);
            }();
        }
        }();
auto& json_value=json["imageOpaqueBindCount"];
[&](){json_value=member.imageOpaqueBindCount;}();
auto& json_value=json["pImageOpaqueBinds"];
[&](){
            if (member.pImageOpaqueBinds==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int AUtqPDZ=0; AUtqPDZ < member.imageOpaqueBindCount; AUtqPDZ++){
            [&](){
            auto& temp=json_value[AUtqPDZ].emplace_object();
            return serialize_struct(temp, member.pImageOpaqueBinds[AUtqPDZ]);
            }();
        }
        }();
auto& json_value=json["imageBindCount"];
[&](){json_value=member.imageBindCount;}();
auto& json_value=json["pImageBinds"];
[&](){
            if (member.pImageBinds==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int iNNUNSt=0; iNNUNSt < member.imageBindCount; iNNUNSt++){
            [&](){
            auto& temp=json_value[iNNUNSt].emplace_object();
            return serialize_struct(temp, member.pImageBinds[iNNUNSt]);
            }();
        }
        }();
auto& json_value=json["signalSemaphoreCount"];
[&](){json_value=member.signalSemaphoreCount;}();
auto& json_value=json["pSignalSemaphores"];
[&](){
            if (member.pSignalSemaphores==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NKFlfkK=0; NKFlfkK < member.signalSemaphoreCount; NKFlfkK++){
            [&](){serialize_handle(json_value[NKFlfkK],member.pSignalSemaphores[NKFlfkK]);}();
        }
        }();
}
void deserialize_struct(object& json, VkBindSparseInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["waitSemaphoreCount"];
[&](){member.waitSemaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pWaitSemaphores"];
[&](){ VkSemaphore* temp_RtdUsdR[&](){
            if (!json_value.as_array().size()==0){
                temp_RtdUsdR=NULL;
            return; }temp_RtdUsdR=(VkSemaphore*)malloc(member.waitSemaphoreCount*sizeof(VkSemaphore));
        auto& arr=json_value.as_array();
        for(int eowObQx=0; eowObQx < member.waitSemaphoreCount; eowObQx++){
            [&](){deserialize_handle(json_value[eowObQx], temp_RtdUsdR[eowObQx]);}();
        }
        }();member.pWaitSemaphores=temp_RtdUsdR;}();
auto& json_value=json["bufferBindCount"];
[&](){member.bufferBindCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBufferBinds"];
[&](){ VkSparseBufferMemoryBindInfo* temp_UuLSGTk[&](){
            if (!json_value.as_array().size()==0){
                temp_UuLSGTk=NULL;
            return; }temp_UuLSGTk=(VkSparseBufferMemoryBindInfo*)malloc(member.bufferBindCount*sizeof(VkSparseBufferMemoryBindInfo));
        auto& arr=json_value.as_array();
        for(int pTBYvkA=0; pTBYvkA < member.bufferBindCount; pTBYvkA++){
            [&](){
            auto& temp=json_value[pTBYvkA].as_object();
            deserialize_struct(temp,temp_UuLSGTk[pTBYvkA]);
            }();
        }
        }();member.pBufferBinds=temp_UuLSGTk;}();
auto& json_value=json["imageOpaqueBindCount"];
[&](){member.imageOpaqueBindCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pImageOpaqueBinds"];
[&](){ VkSparseImageOpaqueMemoryBindInfo* temp_WFkCJCI[&](){
            if (!json_value.as_array().size()==0){
                temp_WFkCJCI=NULL;
            return; }temp_WFkCJCI=(VkSparseImageOpaqueMemoryBindInfo*)malloc(member.imageOpaqueBindCount*sizeof(VkSparseImageOpaqueMemoryBindInfo));
        auto& arr=json_value.as_array();
        for(int KjNYabZ=0; KjNYabZ < member.imageOpaqueBindCount; KjNYabZ++){
            [&](){
            auto& temp=json_value[KjNYabZ].as_object();
            deserialize_struct(temp,temp_WFkCJCI[KjNYabZ]);
            }();
        }
        }();member.pImageOpaqueBinds=temp_WFkCJCI;}();
auto& json_value=json["imageBindCount"];
[&](){member.imageBindCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pImageBinds"];
[&](){ VkSparseImageMemoryBindInfo* temp_gOyoInv[&](){
            if (!json_value.as_array().size()==0){
                temp_gOyoInv=NULL;
            return; }temp_gOyoInv=(VkSparseImageMemoryBindInfo*)malloc(member.imageBindCount*sizeof(VkSparseImageMemoryBindInfo));
        auto& arr=json_value.as_array();
        for(int WzrwjrD=0; WzrwjrD < member.imageBindCount; WzrwjrD++){
            [&](){
            auto& temp=json_value[WzrwjrD].as_object();
            deserialize_struct(temp,temp_gOyoInv[WzrwjrD]);
            }();
        }
        }();member.pImageBinds=temp_gOyoInv;}();
auto& json_value=json["signalSemaphoreCount"];
[&](){member.signalSemaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSignalSemaphores"];
[&](){ VkSemaphore* temp_nmXjvGQ[&](){
            if (!json_value.as_array().size()==0){
                temp_nmXjvGQ=NULL;
            return; }temp_nmXjvGQ=(VkSemaphore*)malloc(member.signalSemaphoreCount*sizeof(VkSemaphore));
        auto& arr=json_value.as_array();
        for(int rsHNIbT=0; rsHNIbT < member.signalSemaphoreCount; rsHNIbT++){
            [&](){deserialize_handle(json_value[rsHNIbT], temp_nmXjvGQ[rsHNIbT]);}();
        }
        }();member.pSignalSemaphores=temp_nmXjvGQ;}();
}

    void serialize_pUserData(object& json, VkBindSparseInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindSparseInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageCopy& member){
        
    
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
}
void deserialize_struct(object& json, VkImageCopy& member){
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
}

    void serialize_pUserData(object& json, VkImageCopy& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageCopy& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageBlit& member){
        
    
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcSubresource);
            }();
auto& json_value=json["srcOffsets"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto& temp=json_value[jRYlQCC].emplace_object();
            return serialize_struct(temp, member.srcOffsets[jRYlQCC]);
            }();
        }
        }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstSubresource);
            }();
auto& json_value=json["dstOffsets"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto& temp=json_value[dYmXuSG].emplace_object();
            return serialize_struct(temp, member.dstOffsets[dYmXuSG]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkImageBlit& member){
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcSubresource);
            }();
auto& json_value=json["srcOffsets"];
[&](){
        auto& arr=json_value.as_array();
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto& temp=json_value[jRYlQCC].as_object();
            deserialize_struct(temp,member.srcOffsets[jRYlQCC]);
            }();
        }
        }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstSubresource);
            }();
auto& json_value=json["dstOffsets"];
[&](){
        auto& arr=json_value.as_array();
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto& temp=json_value[dYmXuSG].as_object();
            deserialize_struct(temp,member.dstOffsets[dYmXuSG]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkImageBlit& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageBlit& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferImageCopy& member){
        
    
auto& json_value=json["bufferOffset"];
[&](){[&](){json_value=member.bufferOffset;}();}();
auto& json_value=json["bufferRowLength"];
[&](){json_value=member.bufferRowLength;}();
auto& json_value=json["bufferImageHeight"];
[&](){json_value=member.bufferImageHeight;}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageExtent);
            }();
}
void deserialize_struct(object& json, VkBufferImageCopy& member){
auto& json_value=json["bufferOffset"];
[&](){[&](){member.bufferOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferRowLength"];
[&](){member.bufferRowLength=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["bufferImageHeight"];
[&](){member.bufferImageHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageExtent);
            }();
}

    void serialize_pUserData(object& json, VkBufferImageCopy& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferImageCopy& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyMemoryIndirectCommandNV& member){
        
    
auto& json_value=json["srcAddress"];
[&](){[&](){json_value=member.srcAddress;}();}();
auto& json_value=json["dstAddress"];
[&](){[&](){json_value=member.dstAddress;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkCopyMemoryIndirectCommandNV& member){
auto& json_value=json["srcAddress"];
[&](){[&](){member.srcAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dstAddress"];
[&](){[&](){member.dstAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkCopyMemoryIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyMemoryIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyMemoryToImageIndirectCommandNV& member){
        
    
auto& json_value=json["srcAddress"];
[&](){[&](){json_value=member.srcAddress;}();}();
auto& json_value=json["bufferRowLength"];
[&](){json_value=member.bufferRowLength;}();
auto& json_value=json["bufferImageHeight"];
[&](){json_value=member.bufferImageHeight;}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageExtent);
            }();
}
void deserialize_struct(object& json, VkCopyMemoryToImageIndirectCommandNV& member){
auto& json_value=json["srcAddress"];
[&](){[&](){member.srcAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferRowLength"];
[&](){member.bufferRowLength=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["bufferImageHeight"];
[&](){member.bufferImageHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageExtent);
            }();
}

    void serialize_pUserData(object& json, VkCopyMemoryToImageIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyMemoryToImageIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageResolve& member){
        
    
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
}
void deserialize_struct(object& json, VkImageResolve& member){
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
}

    void serialize_pUserData(object& json, VkImageResolve& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageResolve& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkShaderModuleCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["codeSize"];
[&](){json_value=member.codeSize;}();
auto& json_value=json["pCode"];
[&](){
            if (member.pCode==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int AXpbriB=0; AXpbriB < member.codeSize / 4; AXpbriB++){
            [&](){json_value[AXpbriB]=member.pCode[AXpbriB];}();
        }
        }();
}
void deserialize_struct(object& json, VkShaderModuleCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkShaderModuleCreateFlags temp_hslaCeb[&](){temp_hslaCeb=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkShaderModuleCreateFlags)temp_hslaCeb;}();}();
auto& json_value=json["codeSize"];
[&](){member.codeSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pCode"];
[&](){ uint32_t* temp_pYMHVWy[&](){
            if (!json_value.as_array().size()==0){
                temp_pYMHVWy=NULL;
            return; }temp_pYMHVWy=(uint32_t*)malloc(member.codeSize / 4*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int QIlxWNh=0; QIlxWNh < member.codeSize / 4; QIlxWNh++){
            [&](){temp_pYMHVWy[QIlxWNh]=static_cast<uint32_t>(value_to<int>(json_value[QIlxWNh]));}();
        }
        }();member.pCode=temp_pYMHVWy;}();
}

    void serialize_pUserData(object& json, VkShaderModuleCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkShaderModuleCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetLayoutBinding& member){
        
    
auto& json_value=json["binding"];
[&](){json_value=member.binding;}();
auto& json_value=json["descriptorType"];
[&](){[&](){[&](){json_value=member.descriptorType;}();}();}();
auto& json_value=json["descriptorCount"];
[&](){json_value=member.descriptorCount;}();
auto& json_value=json["stageFlags"];
[&](){[&](){[&](){json_value=member.stageFlags;}();}();}();
auto& json_value=json["pImmutableSamplers"];
[&](){
            if (member.pImmutableSamplers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wKzMDsL=0; wKzMDsL < member.descriptorCount; wKzMDsL++){
            [&](){serialize_handle(json_value[wKzMDsL],member.pImmutableSamplers[wKzMDsL]);}();
        }
        }();
}
void deserialize_struct(object& json, VkDescriptorSetLayoutBinding& member){
auto& json_value=json["binding"];
[&](){member.binding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["descriptorType"];
[&](){[&](){VkDescriptorType temp_xewOskh[&](){temp_xewOskh=static_cast<int>(value_to<int>(json_value));}();member.descriptorType=(VkDescriptorType)temp_xewOskh;}();}();
auto& json_value=json["descriptorCount"];
[&](){member.descriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["stageFlags"];
[&](){[&](){VkShaderStageFlags temp_cXLFLvA[&](){temp_cXLFLvA=static_cast<int>(value_to<int>(json_value));}();member.stageFlags=(VkShaderStageFlags)temp_cXLFLvA;}();}();
auto& json_value=json["pImmutableSamplers"];
[&](){ VkSampler* temp_KEYwNAF[&](){
            if (!json_value.as_array().size()==0){
                temp_KEYwNAF=NULL;
            return; }temp_KEYwNAF=(VkSampler*)malloc(member.descriptorCount*sizeof(VkSampler));
        auto& arr=json_value.as_array();
        for(int DwrtaGO=0; DwrtaGO < member.descriptorCount; DwrtaGO++){
            [&](){deserialize_handle(json_value[DwrtaGO], temp_KEYwNAF[DwrtaGO]);}();
        }
        }();member.pImmutableSamplers=temp_KEYwNAF;}();
}

    void serialize_pUserData(object& json, VkDescriptorSetLayoutBinding& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetLayoutBinding& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetLayoutCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["bindingCount"];
[&](){json_value=member.bindingCount;}();
auto& json_value=json["pBindings"];
[&](){
            if (member.pBindings==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int sYqothM=0; sYqothM < member.bindingCount; sYqothM++){
            [&](){
            auto& temp=json_value[sYqothM].emplace_object();
            return serialize_struct(temp, member.pBindings[sYqothM]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDescriptorSetLayoutCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDescriptorSetLayoutCreateFlags temp_vBtQFdg[&](){temp_vBtQFdg=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDescriptorSetLayoutCreateFlags)temp_vBtQFdg;}();}();
auto& json_value=json["bindingCount"];
[&](){member.bindingCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBindings"];
[&](){ VkDescriptorSetLayoutBinding* temp_HTFqXqd[&](){
            if (!json_value.as_array().size()==0){
                temp_HTFqXqd=NULL;
            return; }temp_HTFqXqd=(VkDescriptorSetLayoutBinding*)malloc(member.bindingCount*sizeof(VkDescriptorSetLayoutBinding));
        auto& arr=json_value.as_array();
        for(int KUIwNnx=0; KUIwNnx < member.bindingCount; KUIwNnx++){
            [&](){
            auto& temp=json_value[KUIwNnx].as_object();
            deserialize_struct(temp,temp_HTFqXqd[KUIwNnx]);
            }();
        }
        }();member.pBindings=temp_HTFqXqd;}();
}

    void serialize_pUserData(object& json, VkDescriptorSetLayoutCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetLayoutCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorPoolSize& member){
        
    
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["descriptorCount"];
[&](){json_value=member.descriptorCount;}();
}
void deserialize_struct(object& json, VkDescriptorPoolSize& member){
auto& json_value=json["type"];
[&](){[&](){VkDescriptorType temp_cGjzkQd[&](){temp_cGjzkQd=static_cast<int>(value_to<int>(json_value));}();member.type=(VkDescriptorType)temp_cGjzkQd;}();}();
auto& json_value=json["descriptorCount"];
[&](){member.descriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDescriptorPoolSize& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorPoolSize& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorPoolCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["maxSets"];
[&](){json_value=member.maxSets;}();
auto& json_value=json["poolSizeCount"];
[&](){json_value=member.poolSizeCount;}();
auto& json_value=json["pPoolSizes"];
[&](){
            if (member.pPoolSizes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int cpawFXU=0; cpawFXU < member.poolSizeCount; cpawFXU++){
            [&](){
            auto& temp=json_value[cpawFXU].emplace_object();
            return serialize_struct(temp, member.pPoolSizes[cpawFXU]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDescriptorPoolCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDescriptorPoolCreateFlags temp_zGwbFLx[&](){temp_zGwbFLx=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDescriptorPoolCreateFlags)temp_zGwbFLx;}();}();
auto& json_value=json["maxSets"];
[&](){member.maxSets=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["poolSizeCount"];
[&](){member.poolSizeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPoolSizes"];
[&](){ VkDescriptorPoolSize* temp_aEiSTVJ[&](){
            if (!json_value.as_array().size()==0){
                temp_aEiSTVJ=NULL;
            return; }temp_aEiSTVJ=(VkDescriptorPoolSize*)malloc(member.poolSizeCount*sizeof(VkDescriptorPoolSize));
        auto& arr=json_value.as_array();
        for(int IdhEcbd=0; IdhEcbd < member.poolSizeCount; IdhEcbd++){
            [&](){
            auto& temp=json_value[IdhEcbd].as_object();
            deserialize_struct(temp,temp_aEiSTVJ[IdhEcbd]);
            }();
        }
        }();member.pPoolSizes=temp_aEiSTVJ;}();
}

    void serialize_pUserData(object& json, VkDescriptorPoolCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorPoolCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetAllocateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["descriptorPool"];
[&](){serialize_handle(json_value,member.descriptorPool);}();
auto& json_value=json["descriptorSetCount"];
[&](){json_value=member.descriptorSetCount;}();
auto& json_value=json["pSetLayouts"];
[&](){
            if (member.pSetLayouts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int gfILRjy=0; gfILRjy < member.descriptorSetCount; gfILRjy++){
            [&](){serialize_handle(json_value[gfILRjy],member.pSetLayouts[gfILRjy]);}();
        }
        }();
}
void deserialize_struct(object& json, VkDescriptorSetAllocateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["descriptorPool"];
[&](){deserialize_handle(json_value, member.descriptorPool);}();
auto& json_value=json["descriptorSetCount"];
[&](){member.descriptorSetCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSetLayouts"];
[&](){ VkDescriptorSetLayout* temp_QiigXGV[&](){
            if (!json_value.as_array().size()==0){
                temp_QiigXGV=NULL;
            return; }temp_QiigXGV=(VkDescriptorSetLayout*)malloc(member.descriptorSetCount*sizeof(VkDescriptorSetLayout));
        auto& arr=json_value.as_array();
        for(int kjCEeqP=0; kjCEeqP < member.descriptorSetCount; kjCEeqP++){
            [&](){deserialize_handle(json_value[kjCEeqP], temp_QiigXGV[kjCEeqP]);}();
        }
        }();member.pSetLayouts=temp_QiigXGV;}();
}

    void serialize_pUserData(object& json, VkDescriptorSetAllocateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetAllocateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSpecializationMapEntry& member){
        
    
auto& json_value=json["constantID"];
[&](){json_value=member.constantID;}();
auto& json_value=json["offset"];
[&](){json_value=member.offset;}();
auto& json_value=json["size"];
[&](){json_value=member.size;}();
}
void deserialize_struct(object& json, VkSpecializationMapEntry& member){
auto& json_value=json["constantID"];
[&](){member.constantID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["offset"];
[&](){member.offset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["size"];
[&](){member.size=static_cast<size_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSpecializationMapEntry& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSpecializationMapEntry& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSpecializationInfo& member){
        
    
auto& json_value=json["mapEntryCount"];
[&](){json_value=member.mapEntryCount;}();
auto& json_value=json["pMapEntries"];
[&](){
            if (member.pMapEntries==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int heBswyj=0; heBswyj < member.mapEntryCount; heBswyj++){
            [&](){
            auto& temp=json_value[heBswyj].emplace_object();
            return serialize_struct(temp, member.pMapEntries[heBswyj]);
            }();
        }
        }();
auto& json_value=json["dataSize"];
[&](){json_value=member.dataSize;}();
auto& json_value=json["pData"];
[&](){
            if (member.pData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KUeyATI=0; KUeyATI < member.dataSize; KUeyATI++){
            [&](){json_value[KUeyATI]=(char*)(member.pData)[KUeyATI];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkSpecializationInfo& member){
auto& json_value=json["mapEntryCount"];
[&](){member.mapEntryCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pMapEntries"];
[&](){ VkSpecializationMapEntry* temp_xgqhLNG[&](){
            if (!json_value.as_array().size()==0){
                temp_xgqhLNG=NULL;
            return; }temp_xgqhLNG=(VkSpecializationMapEntry*)malloc(member.mapEntryCount*sizeof(VkSpecializationMapEntry));
        auto& arr=json_value.as_array();
        for(int XLjYAsC=0; XLjYAsC < member.mapEntryCount; XLjYAsC++){
            [&](){
            auto& temp=json_value[XLjYAsC].as_object();
            deserialize_struct(temp,temp_xgqhLNG[XLjYAsC]);
            }();
        }
        }();member.pMapEntries=temp_xgqhLNG;}();
auto& json_value=json["dataSize"];
[&](){member.dataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pData"];
[&](){ void* temp_FrwwHum[&](){
            if (!json_value.as_array().size()==0){
                temp_FrwwHum=NULL;
            return; }char* temp_WIyeSmx;[&](){
            if (!json_value.as_array().size()==0){
                temp_FrwwHum=NULL;
            return; }temp_FrwwHum=(char*)malloc(member.dataSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int OCmuZGI=0; OCmuZGI < member.dataSize; OCmuZGI++){
            [&](){temp_FrwwHum[OCmuZGI]=static_cast<char>(value_to<int>(json_value[OCmuZGI]));}();
        }
        }();temp_FrwwHum=temp_WIyeSmx;}();member.pData=temp_FrwwHum;}();
}

    void serialize_pUserData(object& json, VkSpecializationInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSpecializationInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineShaderStageCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["stage"];
[&](){[&](){[&](){json_value=member.stage;}();}();}();
auto& json_value=json["module"];
[&](){serialize_handle(json_value,member.module);}();
auto& json_value=json["pName"];
[&](){
            if (member.pName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int opTkazg=0; opTkazg < strlen(member.pName)+1; opTkazg++){
            [&](){json_value[opTkazg]=member.pName[opTkazg];}();
        }
        }();
auto& json_value=json["pSpecializationInfo"];
[&](){
            if (member.pSpecializationInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int xbxpxgP=0; xbxpxgP < 1; xbxpxgP++){
            [&](){
            auto& temp=json_value[xbxpxgP].emplace_object();
            return serialize_struct(temp, member.pSpecializationInfo[xbxpxgP]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineShaderStageCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineShaderStageCreateFlags temp_mGGLaje[&](){temp_mGGLaje=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineShaderStageCreateFlags)temp_mGGLaje;}();}();
auto& json_value=json["stage"];
[&](){[&](){VkShaderStageFlagBits temp_oHinyRT[&](){temp_oHinyRT=static_cast<int>(value_to<int>(json_value));}();member.stage=(VkShaderStageFlagBits)temp_oHinyRT;}();}();
auto& json_value=json["module"];
[&](){deserialize_handle(json_value, member.module);}();
auto& json_value=json["pName"];
[&](){ char* temp_xDKNBiw[&](){
            if (!json_value.as_array().size()==0){
                temp_xDKNBiw=NULL;
            return; }temp_xDKNBiw=(char*)malloc(temp_xDKNBiw.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int zzMOHXu=0; zzMOHXu < temp_xDKNBiw.as_array().size();; zzMOHXu++){
            [&](){temp_xDKNBiw[zzMOHXu]=static_cast<char>(value_to<int>(json_value[zzMOHXu]));}();
        }
        }();member.pName=temp_xDKNBiw;}();
auto& json_value=json["pSpecializationInfo"];
[&](){ VkSpecializationInfo* temp_mZLjDhf[&](){
            if (!json_value.as_array().size()==0){
                temp_mZLjDhf=NULL;
            return; }temp_mZLjDhf=(VkSpecializationInfo*)malloc(1*sizeof(VkSpecializationInfo));
        auto& arr=json_value.as_array();
        for(int ZWKvpYr=0; ZWKvpYr < 1; ZWKvpYr++){
            [&](){
            auto& temp=json_value[ZWKvpYr].as_object();
            deserialize_struct(temp,temp_mZLjDhf[ZWKvpYr]);
            }();
        }
        }();member.pSpecializationInfo=temp_mZLjDhf;}();
}

    void serialize_pUserData(object& json, VkPipelineShaderStageCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineShaderStageCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkComputePipelineCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["stage"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.stage);
            }();
auto& json_value=json["layout"];
[&](){serialize_handle(json_value,member.layout);}();
auto& json_value=json["basePipelineHandle"];
[&](){serialize_handle(json_value,member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){json_value=member.basePipelineIndex;}();
}
void deserialize_struct(object& json, VkComputePipelineCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCreateFlags temp_VJehfkc[&](){temp_VJehfkc=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCreateFlags)temp_VJehfkc;}();}();
auto& json_value=json["stage"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.stage);
            }();
auto& json_value=json["layout"];
[&](){deserialize_handle(json_value, member.layout);}();
auto& json_value=json["basePipelineHandle"];
[&](){deserialize_handle(json_value, member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){member.basePipelineIndex=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkComputePipelineCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkComputePipelineCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkComputePipelineIndirectBufferInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["pipelineDeviceAddressCaptureReplay"];
[&](){[&](){json_value=member.pipelineDeviceAddressCaptureReplay;}();}();
}
void deserialize_struct(object& json, VkComputePipelineIndirectBufferInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["pipelineDeviceAddressCaptureReplay"];
[&](){[&](){member.pipelineDeviceAddressCaptureReplay=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkComputePipelineIndirectBufferInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkComputePipelineIndirectBufferInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCreateFlags2CreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkPipelineCreateFlags2CreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCreateFlags2KHR temp_tznxfGN[&](){temp_tznxfGN=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCreateFlags2KHR)temp_tznxfGN;}();}();
}

    void serialize_pUserData(object& json, VkPipelineCreateFlags2CreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCreateFlags2CreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVertexInputBindingDescription& member){
        
    
auto& json_value=json["binding"];
[&](){json_value=member.binding;}();
auto& json_value=json["stride"];
[&](){json_value=member.stride;}();
auto& json_value=json["inputRate"];
[&](){[&](){[&](){json_value=member.inputRate;}();}();}();
}
void deserialize_struct(object& json, VkVertexInputBindingDescription& member){
auto& json_value=json["binding"];
[&](){member.binding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["stride"];
[&](){member.stride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["inputRate"];
[&](){[&](){VkVertexInputRate temp_RLbOnBW[&](){temp_RLbOnBW=static_cast<int>(value_to<int>(json_value));}();member.inputRate=(VkVertexInputRate)temp_RLbOnBW;}();}();
}

    void serialize_pUserData(object& json, VkVertexInputBindingDescription& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVertexInputBindingDescription& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVertexInputAttributeDescription& member){
        
    
auto& json_value=json["location"];
[&](){json_value=member.location;}();
auto& json_value=json["binding"];
[&](){json_value=member.binding;}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["offset"];
[&](){json_value=member.offset;}();
}
void deserialize_struct(object& json, VkVertexInputAttributeDescription& member){
auto& json_value=json["location"];
[&](){member.location=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["binding"];
[&](){member.binding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["offset"];
[&](){member.offset=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkVertexInputAttributeDescription& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVertexInputAttributeDescription& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineVertexInputStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["vertexBindingDescriptionCount"];
[&](){json_value=member.vertexBindingDescriptionCount;}();
auto& json_value=json["pVertexBindingDescriptions"];
[&](){
            if (member.pVertexBindingDescriptions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UYAeNka=0; UYAeNka < member.vertexBindingDescriptionCount; UYAeNka++){
            [&](){
            auto& temp=json_value[UYAeNka].emplace_object();
            return serialize_struct(temp, member.pVertexBindingDescriptions[UYAeNka]);
            }();
        }
        }();
auto& json_value=json["vertexAttributeDescriptionCount"];
[&](){json_value=member.vertexAttributeDescriptionCount;}();
auto& json_value=json["pVertexAttributeDescriptions"];
[&](){
            if (member.pVertexAttributeDescriptions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RsYbObC=0; RsYbObC < member.vertexAttributeDescriptionCount; RsYbObC++){
            [&](){
            auto& temp=json_value[RsYbObC].emplace_object();
            return serialize_struct(temp, member.pVertexAttributeDescriptions[RsYbObC]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineVertexInputStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineVertexInputStateCreateFlags temp_pPeWCOQ[&](){temp_pPeWCOQ=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineVertexInputStateCreateFlags)temp_pPeWCOQ;}();}();
auto& json_value=json["vertexBindingDescriptionCount"];
[&](){member.vertexBindingDescriptionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pVertexBindingDescriptions"];
[&](){ VkVertexInputBindingDescription* temp_kaGRfCs[&](){
            if (!json_value.as_array().size()==0){
                temp_kaGRfCs=NULL;
            return; }temp_kaGRfCs=(VkVertexInputBindingDescription*)malloc(member.vertexBindingDescriptionCount*sizeof(VkVertexInputBindingDescription));
        auto& arr=json_value.as_array();
        for(int OSCEDEw=0; OSCEDEw < member.vertexBindingDescriptionCount; OSCEDEw++){
            [&](){
            auto& temp=json_value[OSCEDEw].as_object();
            deserialize_struct(temp,temp_kaGRfCs[OSCEDEw]);
            }();
        }
        }();member.pVertexBindingDescriptions=temp_kaGRfCs;}();
auto& json_value=json["vertexAttributeDescriptionCount"];
[&](){member.vertexAttributeDescriptionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pVertexAttributeDescriptions"];
[&](){ VkVertexInputAttributeDescription* temp_QXdIUDa[&](){
            if (!json_value.as_array().size()==0){
                temp_QXdIUDa=NULL;
            return; }temp_QXdIUDa=(VkVertexInputAttributeDescription*)malloc(member.vertexAttributeDescriptionCount*sizeof(VkVertexInputAttributeDescription));
        auto& arr=json_value.as_array();
        for(int CvxmTtW=0; CvxmTtW < member.vertexAttributeDescriptionCount; CvxmTtW++){
            [&](){
            auto& temp=json_value[CvxmTtW].as_object();
            deserialize_struct(temp,temp_QXdIUDa[CvxmTtW]);
            }();
        }
        }();member.pVertexAttributeDescriptions=temp_QXdIUDa;}();
}

    void serialize_pUserData(object& json, VkPipelineVertexInputStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineVertexInputStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineInputAssemblyStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["topology"];
[&](){[&](){[&](){json_value=member.topology;}();}();}();
auto& json_value=json["primitiveRestartEnable"];
[&](){[&](){json_value=member.primitiveRestartEnable;}();}();
}
void deserialize_struct(object& json, VkPipelineInputAssemblyStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineInputAssemblyStateCreateFlags temp_QVNnNaf[&](){temp_QVNnNaf=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineInputAssemblyStateCreateFlags)temp_QVNnNaf;}();}();
auto& json_value=json["topology"];
[&](){[&](){VkPrimitiveTopology temp_floPSAV[&](){temp_floPSAV=static_cast<int>(value_to<int>(json_value));}();member.topology=(VkPrimitiveTopology)temp_floPSAV;}();}();
auto& json_value=json["primitiveRestartEnable"];
[&](){[&](){member.primitiveRestartEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPipelineInputAssemblyStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineInputAssemblyStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineTessellationStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["patchControlPoints"];
[&](){json_value=member.patchControlPoints;}();
}
void deserialize_struct(object& json, VkPipelineTessellationStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineTessellationStateCreateFlags temp_DodyPNu[&](){temp_DodyPNu=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineTessellationStateCreateFlags)temp_DodyPNu;}();}();
auto& json_value=json["patchControlPoints"];
[&](){member.patchControlPoints=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineTessellationStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineTessellationStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineViewportStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["viewportCount"];
[&](){json_value=member.viewportCount;}();
auto& json_value=json["pViewports"];
[&](){
            if (member.pViewports==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int nudoDfU=0; nudoDfU < member.viewportCount; nudoDfU++){
            [&](){
            auto& temp=json_value[nudoDfU].emplace_object();
            return serialize_struct(temp, member.pViewports[nudoDfU]);
            }();
        }
        }();
auto& json_value=json["scissorCount"];
[&](){json_value=member.scissorCount;}();
auto& json_value=json["pScissors"];
[&](){
            if (member.pScissors==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int fZdpvXx=0; fZdpvXx < member.scissorCount; fZdpvXx++){
            [&](){
            auto& temp=json_value[fZdpvXx].emplace_object();
            return serialize_struct(temp, member.pScissors[fZdpvXx]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineViewportStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineViewportStateCreateFlags temp_YCJbmIO[&](){temp_YCJbmIO=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineViewportStateCreateFlags)temp_YCJbmIO;}();}();
auto& json_value=json["viewportCount"];
[&](){member.viewportCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewports"];
[&](){ VkViewport* temp_JUceTbG[&](){
            if (!json_value.as_array().size()==0){
                temp_JUceTbG=NULL;
            return; }temp_JUceTbG=(VkViewport*)malloc(member.viewportCount*sizeof(VkViewport));
        auto& arr=json_value.as_array();
        for(int joicTxZ=0; joicTxZ < member.viewportCount; joicTxZ++){
            [&](){
            auto& temp=json_value[joicTxZ].as_object();
            deserialize_struct(temp,temp_JUceTbG[joicTxZ]);
            }();
        }
        }();member.pViewports=temp_JUceTbG;}();
auto& json_value=json["scissorCount"];
[&](){member.scissorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pScissors"];
[&](){ VkRect2D* temp_QWkusXk[&](){
            if (!json_value.as_array().size()==0){
                temp_QWkusXk=NULL;
            return; }temp_QWkusXk=(VkRect2D*)malloc(member.scissorCount*sizeof(VkRect2D));
        auto& arr=json_value.as_array();
        for(int jztdrHP=0; jztdrHP < member.scissorCount; jztdrHP++){
            [&](){
            auto& temp=json_value[jztdrHP].as_object();
            deserialize_struct(temp,temp_QWkusXk[jztdrHP]);
            }();
        }
        }();member.pScissors=temp_QWkusXk;}();
}

    void serialize_pUserData(object& json, VkPipelineViewportStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineViewportStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRasterizationStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["depthClampEnable"];
[&](){[&](){json_value=member.depthClampEnable;}();}();
auto& json_value=json["rasterizerDiscardEnable"];
[&](){[&](){json_value=member.rasterizerDiscardEnable;}();}();
auto& json_value=json["polygonMode"];
[&](){[&](){[&](){json_value=member.polygonMode;}();}();}();
auto& json_value=json["cullMode"];
[&](){[&](){[&](){json_value=member.cullMode;}();}();}();
auto& json_value=json["frontFace"];
[&](){[&](){[&](){json_value=member.frontFace;}();}();}();
auto& json_value=json["depthBiasEnable"];
[&](){[&](){json_value=member.depthBiasEnable;}();}();
auto& json_value=json["depthBiasConstantFactor"];
[&](){json_value=member.depthBiasConstantFactor;}();
auto& json_value=json["depthBiasClamp"];
[&](){json_value=member.depthBiasClamp;}();
auto& json_value=json["depthBiasSlopeFactor"];
[&](){json_value=member.depthBiasSlopeFactor;}();
auto& json_value=json["lineWidth"];
[&](){json_value=member.lineWidth;}();
}
void deserialize_struct(object& json, VkPipelineRasterizationStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineRasterizationStateCreateFlags temp_zoGnXQE[&](){temp_zoGnXQE=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineRasterizationStateCreateFlags)temp_zoGnXQE;}();}();
auto& json_value=json["depthClampEnable"];
[&](){[&](){member.depthClampEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rasterizerDiscardEnable"];
[&](){[&](){member.rasterizerDiscardEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["polygonMode"];
[&](){[&](){VkPolygonMode temp_fDDrqBu[&](){temp_fDDrqBu=static_cast<int>(value_to<int>(json_value));}();member.polygonMode=(VkPolygonMode)temp_fDDrqBu;}();}();
auto& json_value=json["cullMode"];
[&](){[&](){VkCullModeFlags temp_ICzWLWV[&](){temp_ICzWLWV=static_cast<int>(value_to<int>(json_value));}();member.cullMode=(VkCullModeFlags)temp_ICzWLWV;}();}();
auto& json_value=json["frontFace"];
[&](){[&](){VkFrontFace temp_Wftzylt[&](){temp_Wftzylt=static_cast<int>(value_to<int>(json_value));}();member.frontFace=(VkFrontFace)temp_Wftzylt;}();}();
auto& json_value=json["depthBiasEnable"];
[&](){[&](){member.depthBiasEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthBiasConstantFactor"];
[&](){member.depthBiasConstantFactor=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["depthBiasClamp"];
[&](){member.depthBiasClamp=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["depthBiasSlopeFactor"];
[&](){member.depthBiasSlopeFactor=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["lineWidth"];
[&](){member.lineWidth=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineRasterizationStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRasterizationStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineMultisampleStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){[&](){json_value=member.rasterizationSamples;}();}();}();
auto& json_value=json["sampleShadingEnable"];
[&](){[&](){json_value=member.sampleShadingEnable;}();}();
auto& json_value=json["minSampleShading"];
[&](){json_value=member.minSampleShading;}();
auto& json_value=json["pSampleMask"];
[&](){
            if (member.pSampleMask==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KkmOuEW=0; KkmOuEW < (member.rasterizationSamples + 31) / 32; KkmOuEW++){
            [&](){[&](){json_value[KkmOuEW]=member.pSampleMask[KkmOuEW];}();}();
        }
        }();
auto& json_value=json["alphaToCoverageEnable"];
[&](){[&](){json_value=member.alphaToCoverageEnable;}();}();
auto& json_value=json["alphaToOneEnable"];
[&](){[&](){json_value=member.alphaToOneEnable;}();}();
}
void deserialize_struct(object& json, VkPipelineMultisampleStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineMultisampleStateCreateFlags temp_zUEtIbJ[&](){temp_zUEtIbJ=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineMultisampleStateCreateFlags)temp_zUEtIbJ;}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){VkSampleCountFlagBits temp_poTQNon[&](){temp_poTQNon=static_cast<int>(value_to<int>(json_value));}();member.rasterizationSamples=(VkSampleCountFlagBits)temp_poTQNon;}();}();
auto& json_value=json["sampleShadingEnable"];
[&](){[&](){member.sampleShadingEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["minSampleShading"];
[&](){member.minSampleShading=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["pSampleMask"];
[&](){ VkSampleMask* temp_eGaHiSd[&](){
            if (!json_value.as_array().size()==0){
                temp_eGaHiSd=NULL;
            return; }temp_eGaHiSd=(VkSampleMask*)malloc((member.rasterizationSamples + 31) / 32*sizeof(VkSampleMask));
        auto& arr=json_value.as_array();
        for(int DkRZSWg=0; DkRZSWg < (member.rasterizationSamples + 31) / 32; DkRZSWg++){
            [&](){[&](){temp_eGaHiSd[DkRZSWg]=static_cast<uint32_t>(value_to<int>(json_value[DkRZSWg]));}();}();
        }
        }();member.pSampleMask=temp_eGaHiSd;}();
auto& json_value=json["alphaToCoverageEnable"];
[&](){[&](){member.alphaToCoverageEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["alphaToOneEnable"];
[&](){[&](){member.alphaToOneEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPipelineMultisampleStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineMultisampleStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineColorBlendAttachmentState& member){
        
    
auto& json_value=json["blendEnable"];
[&](){[&](){json_value=member.blendEnable;}();}();
auto& json_value=json["srcColorBlendFactor"];
[&](){[&](){[&](){json_value=member.srcColorBlendFactor;}();}();}();
auto& json_value=json["dstColorBlendFactor"];
[&](){[&](){[&](){json_value=member.dstColorBlendFactor;}();}();}();
auto& json_value=json["colorBlendOp"];
[&](){[&](){[&](){json_value=member.colorBlendOp;}();}();}();
auto& json_value=json["srcAlphaBlendFactor"];
[&](){[&](){[&](){json_value=member.srcAlphaBlendFactor;}();}();}();
auto& json_value=json["dstAlphaBlendFactor"];
[&](){[&](){[&](){json_value=member.dstAlphaBlendFactor;}();}();}();
auto& json_value=json["alphaBlendOp"];
[&](){[&](){[&](){json_value=member.alphaBlendOp;}();}();}();
auto& json_value=json["colorWriteMask"];
[&](){[&](){[&](){json_value=member.colorWriteMask;}();}();}();
}
void deserialize_struct(object& json, VkPipelineColorBlendAttachmentState& member){
auto& json_value=json["blendEnable"];
[&](){[&](){member.blendEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["srcColorBlendFactor"];
[&](){[&](){VkBlendFactor temp_VAebMMZ[&](){temp_VAebMMZ=static_cast<int>(value_to<int>(json_value));}();member.srcColorBlendFactor=(VkBlendFactor)temp_VAebMMZ;}();}();
auto& json_value=json["dstColorBlendFactor"];
[&](){[&](){VkBlendFactor temp_vClSLyE[&](){temp_vClSLyE=static_cast<int>(value_to<int>(json_value));}();member.dstColorBlendFactor=(VkBlendFactor)temp_vClSLyE;}();}();
auto& json_value=json["colorBlendOp"];
[&](){[&](){VkBlendOp temp_MEyEuOR[&](){temp_MEyEuOR=static_cast<int>(value_to<int>(json_value));}();member.colorBlendOp=(VkBlendOp)temp_MEyEuOR;}();}();
auto& json_value=json["srcAlphaBlendFactor"];
[&](){[&](){VkBlendFactor temp_RiTtMSZ[&](){temp_RiTtMSZ=static_cast<int>(value_to<int>(json_value));}();member.srcAlphaBlendFactor=(VkBlendFactor)temp_RiTtMSZ;}();}();
auto& json_value=json["dstAlphaBlendFactor"];
[&](){[&](){VkBlendFactor temp_iQEkhrh[&](){temp_iQEkhrh=static_cast<int>(value_to<int>(json_value));}();member.dstAlphaBlendFactor=(VkBlendFactor)temp_iQEkhrh;}();}();
auto& json_value=json["alphaBlendOp"];
[&](){[&](){VkBlendOp temp_wilyQgv[&](){temp_wilyQgv=static_cast<int>(value_to<int>(json_value));}();member.alphaBlendOp=(VkBlendOp)temp_wilyQgv;}();}();
auto& json_value=json["colorWriteMask"];
[&](){[&](){VkColorComponentFlags temp_HKqOiHx[&](){temp_HKqOiHx=static_cast<int>(value_to<int>(json_value));}();member.colorWriteMask=(VkColorComponentFlags)temp_HKqOiHx;}();}();
}

    void serialize_pUserData(object& json, VkPipelineColorBlendAttachmentState& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineColorBlendAttachmentState& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineColorBlendStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["logicOpEnable"];
[&](){[&](){json_value=member.logicOpEnable;}();}();
auto& json_value=json["logicOp"];
[&](){[&](){[&](){json_value=member.logicOp;}();}();}();
auto& json_value=json["attachmentCount"];
[&](){json_value=member.attachmentCount;}();
auto& json_value=json["pAttachments"];
[&](){
            if (member.pAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UeoCLDk=0; UeoCLDk < member.attachmentCount; UeoCLDk++){
            [&](){
            auto& temp=json_value[UeoCLDk].emplace_object();
            return serialize_struct(temp, member.pAttachments[UeoCLDk]);
            }();
        }
        }();
auto& json_value=json["blendConstants"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int hihyfbp=0; hihyfbp < 4; hihyfbp++){
            [&](){json_value[hihyfbp]=member.blendConstants[hihyfbp];}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineColorBlendStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineColorBlendStateCreateFlags temp_NRpCBqV[&](){temp_NRpCBqV=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineColorBlendStateCreateFlags)temp_NRpCBqV;}();}();
auto& json_value=json["logicOpEnable"];
[&](){[&](){member.logicOpEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["logicOp"];
[&](){[&](){VkLogicOp temp_XZlATgA[&](){temp_XZlATgA=static_cast<int>(value_to<int>(json_value));}();member.logicOp=(VkLogicOp)temp_XZlATgA;}();}();
auto& json_value=json["attachmentCount"];
[&](){member.attachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAttachments"];
[&](){ VkPipelineColorBlendAttachmentState* temp_SSkvDnr[&](){
            if (!json_value.as_array().size()==0){
                temp_SSkvDnr=NULL;
            return; }temp_SSkvDnr=(VkPipelineColorBlendAttachmentState*)malloc(member.attachmentCount*sizeof(VkPipelineColorBlendAttachmentState));
        auto& arr=json_value.as_array();
        for(int ncYTsSD=0; ncYTsSD < member.attachmentCount; ncYTsSD++){
            [&](){
            auto& temp=json_value[ncYTsSD].as_object();
            deserialize_struct(temp,temp_SSkvDnr[ncYTsSD]);
            }();
        }
        }();member.pAttachments=temp_SSkvDnr;}();
auto& json_value=json["blendConstants"];
[&](){
        auto& arr=json_value.as_array();
        for(int hihyfbp=0; hihyfbp < 4; hihyfbp++){
            [&](){member.blendConstants[hihyfbp]=static_cast<float>(value_to<int>(json_value[hihyfbp]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPipelineColorBlendStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineColorBlendStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineDynamicStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["dynamicStateCount"];
[&](){json_value=member.dynamicStateCount;}();
auto& json_value=json["pDynamicStates"];
[&](){
            if (member.pDynamicStates==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int aeBshMh=0; aeBshMh < member.dynamicStateCount; aeBshMh++){
            [&](){[&](){[&](){json_value[aeBshMh]=member.pDynamicStates[aeBshMh];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineDynamicStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineDynamicStateCreateFlags temp_iGDPhNd[&](){temp_iGDPhNd=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineDynamicStateCreateFlags)temp_iGDPhNd;}();}();
auto& json_value=json["dynamicStateCount"];
[&](){member.dynamicStateCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDynamicStates"];
[&](){ VkDynamicState* temp_HCskwHb[&](){
            if (!json_value.as_array().size()==0){
                temp_HCskwHb=NULL;
            return; }temp_HCskwHb=(VkDynamicState*)malloc(member.dynamicStateCount*sizeof(VkDynamicState));
        auto& arr=json_value.as_array();
        for(int gZGZxPA=0; gZGZxPA < member.dynamicStateCount; gZGZxPA++){
            [&](){[&](){const VkDynamicState* temp_HymYHTR[&](){temp_HymYHTR=static_cast<int>(value_to<int>(json_value[gZGZxPA]));}();temp_HCskwHb[gZGZxPA]=(VkDynamicState)temp_HymYHTR;}();}();
        }
        }();member.pDynamicStates=temp_HCskwHb;}();
}

    void serialize_pUserData(object& json, VkPipelineDynamicStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineDynamicStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkStencilOpState& member){
        
    
auto& json_value=json["failOp"];
[&](){[&](){[&](){json_value=member.failOp;}();}();}();
auto& json_value=json["passOp"];
[&](){[&](){[&](){json_value=member.passOp;}();}();}();
auto& json_value=json["depthFailOp"];
[&](){[&](){[&](){json_value=member.depthFailOp;}();}();}();
auto& json_value=json["compareOp"];
[&](){[&](){[&](){json_value=member.compareOp;}();}();}();
auto& json_value=json["compareMask"];
[&](){json_value=member.compareMask;}();
auto& json_value=json["writeMask"];
[&](){json_value=member.writeMask;}();
auto& json_value=json["reference"];
[&](){json_value=member.reference;}();
}
void deserialize_struct(object& json, VkStencilOpState& member){
auto& json_value=json["failOp"];
[&](){[&](){VkStencilOp temp_RJaZvdb[&](){temp_RJaZvdb=static_cast<int>(value_to<int>(json_value));}();member.failOp=(VkStencilOp)temp_RJaZvdb;}();}();
auto& json_value=json["passOp"];
[&](){[&](){VkStencilOp temp_FeYsCpp[&](){temp_FeYsCpp=static_cast<int>(value_to<int>(json_value));}();member.passOp=(VkStencilOp)temp_FeYsCpp;}();}();
auto& json_value=json["depthFailOp"];
[&](){[&](){VkStencilOp temp_NMKrcLy[&](){temp_NMKrcLy=static_cast<int>(value_to<int>(json_value));}();member.depthFailOp=(VkStencilOp)temp_NMKrcLy;}();}();
auto& json_value=json["compareOp"];
[&](){[&](){VkCompareOp temp_DObIAPN[&](){temp_DObIAPN=static_cast<int>(value_to<int>(json_value));}();member.compareOp=(VkCompareOp)temp_DObIAPN;}();}();
auto& json_value=json["compareMask"];
[&](){member.compareMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["writeMask"];
[&](){member.writeMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["reference"];
[&](){member.reference=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkStencilOpState& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkStencilOpState& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineDepthStencilStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["depthTestEnable"];
[&](){[&](){json_value=member.depthTestEnable;}();}();
auto& json_value=json["depthWriteEnable"];
[&](){[&](){json_value=member.depthWriteEnable;}();}();
auto& json_value=json["depthCompareOp"];
[&](){[&](){[&](){json_value=member.depthCompareOp;}();}();}();
auto& json_value=json["depthBoundsTestEnable"];
[&](){[&](){json_value=member.depthBoundsTestEnable;}();}();
auto& json_value=json["stencilTestEnable"];
[&](){[&](){json_value=member.stencilTestEnable;}();}();
auto& json_value=json["front"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.front);
            }();
auto& json_value=json["back"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.back);
            }();
auto& json_value=json["minDepthBounds"];
[&](){json_value=member.minDepthBounds;}();
auto& json_value=json["maxDepthBounds"];
[&](){json_value=member.maxDepthBounds;}();
}
void deserialize_struct(object& json, VkPipelineDepthStencilStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineDepthStencilStateCreateFlags temp_FovGiMa[&](){temp_FovGiMa=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineDepthStencilStateCreateFlags)temp_FovGiMa;}();}();
auto& json_value=json["depthTestEnable"];
[&](){[&](){member.depthTestEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthWriteEnable"];
[&](){[&](){member.depthWriteEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthCompareOp"];
[&](){[&](){VkCompareOp temp_WOsWkfx[&](){temp_WOsWkfx=static_cast<int>(value_to<int>(json_value));}();member.depthCompareOp=(VkCompareOp)temp_WOsWkfx;}();}();
auto& json_value=json["depthBoundsTestEnable"];
[&](){[&](){member.depthBoundsTestEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["stencilTestEnable"];
[&](){[&](){member.stencilTestEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["front"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.front);
            }();
auto& json_value=json["back"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.back);
            }();
auto& json_value=json["minDepthBounds"];
[&](){member.minDepthBounds=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxDepthBounds"];
[&](){member.maxDepthBounds=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineDepthStencilStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineDepthStencilStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGraphicsPipelineCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["stageCount"];
[&](){json_value=member.stageCount;}();
auto& json_value=json["pStages"];
[&](){
            if (member.pStages==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto& temp=json_value[jHuRulk].emplace_object();
            return serialize_struct(temp, member.pStages[jHuRulk]);
            }();
        }
        }();
auto& json_value=json["pVertexInputState"];
[&](){
            if (member.pVertexInputState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wkXjKqh=0; wkXjKqh < 1; wkXjKqh++){
            [&](){
            auto& temp=json_value[wkXjKqh].emplace_object();
            return serialize_struct(temp, member.pVertexInputState[wkXjKqh]);
            }();
        }
        }();
auto& json_value=json["pInputAssemblyState"];
[&](){
            if (member.pInputAssemblyState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int eNpRXIQ=0; eNpRXIQ < 1; eNpRXIQ++){
            [&](){
            auto& temp=json_value[eNpRXIQ].emplace_object();
            return serialize_struct(temp, member.pInputAssemblyState[eNpRXIQ]);
            }();
        }
        }();
auto& json_value=json["pTessellationState"];
[&](){
            if (member.pTessellationState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rSxHnEH=0; rSxHnEH < 1; rSxHnEH++){
            [&](){
            auto& temp=json_value[rSxHnEH].emplace_object();
            return serialize_struct(temp, member.pTessellationState[rSxHnEH]);
            }();
        }
        }();
auto& json_value=json["pViewportState"];
[&](){
            if (member.pViewportState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int HszcYXw=0; HszcYXw < 1; HszcYXw++){
            [&](){
            auto& temp=json_value[HszcYXw].emplace_object();
            return serialize_struct(temp, member.pViewportState[HszcYXw]);
            }();
        }
        }();
auto& json_value=json["pRasterizationState"];
[&](){
            if (member.pRasterizationState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int YHpJqRW=0; YHpJqRW < 1; YHpJqRW++){
            [&](){
            auto& temp=json_value[YHpJqRW].emplace_object();
            return serialize_struct(temp, member.pRasterizationState[YHpJqRW]);
            }();
        }
        }();
auto& json_value=json["pMultisampleState"];
[&](){
            if (member.pMultisampleState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int itMmQwR=0; itMmQwR < 1; itMmQwR++){
            [&](){
            auto& temp=json_value[itMmQwR].emplace_object();
            return serialize_struct(temp, member.pMultisampleState[itMmQwR]);
            }();
        }
        }();
auto& json_value=json["pDepthStencilState"];
[&](){
            if (member.pDepthStencilState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int dZXqjNN=0; dZXqjNN < 1; dZXqjNN++){
            [&](){
            auto& temp=json_value[dZXqjNN].emplace_object();
            return serialize_struct(temp, member.pDepthStencilState[dZXqjNN]);
            }();
        }
        }();
auto& json_value=json["pColorBlendState"];
[&](){
            if (member.pColorBlendState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int PZsHAXm=0; PZsHAXm < 1; PZsHAXm++){
            [&](){
            auto& temp=json_value[PZsHAXm].emplace_object();
            return serialize_struct(temp, member.pColorBlendState[PZsHAXm]);
            }();
        }
        }();
auto& json_value=json["pDynamicState"];
[&](){
            if (member.pDynamicState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UhXMcnS=0; UhXMcnS < 1; UhXMcnS++){
            [&](){
            auto& temp=json_value[UhXMcnS].emplace_object();
            return serialize_struct(temp, member.pDynamicState[UhXMcnS]);
            }();
        }
        }();
auto& json_value=json["layout"];
[&](){serialize_handle(json_value,member.layout);}();
auto& json_value=json["renderPass"];
[&](){serialize_handle(json_value,member.renderPass);}();
auto& json_value=json["subpass"];
[&](){json_value=member.subpass;}();
auto& json_value=json["basePipelineHandle"];
[&](){serialize_handle(json_value,member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){json_value=member.basePipelineIndex;}();
}
void deserialize_struct(object& json, VkGraphicsPipelineCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCreateFlags temp_VJehfkc[&](){temp_VJehfkc=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCreateFlags)temp_VJehfkc;}();}();
auto& json_value=json["stageCount"];
[&](){member.stageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStages"];
[&](){ VkPipelineShaderStageCreateInfo* temp_pfZGdpq[&](){
            if (!json_value.as_array().size()==0){
                temp_pfZGdpq=NULL;
            return; }temp_pfZGdpq=(VkPipelineShaderStageCreateInfo*)malloc(member.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto& arr=json_value.as_array();
        for(int XttzcgZ=0; XttzcgZ < member.stageCount; XttzcgZ++){
            [&](){
            auto& temp=json_value[XttzcgZ].as_object();
            deserialize_struct(temp,temp_pfZGdpq[XttzcgZ]);
            }();
        }
        }();member.pStages=temp_pfZGdpq;}();
auto& json_value=json["pVertexInputState"];
[&](){ VkPipelineVertexInputStateCreateInfo* temp_GRDNOgA[&](){
            if (!json_value.as_array().size()==0){
                temp_GRDNOgA=NULL;
            return; }temp_GRDNOgA=(VkPipelineVertexInputStateCreateInfo*)malloc(1*sizeof(VkPipelineVertexInputStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int RFpaRUE=0; RFpaRUE < 1; RFpaRUE++){
            [&](){
            auto& temp=json_value[RFpaRUE].as_object();
            deserialize_struct(temp,temp_GRDNOgA[RFpaRUE]);
            }();
        }
        }();member.pVertexInputState=temp_GRDNOgA;}();
auto& json_value=json["pInputAssemblyState"];
[&](){ VkPipelineInputAssemblyStateCreateInfo* temp_oaVANCx[&](){
            if (!json_value.as_array().size()==0){
                temp_oaVANCx=NULL;
            return; }temp_oaVANCx=(VkPipelineInputAssemblyStateCreateInfo*)malloc(1*sizeof(VkPipelineInputAssemblyStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int LCsVUxO=0; LCsVUxO < 1; LCsVUxO++){
            [&](){
            auto& temp=json_value[LCsVUxO].as_object();
            deserialize_struct(temp,temp_oaVANCx[LCsVUxO]);
            }();
        }
        }();member.pInputAssemblyState=temp_oaVANCx;}();
auto& json_value=json["pTessellationState"];
[&](){ VkPipelineTessellationStateCreateInfo* temp_LTmoKJi[&](){
            if (!json_value.as_array().size()==0){
                temp_LTmoKJi=NULL;
            return; }temp_LTmoKJi=(VkPipelineTessellationStateCreateInfo*)malloc(1*sizeof(VkPipelineTessellationStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int QktcRuM=0; QktcRuM < 1; QktcRuM++){
            [&](){
            auto& temp=json_value[QktcRuM].as_object();
            deserialize_struct(temp,temp_LTmoKJi[QktcRuM]);
            }();
        }
        }();member.pTessellationState=temp_LTmoKJi;}();
auto& json_value=json["pViewportState"];
[&](){ VkPipelineViewportStateCreateInfo* temp_utrxeew[&](){
            if (!json_value.as_array().size()==0){
                temp_utrxeew=NULL;
            return; }temp_utrxeew=(VkPipelineViewportStateCreateInfo*)malloc(1*sizeof(VkPipelineViewportStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int BstHynL=0; BstHynL < 1; BstHynL++){
            [&](){
            auto& temp=json_value[BstHynL].as_object();
            deserialize_struct(temp,temp_utrxeew[BstHynL]);
            }();
        }
        }();member.pViewportState=temp_utrxeew;}();
auto& json_value=json["pRasterizationState"];
[&](){ VkPipelineRasterizationStateCreateInfo* temp_UeVfMZa[&](){
            if (!json_value.as_array().size()==0){
                temp_UeVfMZa=NULL;
            return; }temp_UeVfMZa=(VkPipelineRasterizationStateCreateInfo*)malloc(1*sizeof(VkPipelineRasterizationStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int UrKpYID=0; UrKpYID < 1; UrKpYID++){
            [&](){
            auto& temp=json_value[UrKpYID].as_object();
            deserialize_struct(temp,temp_UeVfMZa[UrKpYID]);
            }();
        }
        }();member.pRasterizationState=temp_UeVfMZa;}();
auto& json_value=json["pMultisampleState"];
[&](){ VkPipelineMultisampleStateCreateInfo* temp_pwIOJfB[&](){
            if (!json_value.as_array().size()==0){
                temp_pwIOJfB=NULL;
            return; }temp_pwIOJfB=(VkPipelineMultisampleStateCreateInfo*)malloc(1*sizeof(VkPipelineMultisampleStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int mkZpyGN=0; mkZpyGN < 1; mkZpyGN++){
            [&](){
            auto& temp=json_value[mkZpyGN].as_object();
            deserialize_struct(temp,temp_pwIOJfB[mkZpyGN]);
            }();
        }
        }();member.pMultisampleState=temp_pwIOJfB;}();
auto& json_value=json["pDepthStencilState"];
[&](){ VkPipelineDepthStencilStateCreateInfo* temp_SgjgObT[&](){
            if (!json_value.as_array().size()==0){
                temp_SgjgObT=NULL;
            return; }temp_SgjgObT=(VkPipelineDepthStencilStateCreateInfo*)malloc(1*sizeof(VkPipelineDepthStencilStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int fcBDTZt=0; fcBDTZt < 1; fcBDTZt++){
            [&](){
            auto& temp=json_value[fcBDTZt].as_object();
            deserialize_struct(temp,temp_SgjgObT[fcBDTZt]);
            }();
        }
        }();member.pDepthStencilState=temp_SgjgObT;}();
auto& json_value=json["pColorBlendState"];
[&](){ VkPipelineColorBlendStateCreateInfo* temp_dPxXxzH[&](){
            if (!json_value.as_array().size()==0){
                temp_dPxXxzH=NULL;
            return; }temp_dPxXxzH=(VkPipelineColorBlendStateCreateInfo*)malloc(1*sizeof(VkPipelineColorBlendStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int imvOMcm=0; imvOMcm < 1; imvOMcm++){
            [&](){
            auto& temp=json_value[imvOMcm].as_object();
            deserialize_struct(temp,temp_dPxXxzH[imvOMcm]);
            }();
        }
        }();member.pColorBlendState=temp_dPxXxzH;}();
auto& json_value=json["pDynamicState"];
[&](){ VkPipelineDynamicStateCreateInfo* temp_aXXcKaH[&](){
            if (!json_value.as_array().size()==0){
                temp_aXXcKaH=NULL;
            return; }temp_aXXcKaH=(VkPipelineDynamicStateCreateInfo*)malloc(1*sizeof(VkPipelineDynamicStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int tTovUVg=0; tTovUVg < 1; tTovUVg++){
            [&](){
            auto& temp=json_value[tTovUVg].as_object();
            deserialize_struct(temp,temp_aXXcKaH[tTovUVg]);
            }();
        }
        }();member.pDynamicState=temp_aXXcKaH;}();
auto& json_value=json["layout"];
[&](){deserialize_handle(json_value, member.layout);}();
auto& json_value=json["renderPass"];
[&](){deserialize_handle(json_value, member.renderPass);}();
auto& json_value=json["subpass"];
[&](){member.subpass=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["basePipelineHandle"];
[&](){deserialize_handle(json_value, member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){member.basePipelineIndex=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkGraphicsPipelineCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGraphicsPipelineCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCacheCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["initialDataSize"];
[&](){json_value=member.initialDataSize;}();
auto& json_value=json["pInitialData"];
[&](){
            if (member.pInitialData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pInitialData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int VgUKinx=0; VgUKinx < member.initialDataSize; VgUKinx++){
            [&](){json_value[VgUKinx]=(char*)(member.pInitialData)[VgUKinx];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkPipelineCacheCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCacheCreateFlags temp_iMMWBNZ[&](){temp_iMMWBNZ=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCacheCreateFlags)temp_iMMWBNZ;}();}();
auto& json_value=json["initialDataSize"];
[&](){member.initialDataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pInitialData"];
[&](){ void* temp_CjhmeWG[&](){
            if (!json_value.as_array().size()==0){
                temp_CjhmeWG=NULL;
            return; }char* temp_IbkKMGY;[&](){
            if (!json_value.as_array().size()==0){
                temp_CjhmeWG=NULL;
            return; }temp_CjhmeWG=(char*)malloc(member.initialDataSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int FUremIn=0; FUremIn < member.initialDataSize; FUremIn++){
            [&](){temp_CjhmeWG[FUremIn]=static_cast<char>(value_to<int>(json_value[FUremIn]));}();
        }
        }();temp_CjhmeWG=temp_IbkKMGY;}();member.pInitialData=temp_CjhmeWG;}();
}

    void serialize_pUserData(object& json, VkPipelineCacheCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCacheCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCacheHeaderVersionOne& member){
        
    
auto& json_value=json["headerSize"];
[&](){json_value=member.headerSize;}();
auto& json_value=json["headerVersion"];
[&](){[&](){[&](){json_value=member.headerVersion;}();}();}();
auto& json_value=json["vendorID"];
[&](){json_value=member.vendorID;}();
auto& json_value=json["deviceID"];
[&](){json_value=member.deviceID;}();
auto& json_value=json["pipelineCacheUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){json_value[pKnzMjr]=member.pipelineCacheUUID[pKnzMjr];}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineCacheHeaderVersionOne& member){
auto& json_value=json["headerSize"];
[&](){member.headerSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["headerVersion"];
[&](){[&](){VkPipelineCacheHeaderVersion temp_LECRlvE[&](){temp_LECRlvE=static_cast<int>(value_to<int>(json_value));}();member.headerVersion=(VkPipelineCacheHeaderVersion)temp_LECRlvE;}();}();
auto& json_value=json["vendorID"];
[&](){member.vendorID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["deviceID"];
[&](){member.deviceID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pipelineCacheUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){member.pipelineCacheUUID[pKnzMjr]=static_cast<uint8_t>(value_to<int>(json_value[pKnzMjr]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPipelineCacheHeaderVersionOne& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCacheHeaderVersionOne& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPushConstantRange& member){
        
    
auto& json_value=json["stageFlags"];
[&](){[&](){[&](){json_value=member.stageFlags;}();}();}();
auto& json_value=json["offset"];
[&](){json_value=member.offset;}();
auto& json_value=json["size"];
[&](){json_value=member.size;}();
}
void deserialize_struct(object& json, VkPushConstantRange& member){
auto& json_value=json["stageFlags"];
[&](){[&](){VkShaderStageFlags temp_cXLFLvA[&](){temp_cXLFLvA=static_cast<int>(value_to<int>(json_value));}();member.stageFlags=(VkShaderStageFlags)temp_cXLFLvA;}();}();
auto& json_value=json["offset"];
[&](){member.offset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["size"];
[&](){member.size=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPushConstantRange& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPushConstantRange& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineLayoutCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["setLayoutCount"];
[&](){json_value=member.setLayoutCount;}();
auto& json_value=json["pSetLayouts"];
[&](){
            if (member.pSetLayouts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int gfILRjy=0; gfILRjy < member.setLayoutCount; gfILRjy++){
            [&](){serialize_handle(json_value[gfILRjy],member.pSetLayouts[gfILRjy]);}();
        }
        }();
auto& json_value=json["pushConstantRangeCount"];
[&](){json_value=member.pushConstantRangeCount;}();
auto& json_value=json["pPushConstantRanges"];
[&](){
            if (member.pPushConstantRanges==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int fStWwBo=0; fStWwBo < member.pushConstantRangeCount; fStWwBo++){
            [&](){
            auto& temp=json_value[fStWwBo].emplace_object();
            return serialize_struct(temp, member.pPushConstantRanges[fStWwBo]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineLayoutCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineLayoutCreateFlags temp_dhIInqj[&](){temp_dhIInqj=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineLayoutCreateFlags)temp_dhIInqj;}();}();
auto& json_value=json["setLayoutCount"];
[&](){member.setLayoutCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSetLayouts"];
[&](){ VkDescriptorSetLayout* temp_IEhvBMI[&](){
            if (!json_value.as_array().size()==0){
                temp_IEhvBMI=NULL;
            return; }temp_IEhvBMI=(VkDescriptorSetLayout*)malloc(member.setLayoutCount*sizeof(VkDescriptorSetLayout));
        auto& arr=json_value.as_array();
        for(int kjCEeqP=0; kjCEeqP < member.setLayoutCount; kjCEeqP++){
            [&](){deserialize_handle(json_value[kjCEeqP], temp_IEhvBMI[kjCEeqP]);}();
        }
        }();member.pSetLayouts=temp_IEhvBMI;}();
auto& json_value=json["pushConstantRangeCount"];
[&](){member.pushConstantRangeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPushConstantRanges"];
[&](){ VkPushConstantRange* temp_gomfdHY[&](){
            if (!json_value.as_array().size()==0){
                temp_gomfdHY=NULL;
            return; }temp_gomfdHY=(VkPushConstantRange*)malloc(member.pushConstantRangeCount*sizeof(VkPushConstantRange));
        auto& arr=json_value.as_array();
        for(int xSoqBwb=0; xSoqBwb < member.pushConstantRangeCount; xSoqBwb++){
            [&](){
            auto& temp=json_value[xSoqBwb].as_object();
            deserialize_struct(temp,temp_gomfdHY[xSoqBwb]);
            }();
        }
        }();member.pPushConstantRanges=temp_gomfdHY;}();
}

    void serialize_pUserData(object& json, VkPipelineLayoutCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineLayoutCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["magFilter"];
[&](){[&](){[&](){json_value=member.magFilter;}();}();}();
auto& json_value=json["minFilter"];
[&](){[&](){[&](){json_value=member.minFilter;}();}();}();
auto& json_value=json["mipmapMode"];
[&](){[&](){[&](){json_value=member.mipmapMode;}();}();}();
auto& json_value=json["addressModeU"];
[&](){[&](){[&](){json_value=member.addressModeU;}();}();}();
auto& json_value=json["addressModeV"];
[&](){[&](){[&](){json_value=member.addressModeV;}();}();}();
auto& json_value=json["addressModeW"];
[&](){[&](){[&](){json_value=member.addressModeW;}();}();}();
auto& json_value=json["mipLodBias"];
[&](){json_value=member.mipLodBias;}();
auto& json_value=json["anisotropyEnable"];
[&](){[&](){json_value=member.anisotropyEnable;}();}();
auto& json_value=json["maxAnisotropy"];
[&](){json_value=member.maxAnisotropy;}();
auto& json_value=json["compareEnable"];
[&](){[&](){json_value=member.compareEnable;}();}();
auto& json_value=json["compareOp"];
[&](){[&](){[&](){json_value=member.compareOp;}();}();}();
auto& json_value=json["minLod"];
[&](){json_value=member.minLod;}();
auto& json_value=json["maxLod"];
[&](){json_value=member.maxLod;}();
auto& json_value=json["borderColor"];
[&](){[&](){[&](){json_value=member.borderColor;}();}();}();
auto& json_value=json["unnormalizedCoordinates"];
[&](){[&](){json_value=member.unnormalizedCoordinates;}();}();
}
void deserialize_struct(object& json, VkSamplerCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkSamplerCreateFlags temp_cxvKibN[&](){temp_cxvKibN=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSamplerCreateFlags)temp_cxvKibN;}();}();
auto& json_value=json["magFilter"];
[&](){[&](){VkFilter temp_TzIcjSQ[&](){temp_TzIcjSQ=static_cast<int>(value_to<int>(json_value));}();member.magFilter=(VkFilter)temp_TzIcjSQ;}();}();
auto& json_value=json["minFilter"];
[&](){[&](){VkFilter temp_GsopAgS[&](){temp_GsopAgS=static_cast<int>(value_to<int>(json_value));}();member.minFilter=(VkFilter)temp_GsopAgS;}();}();
auto& json_value=json["mipmapMode"];
[&](){[&](){VkSamplerMipmapMode temp_dTperYy[&](){temp_dTperYy=static_cast<int>(value_to<int>(json_value));}();member.mipmapMode=(VkSamplerMipmapMode)temp_dTperYy;}();}();
auto& json_value=json["addressModeU"];
[&](){[&](){VkSamplerAddressMode temp_rcpvCZS[&](){temp_rcpvCZS=static_cast<int>(value_to<int>(json_value));}();member.addressModeU=(VkSamplerAddressMode)temp_rcpvCZS;}();}();
auto& json_value=json["addressModeV"];
[&](){[&](){VkSamplerAddressMode temp_jtZcyvJ[&](){temp_jtZcyvJ=static_cast<int>(value_to<int>(json_value));}();member.addressModeV=(VkSamplerAddressMode)temp_jtZcyvJ;}();}();
auto& json_value=json["addressModeW"];
[&](){[&](){VkSamplerAddressMode temp_WtyXEGb[&](){temp_WtyXEGb=static_cast<int>(value_to<int>(json_value));}();member.addressModeW=(VkSamplerAddressMode)temp_WtyXEGb;}();}();
auto& json_value=json["mipLodBias"];
[&](){member.mipLodBias=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["anisotropyEnable"];
[&](){[&](){member.anisotropyEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxAnisotropy"];
[&](){member.maxAnisotropy=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["compareEnable"];
[&](){[&](){member.compareEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["compareOp"];
[&](){[&](){VkCompareOp temp_DObIAPN[&](){temp_DObIAPN=static_cast<int>(value_to<int>(json_value));}();member.compareOp=(VkCompareOp)temp_DObIAPN;}();}();
auto& json_value=json["minLod"];
[&](){member.minLod=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxLod"];
[&](){member.maxLod=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["borderColor"];
[&](){[&](){VkBorderColor temp_UkuqSaB[&](){temp_UkuqSaB=static_cast<int>(value_to<int>(json_value));}();member.borderColor=(VkBorderColor)temp_UkuqSaB;}();}();
auto& json_value=json["unnormalizedCoordinates"];
[&](){[&](){member.unnormalizedCoordinates=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSamplerCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandPoolCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["queueFamilyIndex"];
[&](){json_value=member.queueFamilyIndex;}();
}
void deserialize_struct(object& json, VkCommandPoolCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkCommandPoolCreateFlags temp_zVXnBkG[&](){temp_zVXnBkG=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkCommandPoolCreateFlags)temp_zVXnBkG;}();}();
auto& json_value=json["queueFamilyIndex"];
[&](){member.queueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkCommandPoolCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandPoolCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferAllocateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["commandPool"];
[&](){serialize_handle(json_value,member.commandPool);}();
auto& json_value=json["level"];
[&](){[&](){[&](){json_value=member.level;}();}();}();
auto& json_value=json["commandBufferCount"];
[&](){json_value=member.commandBufferCount;}();
}
void deserialize_struct(object& json, VkCommandBufferAllocateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["commandPool"];
[&](){deserialize_handle(json_value, member.commandPool);}();
auto& json_value=json["level"];
[&](){[&](){VkCommandBufferLevel temp_dqDUfVo[&](){temp_dqDUfVo=static_cast<int>(value_to<int>(json_value));}();member.level=(VkCommandBufferLevel)temp_dqDUfVo;}();}();
auto& json_value=json["commandBufferCount"];
[&](){member.commandBufferCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkCommandBufferAllocateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferAllocateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferInheritanceInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["renderPass"];
[&](){serialize_handle(json_value,member.renderPass);}();
auto& json_value=json["subpass"];
[&](){json_value=member.subpass;}();
auto& json_value=json["framebuffer"];
[&](){serialize_handle(json_value,member.framebuffer);}();
auto& json_value=json["occlusionQueryEnable"];
[&](){[&](){json_value=member.occlusionQueryEnable;}();}();
auto& json_value=json["queryFlags"];
[&](){[&](){[&](){json_value=member.queryFlags;}();}();}();
auto& json_value=json["pipelineStatistics"];
[&](){[&](){[&](){json_value=member.pipelineStatistics;}();}();}();
}
void deserialize_struct(object& json, VkCommandBufferInheritanceInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["renderPass"];
[&](){deserialize_handle(json_value, member.renderPass);}();
auto& json_value=json["subpass"];
[&](){member.subpass=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["framebuffer"];
[&](){deserialize_handle(json_value, member.framebuffer);}();
auto& json_value=json["occlusionQueryEnable"];
[&](){[&](){member.occlusionQueryEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["queryFlags"];
[&](){[&](){VkQueryControlFlags temp_KYaVZvR[&](){temp_KYaVZvR=static_cast<int>(value_to<int>(json_value));}();member.queryFlags=(VkQueryControlFlags)temp_KYaVZvR;}();}();
auto& json_value=json["pipelineStatistics"];
[&](){[&](){VkQueryPipelineStatisticFlags temp_siYnvrj[&](){temp_siYnvrj=static_cast<int>(value_to<int>(json_value));}();member.pipelineStatistics=(VkQueryPipelineStatisticFlags)temp_siYnvrj;}();}();
}

    void serialize_pUserData(object& json, VkCommandBufferInheritanceInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferInheritanceInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferBeginInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pInheritanceInfo"];
[&](){
            if (member.pInheritanceInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int nFDfwwm=0; nFDfwwm < 1; nFDfwwm++){
            [&](){
            auto& temp=json_value[nFDfwwm].emplace_object();
            return serialize_struct(temp, member.pInheritanceInfo[nFDfwwm]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCommandBufferBeginInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkCommandBufferUsageFlags temp_pZftoVo[&](){temp_pZftoVo=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkCommandBufferUsageFlags)temp_pZftoVo;}();}();
auto& json_value=json["pInheritanceInfo"];
[&](){ VkCommandBufferInheritanceInfo* temp_RaTTAdf[&](){
            if (!json_value.as_array().size()==0){
                temp_RaTTAdf=NULL;
            return; }temp_RaTTAdf=(VkCommandBufferInheritanceInfo*)malloc(1*sizeof(VkCommandBufferInheritanceInfo));
        auto& arr=json_value.as_array();
        for(int bbedYXd=0; bbedYXd < 1; bbedYXd++){
            [&](){
            auto& temp=json_value[bbedYXd].as_object();
            deserialize_struct(temp,temp_RaTTAdf[bbedYXd]);
            }();
        }
        }();member.pInheritanceInfo=temp_RaTTAdf;}();
}

    void serialize_pUserData(object& json, VkCommandBufferBeginInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferBeginInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassBeginInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["renderPass"];
[&](){serialize_handle(json_value,member.renderPass);}();
auto& json_value=json["framebuffer"];
[&](){serialize_handle(json_value,member.framebuffer);}();
auto& json_value=json["renderArea"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.renderArea);
            }();
auto& json_value=json["clearValueCount"];
[&](){json_value=member.clearValueCount;}();
auto& json_value=json["pClearValues"];
[&](){
            if (member.pClearValues==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int qjoeTNt=0; qjoeTNt < member.clearValueCount; qjoeTNt++){
            [&](){
            auto& temp=json_value[qjoeTNt].emplace_object();
            return serialize_struct(temp, member.pClearValues[qjoeTNt]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassBeginInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["renderPass"];
[&](){deserialize_handle(json_value, member.renderPass);}();
auto& json_value=json["framebuffer"];
[&](){deserialize_handle(json_value, member.framebuffer);}();
auto& json_value=json["renderArea"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.renderArea);
            }();
auto& json_value=json["clearValueCount"];
[&](){member.clearValueCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pClearValues"];
[&](){ VkClearValue* temp_lODYZTU[&](){
            if (!json_value.as_array().size()==0){
                temp_lODYZTU=NULL;
            return; }temp_lODYZTU=(VkClearValue*)malloc(member.clearValueCount*sizeof(VkClearValue));
        auto& arr=json_value.as_array();
        for(int rHsxouv=0; rHsxouv < member.clearValueCount; rHsxouv++){
            [&](){
            auto& temp=json_value[rHsxouv].as_object();
            deserialize_struct(temp,temp_lODYZTU[rHsxouv]);
            }();
        }
        }();member.pClearValues=temp_lODYZTU;}();
}

    void serialize_pUserData(object& json, VkRenderPassBeginInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassBeginInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkClearColorValue& member){
        
    
auto& json_value=json["float32"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int kwfNrBt=0; kwfNrBt < 4; kwfNrBt++){
            [&](){json_value[kwfNrBt]=member.float32[kwfNrBt];}();
        }
        }();
auto& json_value=json["int32"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int JWnmMeC=0; JWnmMeC < 4; JWnmMeC++){
            [&](){json_value[JWnmMeC]=member.int32[JWnmMeC];}();
        }
        }();
auto& json_value=json["uint32"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int vckpinK=0; vckpinK < 4; vckpinK++){
            [&](){json_value[vckpinK]=member.uint32[vckpinK];}();
        }
        }();
}
void deserialize_struct(object& json, VkClearColorValue& member){
auto& json_value=json["float32"];
[&](){
        auto& arr=json_value.as_array();
        for(int kwfNrBt=0; kwfNrBt < 4; kwfNrBt++){
            [&](){member.float32[kwfNrBt]=static_cast<float>(value_to<int>(json_value[kwfNrBt]));}();
        }
        }();
auto& json_value=json["int32"];
[&](){
        auto& arr=json_value.as_array();
        for(int JWnmMeC=0; JWnmMeC < 4; JWnmMeC++){
            [&](){member.int32[JWnmMeC]=static_cast<int32_t>(value_to<int>(json_value[JWnmMeC]));}();
        }
        }();
auto& json_value=json["uint32"];
[&](){
        auto& arr=json_value.as_array();
        for(int vckpinK=0; vckpinK < 4; vckpinK++){
            [&](){member.uint32[vckpinK]=static_cast<uint32_t>(value_to<int>(json_value[vckpinK]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkClearColorValue& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkClearColorValue& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkClearDepthStencilValue& member){
        
    
auto& json_value=json["depth"];
[&](){json_value=member.depth;}();
auto& json_value=json["stencil"];
[&](){json_value=member.stencil;}();
}
void deserialize_struct(object& json, VkClearDepthStencilValue& member){
auto& json_value=json["depth"];
[&](){member.depth=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["stencil"];
[&](){member.stencil=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkClearDepthStencilValue& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkClearDepthStencilValue& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkClearValue& member){
        
    
auto& json_value=json["color"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.color);
            }();
auto& json_value=json["depthStencil"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.depthStencil);
            }();
}
void deserialize_struct(object& json, VkClearValue& member){
auto& json_value=json["color"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.color);
            }();
auto& json_value=json["depthStencil"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.depthStencil);
            }();
}

    void serialize_pUserData(object& json, VkClearValue& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkClearValue& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkClearAttachment& member){
        
    
auto& json_value=json["aspectMask"];
[&](){[&](){[&](){json_value=member.aspectMask;}();}();}();
auto& json_value=json["colorAttachment"];
[&](){json_value=member.colorAttachment;}();
auto& json_value=json["clearValue"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.clearValue);
            }();
}
void deserialize_struct(object& json, VkClearAttachment& member){
auto& json_value=json["aspectMask"];
[&](){[&](){VkImageAspectFlags temp_JsnReia[&](){temp_JsnReia=static_cast<int>(value_to<int>(json_value));}();member.aspectMask=(VkImageAspectFlags)temp_JsnReia;}();}();
auto& json_value=json["colorAttachment"];
[&](){member.colorAttachment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["clearValue"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.clearValue);
            }();
}

    void serialize_pUserData(object& json, VkClearAttachment& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkClearAttachment& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentDescription& member){
        
    
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["samples"];
[&](){[&](){[&](){json_value=member.samples;}();}();}();
auto& json_value=json["loadOp"];
[&](){[&](){[&](){json_value=member.loadOp;}();}();}();
auto& json_value=json["storeOp"];
[&](){[&](){[&](){json_value=member.storeOp;}();}();}();
auto& json_value=json["stencilLoadOp"];
[&](){[&](){[&](){json_value=member.stencilLoadOp;}();}();}();
auto& json_value=json["stencilStoreOp"];
[&](){[&](){[&](){json_value=member.stencilStoreOp;}();}();}();
auto& json_value=json["initialLayout"];
[&](){[&](){[&](){json_value=member.initialLayout;}();}();}();
auto& json_value=json["finalLayout"];
[&](){[&](){[&](){json_value=member.finalLayout;}();}();}();
}
void deserialize_struct(object& json, VkAttachmentDescription& member){
auto& json_value=json["flags"];
[&](){[&](){VkAttachmentDescriptionFlags temp_CYMEsuB[&](){temp_CYMEsuB=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkAttachmentDescriptionFlags)temp_CYMEsuB;}();}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["samples"];
[&](){[&](){VkSampleCountFlagBits temp_sbydRzr[&](){temp_sbydRzr=static_cast<int>(value_to<int>(json_value));}();member.samples=(VkSampleCountFlagBits)temp_sbydRzr;}();}();
auto& json_value=json["loadOp"];
[&](){[&](){VkAttachmentLoadOp temp_TtemVoJ[&](){temp_TtemVoJ=static_cast<int>(value_to<int>(json_value));}();member.loadOp=(VkAttachmentLoadOp)temp_TtemVoJ;}();}();
auto& json_value=json["storeOp"];
[&](){[&](){VkAttachmentStoreOp temp_xPHHoES[&](){temp_xPHHoES=static_cast<int>(value_to<int>(json_value));}();member.storeOp=(VkAttachmentStoreOp)temp_xPHHoES;}();}();
auto& json_value=json["stencilLoadOp"];
[&](){[&](){VkAttachmentLoadOp temp_KsCgdHP[&](){temp_KsCgdHP=static_cast<int>(value_to<int>(json_value));}();member.stencilLoadOp=(VkAttachmentLoadOp)temp_KsCgdHP;}();}();
auto& json_value=json["stencilStoreOp"];
[&](){[&](){VkAttachmentStoreOp temp_xiINqWK[&](){temp_xiINqWK=static_cast<int>(value_to<int>(json_value));}();member.stencilStoreOp=(VkAttachmentStoreOp)temp_xiINqWK;}();}();
auto& json_value=json["initialLayout"];
[&](){[&](){VkImageLayout temp_FbubONM[&](){temp_FbubONM=static_cast<int>(value_to<int>(json_value));}();member.initialLayout=(VkImageLayout)temp_FbubONM;}();}();
auto& json_value=json["finalLayout"];
[&](){[&](){VkImageLayout temp_msqBOhB[&](){temp_msqBOhB=static_cast<int>(value_to<int>(json_value));}();member.finalLayout=(VkImageLayout)temp_msqBOhB;}();}();
}

    void serialize_pUserData(object& json, VkAttachmentDescription& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentDescription& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentReference& member){
        
    
auto& json_value=json["attachment"];
[&](){json_value=member.attachment;}();
auto& json_value=json["layout"];
[&](){[&](){[&](){json_value=member.layout;}();}();}();
}
void deserialize_struct(object& json, VkAttachmentReference& member){
auto& json_value=json["attachment"];
[&](){member.attachment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layout"];
[&](){[&](){VkImageLayout temp_UhZVkLY[&](){temp_UhZVkLY=static_cast<int>(value_to<int>(json_value));}();member.layout=(VkImageLayout)temp_UhZVkLY;}();}();
}

    void serialize_pUserData(object& json, VkAttachmentReference& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentReference& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassDescription& member){
        
    
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){[&](){json_value=member.pipelineBindPoint;}();}();}();
auto& json_value=json["inputAttachmentCount"];
[&](){json_value=member.inputAttachmentCount;}();
auto& json_value=json["pInputAttachments"];
[&](){
            if (member.pInputAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lYXnngK=0; lYXnngK < member.inputAttachmentCount; lYXnngK++){
            [&](){
            auto& temp=json_value[lYXnngK].emplace_object();
            return serialize_struct(temp, member.pInputAttachments[lYXnngK]);
            }();
        }
        }();
auto& json_value=json["colorAttachmentCount"];
[&](){json_value=member.colorAttachmentCount;}();
auto& json_value=json["pColorAttachments"];
[&](){
            if (member.pColorAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int oXMIDJx=0; oXMIDJx < member.colorAttachmentCount; oXMIDJx++){
            [&](){
            auto& temp=json_value[oXMIDJx].emplace_object();
            return serialize_struct(temp, member.pColorAttachments[oXMIDJx]);
            }();
        }
        }();
auto& json_value=json["pResolveAttachments"];
[&](){
            if (member.pResolveAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KAJKvdn=0; KAJKvdn < member.colorAttachmentCount; KAJKvdn++){
            [&](){
            auto& temp=json_value[KAJKvdn].emplace_object();
            return serialize_struct(temp, member.pResolveAttachments[KAJKvdn]);
            }();
        }
        }();
auto& json_value=json["pDepthStencilAttachment"];
[&](){
            if (member.pDepthStencilAttachment==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int FMSqhkQ=0; FMSqhkQ < 1; FMSqhkQ++){
            [&](){
            auto& temp=json_value[FMSqhkQ].emplace_object();
            return serialize_struct(temp, member.pDepthStencilAttachment[FMSqhkQ]);
            }();
        }
        }();
auto& json_value=json["preserveAttachmentCount"];
[&](){json_value=member.preserveAttachmentCount;}();
auto& json_value=json["pPreserveAttachments"];
[&](){
            if (member.pPreserveAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int OunTLoO=0; OunTLoO < member.preserveAttachmentCount; OunTLoO++){
            [&](){json_value[OunTLoO]=member.pPreserveAttachments[OunTLoO];}();
        }
        }();
}
void deserialize_struct(object& json, VkSubpassDescription& member){
auto& json_value=json["flags"];
[&](){[&](){VkSubpassDescriptionFlags temp_dJMRWUT[&](){temp_dJMRWUT=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSubpassDescriptionFlags)temp_dJMRWUT;}();}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){VkPipelineBindPoint temp_fyjKPoR[&](){temp_fyjKPoR=static_cast<int>(value_to<int>(json_value));}();member.pipelineBindPoint=(VkPipelineBindPoint)temp_fyjKPoR;}();}();
auto& json_value=json["inputAttachmentCount"];
[&](){member.inputAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pInputAttachments"];
[&](){ VkAttachmentReference* temp_sUMneuT[&](){
            if (!json_value.as_array().size()==0){
                temp_sUMneuT=NULL;
            return; }temp_sUMneuT=(VkAttachmentReference*)malloc(member.inputAttachmentCount*sizeof(VkAttachmentReference));
        auto& arr=json_value.as_array();
        for(int NTiwIDl=0; NTiwIDl < member.inputAttachmentCount; NTiwIDl++){
            [&](){
            auto& temp=json_value[NTiwIDl].as_object();
            deserialize_struct(temp,temp_sUMneuT[NTiwIDl]);
            }();
        }
        }();member.pInputAttachments=temp_sUMneuT;}();
auto& json_value=json["colorAttachmentCount"];
[&](){member.colorAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorAttachments"];
[&](){ VkAttachmentReference* temp_qNLhWCX[&](){
            if (!json_value.as_array().size()==0){
                temp_qNLhWCX=NULL;
            return; }temp_qNLhWCX=(VkAttachmentReference*)malloc(member.colorAttachmentCount*sizeof(VkAttachmentReference));
        auto& arr=json_value.as_array();
        for(int PRkPOeb=0; PRkPOeb < member.colorAttachmentCount; PRkPOeb++){
            [&](){
            auto& temp=json_value[PRkPOeb].as_object();
            deserialize_struct(temp,temp_qNLhWCX[PRkPOeb]);
            }();
        }
        }();member.pColorAttachments=temp_qNLhWCX;}();
auto& json_value=json["pResolveAttachments"];
[&](){ VkAttachmentReference* temp_vimrqmz[&](){
            if (!json_value.as_array().size()==0){
                temp_vimrqmz=NULL;
            return; }temp_vimrqmz=(VkAttachmentReference*)malloc(member.colorAttachmentCount*sizeof(VkAttachmentReference));
        auto& arr=json_value.as_array();
        for(int OMbGyuZ=0; OMbGyuZ < member.colorAttachmentCount; OMbGyuZ++){
            [&](){
            auto& temp=json_value[OMbGyuZ].as_object();
            deserialize_struct(temp,temp_vimrqmz[OMbGyuZ]);
            }();
        }
        }();member.pResolveAttachments=temp_vimrqmz;}();
auto& json_value=json["pDepthStencilAttachment"];
[&](){ VkAttachmentReference* temp_qvfNzlt[&](){
            if (!json_value.as_array().size()==0){
                temp_qvfNzlt=NULL;
            return; }temp_qvfNzlt=(VkAttachmentReference*)malloc(1*sizeof(VkAttachmentReference));
        auto& arr=json_value.as_array();
        for(int WEtsSUr=0; WEtsSUr < 1; WEtsSUr++){
            [&](){
            auto& temp=json_value[WEtsSUr].as_object();
            deserialize_struct(temp,temp_qvfNzlt[WEtsSUr]);
            }();
        }
        }();member.pDepthStencilAttachment=temp_qvfNzlt;}();
auto& json_value=json["preserveAttachmentCount"];
[&](){member.preserveAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPreserveAttachments"];
[&](){ uint32_t* temp_joOyYDL[&](){
            if (!json_value.as_array().size()==0){
                temp_joOyYDL=NULL;
            return; }temp_joOyYDL=(uint32_t*)malloc(member.preserveAttachmentCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int Ucaahng=0; Ucaahng < member.preserveAttachmentCount; Ucaahng++){
            [&](){temp_joOyYDL[Ucaahng]=static_cast<uint32_t>(value_to<int>(json_value[Ucaahng]));}();
        }
        }();member.pPreserveAttachments=temp_joOyYDL;}();
}

    void serialize_pUserData(object& json, VkSubpassDescription& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassDescription& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassDependency& member){
        
    
auto& json_value=json["srcSubpass"];
[&](){json_value=member.srcSubpass;}();
auto& json_value=json["dstSubpass"];
[&](){json_value=member.dstSubpass;}();
auto& json_value=json["srcStageMask"];
[&](){[&](){[&](){json_value=member.srcStageMask;}();}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){[&](){json_value=member.dstStageMask;}();}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
auto& json_value=json["dependencyFlags"];
[&](){[&](){[&](){json_value=member.dependencyFlags;}();}();}();
}
void deserialize_struct(object& json, VkSubpassDependency& member){
auto& json_value=json["srcSubpass"];
[&](){member.srcSubpass=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstSubpass"];
[&](){member.dstSubpass=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["srcStageMask"];
[&](){[&](){VkPipelineStageFlags temp_twQjTZU[&](){temp_twQjTZU=static_cast<int>(value_to<int>(json_value));}();member.srcStageMask=(VkPipelineStageFlags)temp_twQjTZU;}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){VkPipelineStageFlags temp_zApvRtM[&](){temp_zApvRtM=static_cast<int>(value_to<int>(json_value));}();member.dstStageMask=(VkPipelineStageFlags)temp_zApvRtM;}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags temp_iFaYQjj[&](){temp_iFaYQjj=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags)temp_iFaYQjj;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags temp_miAPAJe[&](){temp_miAPAJe=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags)temp_miAPAJe;}();}();
auto& json_value=json["dependencyFlags"];
[&](){[&](){VkDependencyFlags temp_SXdBMBy[&](){temp_SXdBMBy=static_cast<int>(value_to<int>(json_value));}();member.dependencyFlags=(VkDependencyFlags)temp_SXdBMBy;}();}();
}

    void serialize_pUserData(object& json, VkSubpassDependency& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassDependency& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["attachmentCount"];
[&](){json_value=member.attachmentCount;}();
auto& json_value=json["pAttachments"];
[&](){
            if (member.pAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rqvexer=0; rqvexer < member.attachmentCount; rqvexer++){
            [&](){
            auto& temp=json_value[rqvexer].emplace_object();
            return serialize_struct(temp, member.pAttachments[rqvexer]);
            }();
        }
        }();
auto& json_value=json["subpassCount"];
[&](){json_value=member.subpassCount;}();
auto& json_value=json["pSubpasses"];
[&](){
            if (member.pSubpasses==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lBvQvxn=0; lBvQvxn < member.subpassCount; lBvQvxn++){
            [&](){
            auto& temp=json_value[lBvQvxn].emplace_object();
            return serialize_struct(temp, member.pSubpasses[lBvQvxn]);
            }();
        }
        }();
auto& json_value=json["dependencyCount"];
[&](){json_value=member.dependencyCount;}();
auto& json_value=json["pDependencies"];
[&](){
            if (member.pDependencies==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int HytQjIJ=0; HytQjIJ < member.dependencyCount; HytQjIJ++){
            [&](){
            auto& temp=json_value[HytQjIJ].emplace_object();
            return serialize_struct(temp, member.pDependencies[HytQjIJ]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkRenderPassCreateFlags temp_KylrGkp[&](){temp_KylrGkp=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkRenderPassCreateFlags)temp_KylrGkp;}();}();
auto& json_value=json["attachmentCount"];
[&](){member.attachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAttachments"];
[&](){ VkAttachmentDescription* temp_cTVFzqF[&](){
            if (!json_value.as_array().size()==0){
                temp_cTVFzqF=NULL;
            return; }temp_cTVFzqF=(VkAttachmentDescription*)malloc(member.attachmentCount*sizeof(VkAttachmentDescription));
        auto& arr=json_value.as_array();
        for(int LpvwhqR=0; LpvwhqR < member.attachmentCount; LpvwhqR++){
            [&](){
            auto& temp=json_value[LpvwhqR].as_object();
            deserialize_struct(temp,temp_cTVFzqF[LpvwhqR]);
            }();
        }
        }();member.pAttachments=temp_cTVFzqF;}();
auto& json_value=json["subpassCount"];
[&](){member.subpassCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSubpasses"];
[&](){ VkSubpassDescription* temp_PdULGrz[&](){
            if (!json_value.as_array().size()==0){
                temp_PdULGrz=NULL;
            return; }temp_PdULGrz=(VkSubpassDescription*)malloc(member.subpassCount*sizeof(VkSubpassDescription));
        auto& arr=json_value.as_array();
        for(int QKYCKrd=0; QKYCKrd < member.subpassCount; QKYCKrd++){
            [&](){
            auto& temp=json_value[QKYCKrd].as_object();
            deserialize_struct(temp,temp_PdULGrz[QKYCKrd]);
            }();
        }
        }();member.pSubpasses=temp_PdULGrz;}();
auto& json_value=json["dependencyCount"];
[&](){member.dependencyCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDependencies"];
[&](){ VkSubpassDependency* temp_WDCqPHw[&](){
            if (!json_value.as_array().size()==0){
                temp_WDCqPHw=NULL;
            return; }temp_WDCqPHw=(VkSubpassDependency*)malloc(member.dependencyCount*sizeof(VkSubpassDependency));
        auto& arr=json_value.as_array();
        for(int ABYVeAV=0; ABYVeAV < member.dependencyCount; ABYVeAV++){
            [&](){
            auto& temp=json_value[ABYVeAV].as_object();
            deserialize_struct(temp,temp_WDCqPHw[ABYVeAV]);
            }();
        }
        }();member.pDependencies=temp_WDCqPHw;}();
}

    void serialize_pUserData(object& json, VkRenderPassCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkEventCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkEventCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkEventCreateFlags temp_fBBkQuk[&](){temp_fBBkQuk=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkEventCreateFlags)temp_fBBkQuk;}();}();
}

    void serialize_pUserData(object& json, VkEventCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkEventCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFenceCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkFenceCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkFenceCreateFlags temp_kppGHME[&](){temp_kppGHME=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkFenceCreateFlags)temp_kppGHME;}();}();
}

    void serialize_pUserData(object& json, VkFenceCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFenceCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFeatures& member){
        
    
auto& json_value=json["robustBufferAccess"];
[&](){[&](){json_value=member.robustBufferAccess;}();}();
auto& json_value=json["fullDrawIndexUint32"];
[&](){[&](){json_value=member.fullDrawIndexUint32;}();}();
auto& json_value=json["imageCubeArray"];
[&](){[&](){json_value=member.imageCubeArray;}();}();
auto& json_value=json["independentBlend"];
[&](){[&](){json_value=member.independentBlend;}();}();
auto& json_value=json["geometryShader"];
[&](){[&](){json_value=member.geometryShader;}();}();
auto& json_value=json["tessellationShader"];
[&](){[&](){json_value=member.tessellationShader;}();}();
auto& json_value=json["sampleRateShading"];
[&](){[&](){json_value=member.sampleRateShading;}();}();
auto& json_value=json["dualSrcBlend"];
[&](){[&](){json_value=member.dualSrcBlend;}();}();
auto& json_value=json["logicOp"];
[&](){[&](){json_value=member.logicOp;}();}();
auto& json_value=json["multiDrawIndirect"];
[&](){[&](){json_value=member.multiDrawIndirect;}();}();
auto& json_value=json["drawIndirectFirstInstance"];
[&](){[&](){json_value=member.drawIndirectFirstInstance;}();}();
auto& json_value=json["depthClamp"];
[&](){[&](){json_value=member.depthClamp;}();}();
auto& json_value=json["depthBiasClamp"];
[&](){[&](){json_value=member.depthBiasClamp;}();}();
auto& json_value=json["fillModeNonSolid"];
[&](){[&](){json_value=member.fillModeNonSolid;}();}();
auto& json_value=json["depthBounds"];
[&](){[&](){json_value=member.depthBounds;}();}();
auto& json_value=json["wideLines"];
[&](){[&](){json_value=member.wideLines;}();}();
auto& json_value=json["largePoints"];
[&](){[&](){json_value=member.largePoints;}();}();
auto& json_value=json["alphaToOne"];
[&](){[&](){json_value=member.alphaToOne;}();}();
auto& json_value=json["multiViewport"];
[&](){[&](){json_value=member.multiViewport;}();}();
auto& json_value=json["samplerAnisotropy"];
[&](){[&](){json_value=member.samplerAnisotropy;}();}();
auto& json_value=json["textureCompressionETC2"];
[&](){[&](){json_value=member.textureCompressionETC2;}();}();
auto& json_value=json["textureCompressionASTC_LDR"];
[&](){[&](){json_value=member.textureCompressionASTC_LDR;}();}();
auto& json_value=json["textureCompressionBC"];
[&](){[&](){json_value=member.textureCompressionBC;}();}();
auto& json_value=json["occlusionQueryPrecise"];
[&](){[&](){json_value=member.occlusionQueryPrecise;}();}();
auto& json_value=json["pipelineStatisticsQuery"];
[&](){[&](){json_value=member.pipelineStatisticsQuery;}();}();
auto& json_value=json["vertexPipelineStoresAndAtomics"];
[&](){[&](){json_value=member.vertexPipelineStoresAndAtomics;}();}();
auto& json_value=json["fragmentStoresAndAtomics"];
[&](){[&](){json_value=member.fragmentStoresAndAtomics;}();}();
auto& json_value=json["shaderTessellationAndGeometryPointSize"];
[&](){[&](){json_value=member.shaderTessellationAndGeometryPointSize;}();}();
auto& json_value=json["shaderImageGatherExtended"];
[&](){[&](){json_value=member.shaderImageGatherExtended;}();}();
auto& json_value=json["shaderStorageImageExtendedFormats"];
[&](){[&](){json_value=member.shaderStorageImageExtendedFormats;}();}();
auto& json_value=json["shaderStorageImageMultisample"];
[&](){[&](){json_value=member.shaderStorageImageMultisample;}();}();
auto& json_value=json["shaderStorageImageReadWithoutFormat"];
[&](){[&](){json_value=member.shaderStorageImageReadWithoutFormat;}();}();
auto& json_value=json["shaderStorageImageWriteWithoutFormat"];
[&](){[&](){json_value=member.shaderStorageImageWriteWithoutFormat;}();}();
auto& json_value=json["shaderUniformBufferArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderUniformBufferArrayDynamicIndexing;}();}();
auto& json_value=json["shaderSampledImageArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderSampledImageArrayDynamicIndexing;}();}();
auto& json_value=json["shaderStorageBufferArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderStorageBufferArrayDynamicIndexing;}();}();
auto& json_value=json["shaderStorageImageArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderStorageImageArrayDynamicIndexing;}();}();
auto& json_value=json["shaderClipDistance"];
[&](){[&](){json_value=member.shaderClipDistance;}();}();
auto& json_value=json["shaderCullDistance"];
[&](){[&](){json_value=member.shaderCullDistance;}();}();
auto& json_value=json["shaderFloat64"];
[&](){[&](){json_value=member.shaderFloat64;}();}();
auto& json_value=json["shaderInt64"];
[&](){[&](){json_value=member.shaderInt64;}();}();
auto& json_value=json["shaderInt16"];
[&](){[&](){json_value=member.shaderInt16;}();}();
auto& json_value=json["shaderResourceResidency"];
[&](){[&](){json_value=member.shaderResourceResidency;}();}();
auto& json_value=json["shaderResourceMinLod"];
[&](){[&](){json_value=member.shaderResourceMinLod;}();}();
auto& json_value=json["sparseBinding"];
[&](){[&](){json_value=member.sparseBinding;}();}();
auto& json_value=json["sparseResidencyBuffer"];
[&](){[&](){json_value=member.sparseResidencyBuffer;}();}();
auto& json_value=json["sparseResidencyImage2D"];
[&](){[&](){json_value=member.sparseResidencyImage2D;}();}();
auto& json_value=json["sparseResidencyImage3D"];
[&](){[&](){json_value=member.sparseResidencyImage3D;}();}();
auto& json_value=json["sparseResidency2Samples"];
[&](){[&](){json_value=member.sparseResidency2Samples;}();}();
auto& json_value=json["sparseResidency4Samples"];
[&](){[&](){json_value=member.sparseResidency4Samples;}();}();
auto& json_value=json["sparseResidency8Samples"];
[&](){[&](){json_value=member.sparseResidency8Samples;}();}();
auto& json_value=json["sparseResidency16Samples"];
[&](){[&](){json_value=member.sparseResidency16Samples;}();}();
auto& json_value=json["sparseResidencyAliased"];
[&](){[&](){json_value=member.sparseResidencyAliased;}();}();
auto& json_value=json["variableMultisampleRate"];
[&](){[&](){json_value=member.variableMultisampleRate;}();}();
auto& json_value=json["inheritedQueries"];
[&](){[&](){json_value=member.inheritedQueries;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFeatures& member){
auto& json_value=json["robustBufferAccess"];
[&](){[&](){member.robustBufferAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fullDrawIndexUint32"];
[&](){[&](){member.fullDrawIndexUint32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["imageCubeArray"];
[&](){[&](){member.imageCubeArray=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["independentBlend"];
[&](){[&](){member.independentBlend=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["geometryShader"];
[&](){[&](){member.geometryShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["tessellationShader"];
[&](){[&](){member.tessellationShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sampleRateShading"];
[&](){[&](){member.sampleRateShading=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dualSrcBlend"];
[&](){[&](){member.dualSrcBlend=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["logicOp"];
[&](){[&](){member.logicOp=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiDrawIndirect"];
[&](){[&](){member.multiDrawIndirect=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["drawIndirectFirstInstance"];
[&](){[&](){member.drawIndirectFirstInstance=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthClamp"];
[&](){[&](){member.depthClamp=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthBiasClamp"];
[&](){[&](){member.depthBiasClamp=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fillModeNonSolid"];
[&](){[&](){member.fillModeNonSolid=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthBounds"];
[&](){[&](){member.depthBounds=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["wideLines"];
[&](){[&](){member.wideLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["largePoints"];
[&](){[&](){member.largePoints=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["alphaToOne"];
[&](){[&](){member.alphaToOne=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiViewport"];
[&](){[&](){member.multiViewport=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["samplerAnisotropy"];
[&](){[&](){member.samplerAnisotropy=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["textureCompressionETC2"];
[&](){[&](){member.textureCompressionETC2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["textureCompressionASTC_LDR"];
[&](){[&](){member.textureCompressionASTC_LDR=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["textureCompressionBC"];
[&](){[&](){member.textureCompressionBC=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["occlusionQueryPrecise"];
[&](){[&](){member.occlusionQueryPrecise=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["pipelineStatisticsQuery"];
[&](){[&](){member.pipelineStatisticsQuery=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vertexPipelineStoresAndAtomics"];
[&](){[&](){member.vertexPipelineStoresAndAtomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentStoresAndAtomics"];
[&](){[&](){member.fragmentStoresAndAtomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderTessellationAndGeometryPointSize"];
[&](){[&](){member.shaderTessellationAndGeometryPointSize=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderImageGatherExtended"];
[&](){[&](){member.shaderImageGatherExtended=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageExtendedFormats"];
[&](){[&](){member.shaderStorageImageExtendedFormats=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageMultisample"];
[&](){[&](){member.shaderStorageImageMultisample=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageReadWithoutFormat"];
[&](){[&](){member.shaderStorageImageReadWithoutFormat=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageWriteWithoutFormat"];
[&](){[&](){member.shaderStorageImageWriteWithoutFormat=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderUniformBufferArrayDynamicIndexing"];
[&](){[&](){member.shaderUniformBufferArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSampledImageArrayDynamicIndexing"];
[&](){[&](){member.shaderSampledImageArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageBufferArrayDynamicIndexing"];
[&](){[&](){member.shaderStorageBufferArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageArrayDynamicIndexing"];
[&](){[&](){member.shaderStorageImageArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderClipDistance"];
[&](){[&](){member.shaderClipDistance=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderCullDistance"];
[&](){[&](){member.shaderCullDistance=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderFloat64"];
[&](){[&](){member.shaderFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInt64"];
[&](){[&](){member.shaderInt64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInt16"];
[&](){[&](){member.shaderInt16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderResourceResidency"];
[&](){[&](){member.shaderResourceResidency=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderResourceMinLod"];
[&](){[&](){member.shaderResourceMinLod=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseBinding"];
[&](){[&](){member.sparseBinding=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidencyBuffer"];
[&](){[&](){member.sparseResidencyBuffer=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidencyImage2D"];
[&](){[&](){member.sparseResidencyImage2D=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidencyImage3D"];
[&](){[&](){member.sparseResidencyImage3D=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidency2Samples"];
[&](){[&](){member.sparseResidency2Samples=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidency4Samples"];
[&](){[&](){member.sparseResidency4Samples=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidency8Samples"];
[&](){[&](){member.sparseResidency8Samples=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidency16Samples"];
[&](){[&](){member.sparseResidency16Samples=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseResidencyAliased"];
[&](){[&](){member.sparseResidencyAliased=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["variableMultisampleRate"];
[&](){[&](){member.variableMultisampleRate=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["inheritedQueries"];
[&](){[&](){member.inheritedQueries=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSparseProperties& member){
        
    
auto& json_value=json["residencyStandard2DBlockShape"];
[&](){[&](){json_value=member.residencyStandard2DBlockShape;}();}();
auto& json_value=json["residencyStandard2DMultisampleBlockShape"];
[&](){[&](){json_value=member.residencyStandard2DMultisampleBlockShape;}();}();
auto& json_value=json["residencyStandard3DBlockShape"];
[&](){[&](){json_value=member.residencyStandard3DBlockShape;}();}();
auto& json_value=json["residencyAlignedMipSize"];
[&](){[&](){json_value=member.residencyAlignedMipSize;}();}();
auto& json_value=json["residencyNonResidentStrict"];
[&](){[&](){json_value=member.residencyNonResidentStrict;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSparseProperties& member){
auto& json_value=json["residencyStandard2DBlockShape"];
[&](){[&](){member.residencyStandard2DBlockShape=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["residencyStandard2DMultisampleBlockShape"];
[&](){[&](){member.residencyStandard2DMultisampleBlockShape=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["residencyStandard3DBlockShape"];
[&](){[&](){member.residencyStandard3DBlockShape=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["residencyAlignedMipSize"];
[&](){[&](){member.residencyAlignedMipSize=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["residencyNonResidentStrict"];
[&](){[&](){member.residencyNonResidentStrict=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSparseProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSparseProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceLimits& member){
        
    
auto& json_value=json["maxImageDimension1D"];
[&](){json_value=member.maxImageDimension1D;}();
auto& json_value=json["maxImageDimension2D"];
[&](){json_value=member.maxImageDimension2D;}();
auto& json_value=json["maxImageDimension3D"];
[&](){json_value=member.maxImageDimension3D;}();
auto& json_value=json["maxImageDimensionCube"];
[&](){json_value=member.maxImageDimensionCube;}();
auto& json_value=json["maxImageArrayLayers"];
[&](){json_value=member.maxImageArrayLayers;}();
auto& json_value=json["maxTexelBufferElements"];
[&](){json_value=member.maxTexelBufferElements;}();
auto& json_value=json["maxUniformBufferRange"];
[&](){json_value=member.maxUniformBufferRange;}();
auto& json_value=json["maxStorageBufferRange"];
[&](){json_value=member.maxStorageBufferRange;}();
auto& json_value=json["maxPushConstantsSize"];
[&](){json_value=member.maxPushConstantsSize;}();
auto& json_value=json["maxMemoryAllocationCount"];
[&](){json_value=member.maxMemoryAllocationCount;}();
auto& json_value=json["maxSamplerAllocationCount"];
[&](){json_value=member.maxSamplerAllocationCount;}();
auto& json_value=json["bufferImageGranularity"];
[&](){[&](){json_value=member.bufferImageGranularity;}();}();
auto& json_value=json["sparseAddressSpaceSize"];
[&](){[&](){json_value=member.sparseAddressSpaceSize;}();}();
auto& json_value=json["maxBoundDescriptorSets"];
[&](){json_value=member.maxBoundDescriptorSets;}();
auto& json_value=json["maxPerStageDescriptorSamplers"];
[&](){json_value=member.maxPerStageDescriptorSamplers;}();
auto& json_value=json["maxPerStageDescriptorUniformBuffers"];
[&](){json_value=member.maxPerStageDescriptorUniformBuffers;}();
auto& json_value=json["maxPerStageDescriptorStorageBuffers"];
[&](){json_value=member.maxPerStageDescriptorStorageBuffers;}();
auto& json_value=json["maxPerStageDescriptorSampledImages"];
[&](){json_value=member.maxPerStageDescriptorSampledImages;}();
auto& json_value=json["maxPerStageDescriptorStorageImages"];
[&](){json_value=member.maxPerStageDescriptorStorageImages;}();
auto& json_value=json["maxPerStageDescriptorInputAttachments"];
[&](){json_value=member.maxPerStageDescriptorInputAttachments;}();
auto& json_value=json["maxPerStageResources"];
[&](){json_value=member.maxPerStageResources;}();
auto& json_value=json["maxDescriptorSetSamplers"];
[&](){json_value=member.maxDescriptorSetSamplers;}();
auto& json_value=json["maxDescriptorSetUniformBuffers"];
[&](){json_value=member.maxDescriptorSetUniformBuffers;}();
auto& json_value=json["maxDescriptorSetUniformBuffersDynamic"];
[&](){json_value=member.maxDescriptorSetUniformBuffersDynamic;}();
auto& json_value=json["maxDescriptorSetStorageBuffers"];
[&](){json_value=member.maxDescriptorSetStorageBuffers;}();
auto& json_value=json["maxDescriptorSetStorageBuffersDynamic"];
[&](){json_value=member.maxDescriptorSetStorageBuffersDynamic;}();
auto& json_value=json["maxDescriptorSetSampledImages"];
[&](){json_value=member.maxDescriptorSetSampledImages;}();
auto& json_value=json["maxDescriptorSetStorageImages"];
[&](){json_value=member.maxDescriptorSetStorageImages;}();
auto& json_value=json["maxDescriptorSetInputAttachments"];
[&](){json_value=member.maxDescriptorSetInputAttachments;}();
auto& json_value=json["maxVertexInputAttributes"];
[&](){json_value=member.maxVertexInputAttributes;}();
auto& json_value=json["maxVertexInputBindings"];
[&](){json_value=member.maxVertexInputBindings;}();
auto& json_value=json["maxVertexInputAttributeOffset"];
[&](){json_value=member.maxVertexInputAttributeOffset;}();
auto& json_value=json["maxVertexInputBindingStride"];
[&](){json_value=member.maxVertexInputBindingStride;}();
auto& json_value=json["maxVertexOutputComponents"];
[&](){json_value=member.maxVertexOutputComponents;}();
auto& json_value=json["maxTessellationGenerationLevel"];
[&](){json_value=member.maxTessellationGenerationLevel;}();
auto& json_value=json["maxTessellationPatchSize"];
[&](){json_value=member.maxTessellationPatchSize;}();
auto& json_value=json["maxTessellationControlPerVertexInputComponents"];
[&](){json_value=member.maxTessellationControlPerVertexInputComponents;}();
auto& json_value=json["maxTessellationControlPerVertexOutputComponents"];
[&](){json_value=member.maxTessellationControlPerVertexOutputComponents;}();
auto& json_value=json["maxTessellationControlPerPatchOutputComponents"];
[&](){json_value=member.maxTessellationControlPerPatchOutputComponents;}();
auto& json_value=json["maxTessellationControlTotalOutputComponents"];
[&](){json_value=member.maxTessellationControlTotalOutputComponents;}();
auto& json_value=json["maxTessellationEvaluationInputComponents"];
[&](){json_value=member.maxTessellationEvaluationInputComponents;}();
auto& json_value=json["maxTessellationEvaluationOutputComponents"];
[&](){json_value=member.maxTessellationEvaluationOutputComponents;}();
auto& json_value=json["maxGeometryShaderInvocations"];
[&](){json_value=member.maxGeometryShaderInvocations;}();
auto& json_value=json["maxGeometryInputComponents"];
[&](){json_value=member.maxGeometryInputComponents;}();
auto& json_value=json["maxGeometryOutputComponents"];
[&](){json_value=member.maxGeometryOutputComponents;}();
auto& json_value=json["maxGeometryOutputVertices"];
[&](){json_value=member.maxGeometryOutputVertices;}();
auto& json_value=json["maxGeometryTotalOutputComponents"];
[&](){json_value=member.maxGeometryTotalOutputComponents;}();
auto& json_value=json["maxFragmentInputComponents"];
[&](){json_value=member.maxFragmentInputComponents;}();
auto& json_value=json["maxFragmentOutputAttachments"];
[&](){json_value=member.maxFragmentOutputAttachments;}();
auto& json_value=json["maxFragmentDualSrcAttachments"];
[&](){json_value=member.maxFragmentDualSrcAttachments;}();
auto& json_value=json["maxFragmentCombinedOutputResources"];
[&](){json_value=member.maxFragmentCombinedOutputResources;}();
auto& json_value=json["maxComputeSharedMemorySize"];
[&](){json_value=member.maxComputeSharedMemorySize;}();
auto& json_value=json["maxComputeWorkGroupCount"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int lIQmbhl=0; lIQmbhl < 3; lIQmbhl++){
            [&](){json_value[lIQmbhl]=member.maxComputeWorkGroupCount[lIQmbhl];}();
        }
        }();
auto& json_value=json["maxComputeWorkGroupInvocations"];
[&](){json_value=member.maxComputeWorkGroupInvocations;}();
auto& json_value=json["maxComputeWorkGroupSize"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int ZsqtqEL=0; ZsqtqEL < 3; ZsqtqEL++){
            [&](){json_value[ZsqtqEL]=member.maxComputeWorkGroupSize[ZsqtqEL];}();
        }
        }();
auto& json_value=json["subPixelPrecisionBits"];
[&](){json_value=member.subPixelPrecisionBits;}();
auto& json_value=json["subTexelPrecisionBits"];
[&](){json_value=member.subTexelPrecisionBits;}();
auto& json_value=json["mipmapPrecisionBits"];
[&](){json_value=member.mipmapPrecisionBits;}();
auto& json_value=json["maxDrawIndexedIndexValue"];
[&](){json_value=member.maxDrawIndexedIndexValue;}();
auto& json_value=json["maxDrawIndirectCount"];
[&](){json_value=member.maxDrawIndirectCount;}();
auto& json_value=json["maxSamplerLodBias"];
[&](){json_value=member.maxSamplerLodBias;}();
auto& json_value=json["maxSamplerAnisotropy"];
[&](){json_value=member.maxSamplerAnisotropy;}();
auto& json_value=json["maxViewports"];
[&](){json_value=member.maxViewports;}();
auto& json_value=json["maxViewportDimensions"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FiWiYWY=0; FiWiYWY < 2; FiWiYWY++){
            [&](){json_value[FiWiYWY]=member.maxViewportDimensions[FiWiYWY];}();
        }
        }();
auto& json_value=json["viewportBoundsRange"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int HOnCwLW=0; HOnCwLW < 2; HOnCwLW++){
            [&](){json_value[HOnCwLW]=member.viewportBoundsRange[HOnCwLW];}();
        }
        }();
auto& json_value=json["viewportSubPixelBits"];
[&](){json_value=member.viewportSubPixelBits;}();
auto& json_value=json["minMemoryMapAlignment"];
[&](){json_value=member.minMemoryMapAlignment;}();
auto& json_value=json["minTexelBufferOffsetAlignment"];
[&](){[&](){json_value=member.minTexelBufferOffsetAlignment;}();}();
auto& json_value=json["minUniformBufferOffsetAlignment"];
[&](){[&](){json_value=member.minUniformBufferOffsetAlignment;}();}();
auto& json_value=json["minStorageBufferOffsetAlignment"];
[&](){[&](){json_value=member.minStorageBufferOffsetAlignment;}();}();
auto& json_value=json["minTexelOffset"];
[&](){json_value=member.minTexelOffset;}();
auto& json_value=json["maxTexelOffset"];
[&](){json_value=member.maxTexelOffset;}();
auto& json_value=json["minTexelGatherOffset"];
[&](){json_value=member.minTexelGatherOffset;}();
auto& json_value=json["maxTexelGatherOffset"];
[&](){json_value=member.maxTexelGatherOffset;}();
auto& json_value=json["minInterpolationOffset"];
[&](){json_value=member.minInterpolationOffset;}();
auto& json_value=json["maxInterpolationOffset"];
[&](){json_value=member.maxInterpolationOffset;}();
auto& json_value=json["subPixelInterpolationOffsetBits"];
[&](){json_value=member.subPixelInterpolationOffsetBits;}();
auto& json_value=json["maxFramebufferWidth"];
[&](){json_value=member.maxFramebufferWidth;}();
auto& json_value=json["maxFramebufferHeight"];
[&](){json_value=member.maxFramebufferHeight;}();
auto& json_value=json["maxFramebufferLayers"];
[&](){json_value=member.maxFramebufferLayers;}();
auto& json_value=json["framebufferColorSampleCounts"];
[&](){[&](){[&](){json_value=member.framebufferColorSampleCounts;}();}();}();
auto& json_value=json["framebufferDepthSampleCounts"];
[&](){[&](){[&](){json_value=member.framebufferDepthSampleCounts;}();}();}();
auto& json_value=json["framebufferStencilSampleCounts"];
[&](){[&](){[&](){json_value=member.framebufferStencilSampleCounts;}();}();}();
auto& json_value=json["framebufferNoAttachmentsSampleCounts"];
[&](){[&](){[&](){json_value=member.framebufferNoAttachmentsSampleCounts;}();}();}();
auto& json_value=json["maxColorAttachments"];
[&](){json_value=member.maxColorAttachments;}();
auto& json_value=json["sampledImageColorSampleCounts"];
[&](){[&](){[&](){json_value=member.sampledImageColorSampleCounts;}();}();}();
auto& json_value=json["sampledImageIntegerSampleCounts"];
[&](){[&](){[&](){json_value=member.sampledImageIntegerSampleCounts;}();}();}();
auto& json_value=json["sampledImageDepthSampleCounts"];
[&](){[&](){[&](){json_value=member.sampledImageDepthSampleCounts;}();}();}();
auto& json_value=json["sampledImageStencilSampleCounts"];
[&](){[&](){[&](){json_value=member.sampledImageStencilSampleCounts;}();}();}();
auto& json_value=json["storageImageSampleCounts"];
[&](){[&](){[&](){json_value=member.storageImageSampleCounts;}();}();}();
auto& json_value=json["maxSampleMaskWords"];
[&](){json_value=member.maxSampleMaskWords;}();
auto& json_value=json["timestampComputeAndGraphics"];
[&](){[&](){json_value=member.timestampComputeAndGraphics;}();}();
auto& json_value=json["timestampPeriod"];
[&](){json_value=member.timestampPeriod;}();
auto& json_value=json["maxClipDistances"];
[&](){json_value=member.maxClipDistances;}();
auto& json_value=json["maxCullDistances"];
[&](){json_value=member.maxCullDistances;}();
auto& json_value=json["maxCombinedClipAndCullDistances"];
[&](){json_value=member.maxCombinedClipAndCullDistances;}();
auto& json_value=json["discreteQueuePriorities"];
[&](){json_value=member.discreteQueuePriorities;}();
auto& json_value=json["pointSizeRange"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int wFGzZLQ=0; wFGzZLQ < 2; wFGzZLQ++){
            [&](){json_value[wFGzZLQ]=member.pointSizeRange[wFGzZLQ];}();
        }
        }();
auto& json_value=json["lineWidthRange"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int mGntZIh=0; mGntZIh < 2; mGntZIh++){
            [&](){json_value[mGntZIh]=member.lineWidthRange[mGntZIh];}();
        }
        }();
auto& json_value=json["pointSizeGranularity"];
[&](){json_value=member.pointSizeGranularity;}();
auto& json_value=json["lineWidthGranularity"];
[&](){json_value=member.lineWidthGranularity;}();
auto& json_value=json["strictLines"];
[&](){[&](){json_value=member.strictLines;}();}();
auto& json_value=json["standardSampleLocations"];
[&](){[&](){json_value=member.standardSampleLocations;}();}();
auto& json_value=json["optimalBufferCopyOffsetAlignment"];
[&](){[&](){json_value=member.optimalBufferCopyOffsetAlignment;}();}();
auto& json_value=json["optimalBufferCopyRowPitchAlignment"];
[&](){[&](){json_value=member.optimalBufferCopyRowPitchAlignment;}();}();
auto& json_value=json["nonCoherentAtomSize"];
[&](){[&](){json_value=member.nonCoherentAtomSize;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceLimits& member){
auto& json_value=json["maxImageDimension1D"];
[&](){member.maxImageDimension1D=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxImageDimension2D"];
[&](){member.maxImageDimension2D=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxImageDimension3D"];
[&](){member.maxImageDimension3D=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxImageDimensionCube"];
[&](){member.maxImageDimensionCube=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxImageArrayLayers"];
[&](){member.maxImageArrayLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTexelBufferElements"];
[&](){member.maxTexelBufferElements=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxUniformBufferRange"];
[&](){member.maxUniformBufferRange=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxStorageBufferRange"];
[&](){member.maxStorageBufferRange=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPushConstantsSize"];
[&](){member.maxPushConstantsSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMemoryAllocationCount"];
[&](){member.maxMemoryAllocationCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxSamplerAllocationCount"];
[&](){member.maxSamplerAllocationCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["bufferImageGranularity"];
[&](){[&](){member.bufferImageGranularity=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseAddressSpaceSize"];
[&](){[&](){member.sparseAddressSpaceSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxBoundDescriptorSets"];
[&](){member.maxBoundDescriptorSets=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorSamplers"];
[&](){member.maxPerStageDescriptorSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUniformBuffers"];
[&](){member.maxPerStageDescriptorUniformBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorStorageBuffers"];
[&](){member.maxPerStageDescriptorStorageBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorSampledImages"];
[&](){member.maxPerStageDescriptorSampledImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorStorageImages"];
[&](){member.maxPerStageDescriptorStorageImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorInputAttachments"];
[&](){member.maxPerStageDescriptorInputAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageResources"];
[&](){member.maxPerStageResources=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetSamplers"];
[&](){member.maxDescriptorSetSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUniformBuffers"];
[&](){member.maxDescriptorSetUniformBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUniformBuffersDynamic"];
[&](){member.maxDescriptorSetUniformBuffersDynamic=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetStorageBuffers"];
[&](){member.maxDescriptorSetStorageBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetStorageBuffersDynamic"];
[&](){member.maxDescriptorSetStorageBuffersDynamic=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetSampledImages"];
[&](){member.maxDescriptorSetSampledImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetStorageImages"];
[&](){member.maxDescriptorSetStorageImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetInputAttachments"];
[&](){member.maxDescriptorSetInputAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxVertexInputAttributes"];
[&](){member.maxVertexInputAttributes=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxVertexInputBindings"];
[&](){member.maxVertexInputBindings=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxVertexInputAttributeOffset"];
[&](){member.maxVertexInputAttributeOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxVertexInputBindingStride"];
[&](){member.maxVertexInputBindingStride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxVertexOutputComponents"];
[&](){member.maxVertexOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationGenerationLevel"];
[&](){member.maxTessellationGenerationLevel=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationPatchSize"];
[&](){member.maxTessellationPatchSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationControlPerVertexInputComponents"];
[&](){member.maxTessellationControlPerVertexInputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationControlPerVertexOutputComponents"];
[&](){member.maxTessellationControlPerVertexOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationControlPerPatchOutputComponents"];
[&](){member.maxTessellationControlPerPatchOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationControlTotalOutputComponents"];
[&](){member.maxTessellationControlTotalOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationEvaluationInputComponents"];
[&](){member.maxTessellationEvaluationInputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTessellationEvaluationOutputComponents"];
[&](){member.maxTessellationEvaluationOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxGeometryShaderInvocations"];
[&](){member.maxGeometryShaderInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxGeometryInputComponents"];
[&](){member.maxGeometryInputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxGeometryOutputComponents"];
[&](){member.maxGeometryOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxGeometryOutputVertices"];
[&](){member.maxGeometryOutputVertices=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxGeometryTotalOutputComponents"];
[&](){member.maxGeometryTotalOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFragmentInputComponents"];
[&](){member.maxFragmentInputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFragmentOutputAttachments"];
[&](){member.maxFragmentOutputAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFragmentDualSrcAttachments"];
[&](){member.maxFragmentDualSrcAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFragmentCombinedOutputResources"];
[&](){member.maxFragmentCombinedOutputResources=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxComputeSharedMemorySize"];
[&](){member.maxComputeSharedMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxComputeWorkGroupCount"];
[&](){
        auto& arr=json_value.as_array();
        for(int lIQmbhl=0; lIQmbhl < 3; lIQmbhl++){
            [&](){member.maxComputeWorkGroupCount[lIQmbhl]=static_cast<uint32_t>(value_to<int>(json_value[lIQmbhl]));}();
        }
        }();
auto& json_value=json["maxComputeWorkGroupInvocations"];
[&](){member.maxComputeWorkGroupInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxComputeWorkGroupSize"];
[&](){
        auto& arr=json_value.as_array();
        for(int ZsqtqEL=0; ZsqtqEL < 3; ZsqtqEL++){
            [&](){member.maxComputeWorkGroupSize[ZsqtqEL]=static_cast<uint32_t>(value_to<int>(json_value[ZsqtqEL]));}();
        }
        }();
auto& json_value=json["subPixelPrecisionBits"];
[&](){member.subPixelPrecisionBits=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["subTexelPrecisionBits"];
[&](){member.subTexelPrecisionBits=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["mipmapPrecisionBits"];
[&](){member.mipmapPrecisionBits=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDrawIndexedIndexValue"];
[&](){member.maxDrawIndexedIndexValue=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDrawIndirectCount"];
[&](){member.maxDrawIndirectCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxSamplerLodBias"];
[&](){member.maxSamplerLodBias=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxSamplerAnisotropy"];
[&](){member.maxSamplerAnisotropy=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxViewports"];
[&](){member.maxViewports=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxViewportDimensions"];
[&](){
        auto& arr=json_value.as_array();
        for(int FiWiYWY=0; FiWiYWY < 2; FiWiYWY++){
            [&](){member.maxViewportDimensions[FiWiYWY]=static_cast<uint32_t>(value_to<int>(json_value[FiWiYWY]));}();
        }
        }();
auto& json_value=json["viewportBoundsRange"];
[&](){
        auto& arr=json_value.as_array();
        for(int HOnCwLW=0; HOnCwLW < 2; HOnCwLW++){
            [&](){member.viewportBoundsRange[HOnCwLW]=static_cast<float>(value_to<int>(json_value[HOnCwLW]));}();
        }
        }();
auto& json_value=json["viewportSubPixelBits"];
[&](){member.viewportSubPixelBits=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minMemoryMapAlignment"];
[&](){member.minMemoryMapAlignment=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["minTexelBufferOffsetAlignment"];
[&](){[&](){member.minTexelBufferOffsetAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["minUniformBufferOffsetAlignment"];
[&](){[&](){member.minUniformBufferOffsetAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["minStorageBufferOffsetAlignment"];
[&](){[&](){member.minStorageBufferOffsetAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["minTexelOffset"];
[&](){member.minTexelOffset=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTexelOffset"];
[&](){member.maxTexelOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minTexelGatherOffset"];
[&](){member.minTexelGatherOffset=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTexelGatherOffset"];
[&](){member.maxTexelGatherOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minInterpolationOffset"];
[&](){member.minInterpolationOffset=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxInterpolationOffset"];
[&](){member.maxInterpolationOffset=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["subPixelInterpolationOffsetBits"];
[&](){member.subPixelInterpolationOffsetBits=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFramebufferWidth"];
[&](){member.maxFramebufferWidth=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFramebufferHeight"];
[&](){member.maxFramebufferHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFramebufferLayers"];
[&](){member.maxFramebufferLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["framebufferColorSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_vygpRHY[&](){temp_vygpRHY=static_cast<int>(value_to<int>(json_value));}();member.framebufferColorSampleCounts=(VkSampleCountFlags)temp_vygpRHY;}();}();
auto& json_value=json["framebufferDepthSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_lzzepAe[&](){temp_lzzepAe=static_cast<int>(value_to<int>(json_value));}();member.framebufferDepthSampleCounts=(VkSampleCountFlags)temp_lzzepAe;}();}();
auto& json_value=json["framebufferStencilSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_JDxBagl[&](){temp_JDxBagl=static_cast<int>(value_to<int>(json_value));}();member.framebufferStencilSampleCounts=(VkSampleCountFlags)temp_JDxBagl;}();}();
auto& json_value=json["framebufferNoAttachmentsSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_pYxOxjK[&](){temp_pYxOxjK=static_cast<int>(value_to<int>(json_value));}();member.framebufferNoAttachmentsSampleCounts=(VkSampleCountFlags)temp_pYxOxjK;}();}();
auto& json_value=json["maxColorAttachments"];
[&](){member.maxColorAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sampledImageColorSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_ZpCioBq[&](){temp_ZpCioBq=static_cast<int>(value_to<int>(json_value));}();member.sampledImageColorSampleCounts=(VkSampleCountFlags)temp_ZpCioBq;}();}();
auto& json_value=json["sampledImageIntegerSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_ctTUbJZ[&](){temp_ctTUbJZ=static_cast<int>(value_to<int>(json_value));}();member.sampledImageIntegerSampleCounts=(VkSampleCountFlags)temp_ctTUbJZ;}();}();
auto& json_value=json["sampledImageDepthSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_ogaUWzi[&](){temp_ogaUWzi=static_cast<int>(value_to<int>(json_value));}();member.sampledImageDepthSampleCounts=(VkSampleCountFlags)temp_ogaUWzi;}();}();
auto& json_value=json["sampledImageStencilSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_gvcHiya[&](){temp_gvcHiya=static_cast<int>(value_to<int>(json_value));}();member.sampledImageStencilSampleCounts=(VkSampleCountFlags)temp_gvcHiya;}();}();
auto& json_value=json["storageImageSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_ufmICkt[&](){temp_ufmICkt=static_cast<int>(value_to<int>(json_value));}();member.storageImageSampleCounts=(VkSampleCountFlags)temp_ufmICkt;}();}();
auto& json_value=json["maxSampleMaskWords"];
[&](){member.maxSampleMaskWords=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["timestampComputeAndGraphics"];
[&](){[&](){member.timestampComputeAndGraphics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["timestampPeriod"];
[&](){member.timestampPeriod=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxClipDistances"];
[&](){member.maxClipDistances=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxCullDistances"];
[&](){member.maxCullDistances=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxCombinedClipAndCullDistances"];
[&](){member.maxCombinedClipAndCullDistances=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["discreteQueuePriorities"];
[&](){member.discreteQueuePriorities=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pointSizeRange"];
[&](){
        auto& arr=json_value.as_array();
        for(int wFGzZLQ=0; wFGzZLQ < 2; wFGzZLQ++){
            [&](){member.pointSizeRange[wFGzZLQ]=static_cast<float>(value_to<int>(json_value[wFGzZLQ]));}();
        }
        }();
auto& json_value=json["lineWidthRange"];
[&](){
        auto& arr=json_value.as_array();
        for(int mGntZIh=0; mGntZIh < 2; mGntZIh++){
            [&](){member.lineWidthRange[mGntZIh]=static_cast<float>(value_to<int>(json_value[mGntZIh]));}();
        }
        }();
auto& json_value=json["pointSizeGranularity"];
[&](){member.pointSizeGranularity=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["lineWidthGranularity"];
[&](){member.lineWidthGranularity=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["strictLines"];
[&](){[&](){member.strictLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["standardSampleLocations"];
[&](){[&](){member.standardSampleLocations=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["optimalBufferCopyOffsetAlignment"];
[&](){[&](){member.optimalBufferCopyOffsetAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["optimalBufferCopyRowPitchAlignment"];
[&](){[&](){member.optimalBufferCopyRowPitchAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["nonCoherentAtomSize"];
[&](){[&](){member.nonCoherentAtomSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceLimits& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceLimits& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSemaphoreCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkSemaphoreCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkSemaphoreCreateFlags temp_viegXgm[&](){temp_viegXgm=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSemaphoreCreateFlags)temp_viegXgm;}();}();
}

    void serialize_pUserData(object& json, VkSemaphoreCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSemaphoreCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueryPoolCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["queryType"];
[&](){[&](){[&](){json_value=member.queryType;}();}();}();
auto& json_value=json["queryCount"];
[&](){json_value=member.queryCount;}();
auto& json_value=json["pipelineStatistics"];
[&](){[&](){[&](){json_value=member.pipelineStatistics;}();}();}();
}
void deserialize_struct(object& json, VkQueryPoolCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkQueryPoolCreateFlags temp_lcSPYsa[&](){temp_lcSPYsa=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkQueryPoolCreateFlags)temp_lcSPYsa;}();}();
auto& json_value=json["queryType"];
[&](){[&](){VkQueryType temp_GuPmrjS[&](){temp_GuPmrjS=static_cast<int>(value_to<int>(json_value));}();member.queryType=(VkQueryType)temp_GuPmrjS;}();}();
auto& json_value=json["queryCount"];
[&](){member.queryCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pipelineStatistics"];
[&](){[&](){VkQueryPipelineStatisticFlags temp_siYnvrj[&](){temp_siYnvrj=static_cast<int>(value_to<int>(json_value));}();member.pipelineStatistics=(VkQueryPipelineStatisticFlags)temp_siYnvrj;}();}();
}

    void serialize_pUserData(object& json, VkQueryPoolCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueryPoolCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFramebufferCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["renderPass"];
[&](){serialize_handle(json_value,member.renderPass);}();
auto& json_value=json["attachmentCount"];
[&](){json_value=member.attachmentCount;}();
auto& json_value=json["pAttachments"];
[&](){
            if (member.pAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int vjwDzkt=0; vjwDzkt < member.attachmentCount; vjwDzkt++){
            [&](){serialize_handle(json_value[vjwDzkt],member.pAttachments[vjwDzkt]);}();
        }
        }();
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
auto& json_value=json["layers"];
[&](){json_value=member.layers;}();
}
void deserialize_struct(object& json, VkFramebufferCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkFramebufferCreateFlags temp_PSYzjCl[&](){temp_PSYzjCl=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkFramebufferCreateFlags)temp_PSYzjCl;}();}();
auto& json_value=json["renderPass"];
[&](){deserialize_handle(json_value, member.renderPass);}();
auto& json_value=json["attachmentCount"];
[&](){member.attachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAttachments"];
[&](){ VkImageView* temp_YUCPqFy[&](){
            if (!json_value.as_array().size()==0){
                temp_YUCPqFy=NULL;
            return; }temp_YUCPqFy=(VkImageView*)malloc(member.attachmentCount*sizeof(VkImageView));
        auto& arr=json_value.as_array();
        for(int qNVUjmy=0; qNVUjmy < member.attachmentCount; qNVUjmy++){
            [&](){deserialize_handle(json_value[qNVUjmy], temp_YUCPqFy[qNVUjmy]);}();
        }
        }();member.pAttachments=temp_YUCPqFy;}();
auto& json_value=json["width"];
[&](){member.width=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layers"];
[&](){member.layers=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkFramebufferCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFramebufferCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrawIndirectCommand& member){
        
    
auto& json_value=json["vertexCount"];
[&](){json_value=member.vertexCount;}();
auto& json_value=json["instanceCount"];
[&](){json_value=member.instanceCount;}();
auto& json_value=json["firstVertex"];
[&](){json_value=member.firstVertex;}();
auto& json_value=json["firstInstance"];
[&](){json_value=member.firstInstance;}();
}
void deserialize_struct(object& json, VkDrawIndirectCommand& member){
auto& json_value=json["vertexCount"];
[&](){member.vertexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["instanceCount"];
[&](){member.instanceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["firstVertex"];
[&](){member.firstVertex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["firstInstance"];
[&](){member.firstInstance=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDrawIndirectCommand& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrawIndirectCommand& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrawIndexedIndirectCommand& member){
        
    
auto& json_value=json["indexCount"];
[&](){json_value=member.indexCount;}();
auto& json_value=json["instanceCount"];
[&](){json_value=member.instanceCount;}();
auto& json_value=json["firstIndex"];
[&](){json_value=member.firstIndex;}();
auto& json_value=json["vertexOffset"];
[&](){json_value=member.vertexOffset;}();
auto& json_value=json["firstInstance"];
[&](){json_value=member.firstInstance;}();
}
void deserialize_struct(object& json, VkDrawIndexedIndirectCommand& member){
auto& json_value=json["indexCount"];
[&](){member.indexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["instanceCount"];
[&](){member.instanceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["firstIndex"];
[&](){member.firstIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vertexOffset"];
[&](){member.vertexOffset=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["firstInstance"];
[&](){member.firstInstance=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDrawIndexedIndirectCommand& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrawIndexedIndirectCommand& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDispatchIndirectCommand& member){
        
    
auto& json_value=json["x"];
[&](){json_value=member.x;}();
auto& json_value=json["y"];
[&](){json_value=member.y;}();
auto& json_value=json["z"];
[&](){json_value=member.z;}();
}
void deserialize_struct(object& json, VkDispatchIndirectCommand& member){
auto& json_value=json["x"];
[&](){member.x=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["y"];
[&](){member.y=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["z"];
[&](){member.z=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDispatchIndirectCommand& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDispatchIndirectCommand& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMultiDrawInfoEXT& member){
        
    
auto& json_value=json["firstVertex"];
[&](){json_value=member.firstVertex;}();
auto& json_value=json["vertexCount"];
[&](){json_value=member.vertexCount;}();
}
void deserialize_struct(object& json, VkMultiDrawInfoEXT& member){
auto& json_value=json["firstVertex"];
[&](){member.firstVertex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vertexCount"];
[&](){member.vertexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMultiDrawInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMultiDrawInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMultiDrawIndexedInfoEXT& member){
        
    
auto& json_value=json["firstIndex"];
[&](){json_value=member.firstIndex;}();
auto& json_value=json["indexCount"];
[&](){json_value=member.indexCount;}();
auto& json_value=json["vertexOffset"];
[&](){json_value=member.vertexOffset;}();
}
void deserialize_struct(object& json, VkMultiDrawIndexedInfoEXT& member){
auto& json_value=json["firstIndex"];
[&](){member.firstIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["indexCount"];
[&](){member.indexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vertexOffset"];
[&](){member.vertexOffset=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMultiDrawIndexedInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMultiDrawIndexedInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubmitInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["waitSemaphoreCount"];
[&](){json_value=member.waitSemaphoreCount;}();
auto& json_value=json["pWaitSemaphores"];
[&](){
            if (member.pWaitSemaphores==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UPuCjkG=0; UPuCjkG < member.waitSemaphoreCount; UPuCjkG++){
            [&](){serialize_handle(json_value[UPuCjkG],member.pWaitSemaphores[UPuCjkG]);}();
        }
        }();
auto& json_value=json["pWaitDstStageMask"];
[&](){
            if (member.pWaitDstStageMask==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int OEMoieK=0; OEMoieK < member.waitSemaphoreCount; OEMoieK++){
            [&](){[&](){[&](){json_value[OEMoieK]=member.pWaitDstStageMask[OEMoieK];}();}();}();
        }
        }();
auto& json_value=json["commandBufferCount"];
[&](){json_value=member.commandBufferCount;}();
auto& json_value=json["pCommandBuffers"];
[&](){
            if (member.pCommandBuffers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int VKjBFDE=0; VKjBFDE < member.commandBufferCount; VKjBFDE++){
            [&](){serialize_handle(json_value[VKjBFDE],member.pCommandBuffers[VKjBFDE]);}();
        }
        }();
auto& json_value=json["signalSemaphoreCount"];
[&](){json_value=member.signalSemaphoreCount;}();
auto& json_value=json["pSignalSemaphores"];
[&](){
            if (member.pSignalSemaphores==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NKFlfkK=0; NKFlfkK < member.signalSemaphoreCount; NKFlfkK++){
            [&](){serialize_handle(json_value[NKFlfkK],member.pSignalSemaphores[NKFlfkK]);}();
        }
        }();
}
void deserialize_struct(object& json, VkSubmitInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["waitSemaphoreCount"];
[&](){member.waitSemaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pWaitSemaphores"];
[&](){ VkSemaphore* temp_RtdUsdR[&](){
            if (!json_value.as_array().size()==0){
                temp_RtdUsdR=NULL;
            return; }temp_RtdUsdR=(VkSemaphore*)malloc(member.waitSemaphoreCount*sizeof(VkSemaphore));
        auto& arr=json_value.as_array();
        for(int eowObQx=0; eowObQx < member.waitSemaphoreCount; eowObQx++){
            [&](){deserialize_handle(json_value[eowObQx], temp_RtdUsdR[eowObQx]);}();
        }
        }();member.pWaitSemaphores=temp_RtdUsdR;}();
auto& json_value=json["pWaitDstStageMask"];
[&](){ VkPipelineStageFlags* temp_OqTYYzU[&](){
            if (!json_value.as_array().size()==0){
                temp_OqTYYzU=NULL;
            return; }temp_OqTYYzU=(VkPipelineStageFlags*)malloc(member.waitSemaphoreCount*sizeof(VkPipelineStageFlags));
        auto& arr=json_value.as_array();
        for(int mVEXVxn=0; mVEXVxn < member.waitSemaphoreCount; mVEXVxn++){
            [&](){[&](){const VkPipelineStageFlags* temp_wsqfRDd[&](){temp_wsqfRDd=static_cast<int>(value_to<int>(json_value[mVEXVxn]));}();temp_OqTYYzU[mVEXVxn]=(VkPipelineStageFlags)temp_wsqfRDd;}();}();
        }
        }();member.pWaitDstStageMask=temp_OqTYYzU;}();
auto& json_value=json["commandBufferCount"];
[&](){member.commandBufferCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCommandBuffers"];
[&](){ VkCommandBuffer* temp_gYVfDGD[&](){
            if (!json_value.as_array().size()==0){
                temp_gYVfDGD=NULL;
            return; }temp_gYVfDGD=(VkCommandBuffer*)malloc(member.commandBufferCount*sizeof(VkCommandBuffer));
        auto& arr=json_value.as_array();
        for(int iNOFWDX=0; iNOFWDX < member.commandBufferCount; iNOFWDX++){
            [&](){deserialize_handle(json_value[iNOFWDX], temp_gYVfDGD[iNOFWDX]);}();
        }
        }();member.pCommandBuffers=temp_gYVfDGD;}();
auto& json_value=json["signalSemaphoreCount"];
[&](){member.signalSemaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSignalSemaphores"];
[&](){ VkSemaphore* temp_nmXjvGQ[&](){
            if (!json_value.as_array().size()==0){
                temp_nmXjvGQ=NULL;
            return; }temp_nmXjvGQ=(VkSemaphore*)malloc(member.signalSemaphoreCount*sizeof(VkSemaphore));
        auto& arr=json_value.as_array();
        for(int rsHNIbT=0; rsHNIbT < member.signalSemaphoreCount; rsHNIbT++){
            [&](){deserialize_handle(json_value[rsHNIbT], temp_nmXjvGQ[rsHNIbT]);}();
        }
        }();member.pSignalSemaphores=temp_nmXjvGQ;}();
}

    void serialize_pUserData(object& json, VkSubmitInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubmitInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPropertiesKHR& member){
        
    
auto& json_value=json["display"];
[&](){serialize_handle(json_value,member.display);}();
auto& json_value=json["displayName"];
[&](){
            if (member.displayName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lNoZZOd=0; lNoZZOd < strlen(member.displayName)+1; lNoZZOd++){
            [&](){json_value[lNoZZOd]=member.displayName[lNoZZOd];}();
        }
        }();
auto& json_value=json["physicalDimensions"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.physicalDimensions);
            }();
auto& json_value=json["physicalResolution"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.physicalResolution);
            }();
auto& json_value=json["supportedTransforms"];
[&](){[&](){[&](){json_value=member.supportedTransforms;}();}();}();
auto& json_value=json["planeReorderPossible"];
[&](){[&](){json_value=member.planeReorderPossible;}();}();
auto& json_value=json["persistentContent"];
[&](){[&](){json_value=member.persistentContent;}();}();
}
void deserialize_struct(object& json, VkDisplayPropertiesKHR& member){
auto& json_value=json["display"];
[&](){deserialize_handle(json_value, member.display);}();
auto& json_value=json["displayName"];
[&](){ char* temp_UKVMySz[&](){
            if (!json_value.as_array().size()==0){
                temp_UKVMySz=NULL;
            return; }temp_UKVMySz=(char*)malloc(temp_UKVMySz.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int oCKUvgQ=0; oCKUvgQ < temp_UKVMySz.as_array().size();; oCKUvgQ++){
            [&](){temp_UKVMySz[oCKUvgQ]=static_cast<char>(value_to<int>(json_value[oCKUvgQ]));}();
        }
        }();member.displayName=temp_UKVMySz;}();
auto& json_value=json["physicalDimensions"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.physicalDimensions);
            }();
auto& json_value=json["physicalResolution"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.physicalResolution);
            }();
auto& json_value=json["supportedTransforms"];
[&](){[&](){VkSurfaceTransformFlagsKHR temp_hTCayBM[&](){temp_hTCayBM=static_cast<int>(value_to<int>(json_value));}();member.supportedTransforms=(VkSurfaceTransformFlagsKHR)temp_hTCayBM;}();}();
auto& json_value=json["planeReorderPossible"];
[&](){[&](){member.planeReorderPossible=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["persistentContent"];
[&](){[&](){member.persistentContent=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDisplayPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPlanePropertiesKHR& member){
        
    
auto& json_value=json["currentDisplay"];
[&](){serialize_handle(json_value,member.currentDisplay);}();
auto& json_value=json["currentStackIndex"];
[&](){json_value=member.currentStackIndex;}();
}
void deserialize_struct(object& json, VkDisplayPlanePropertiesKHR& member){
auto& json_value=json["currentDisplay"];
[&](){deserialize_handle(json_value, member.currentDisplay);}();
auto& json_value=json["currentStackIndex"];
[&](){member.currentStackIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDisplayPlanePropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPlanePropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayModeParametersKHR& member){
        
    
auto& json_value=json["visibleRegion"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.visibleRegion);
            }();
auto& json_value=json["refreshRate"];
[&](){json_value=member.refreshRate;}();
}
void deserialize_struct(object& json, VkDisplayModeParametersKHR& member){
auto& json_value=json["visibleRegion"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.visibleRegion);
            }();
auto& json_value=json["refreshRate"];
[&](){member.refreshRate=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDisplayModeParametersKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayModeParametersKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayModePropertiesKHR& member){
        
    
auto& json_value=json["displayMode"];
[&](){serialize_handle(json_value,member.displayMode);}();
auto& json_value=json["parameters"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.parameters);
            }();
}
void deserialize_struct(object& json, VkDisplayModePropertiesKHR& member){
auto& json_value=json["displayMode"];
[&](){deserialize_handle(json_value, member.displayMode);}();
auto& json_value=json["parameters"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.parameters);
            }();
}

    void serialize_pUserData(object& json, VkDisplayModePropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayModePropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayModeCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["parameters"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.parameters);
            }();
}
void deserialize_struct(object& json, VkDisplayModeCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDisplayModeCreateFlagsKHR temp_YlQVrfD[&](){temp_YlQVrfD=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDisplayModeCreateFlagsKHR)temp_YlQVrfD;}();}();
auto& json_value=json["parameters"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.parameters);
            }();
}

    void serialize_pUserData(object& json, VkDisplayModeCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayModeCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPlaneCapabilitiesKHR& member){
        
    
auto& json_value=json["supportedAlpha"];
[&](){[&](){[&](){json_value=member.supportedAlpha;}();}();}();
auto& json_value=json["minSrcPosition"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minSrcPosition);
            }();
auto& json_value=json["maxSrcPosition"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxSrcPosition);
            }();
auto& json_value=json["minSrcExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minSrcExtent);
            }();
auto& json_value=json["maxSrcExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxSrcExtent);
            }();
auto& json_value=json["minDstPosition"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minDstPosition);
            }();
auto& json_value=json["maxDstPosition"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxDstPosition);
            }();
auto& json_value=json["minDstExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minDstExtent);
            }();
auto& json_value=json["maxDstExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxDstExtent);
            }();
}
void deserialize_struct(object& json, VkDisplayPlaneCapabilitiesKHR& member){
auto& json_value=json["supportedAlpha"];
[&](){[&](){VkDisplayPlaneAlphaFlagsKHR temp_LYhNExC[&](){temp_LYhNExC=static_cast<int>(value_to<int>(json_value));}();member.supportedAlpha=(VkDisplayPlaneAlphaFlagsKHR)temp_LYhNExC;}();}();
auto& json_value=json["minSrcPosition"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minSrcPosition);
            }();
auto& json_value=json["maxSrcPosition"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxSrcPosition);
            }();
auto& json_value=json["minSrcExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minSrcExtent);
            }();
auto& json_value=json["maxSrcExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxSrcExtent);
            }();
auto& json_value=json["minDstPosition"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minDstPosition);
            }();
auto& json_value=json["maxDstPosition"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxDstPosition);
            }();
auto& json_value=json["minDstExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minDstExtent);
            }();
auto& json_value=json["maxDstExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxDstExtent);
            }();
}

    void serialize_pUserData(object& json, VkDisplayPlaneCapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPlaneCapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplaySurfaceCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["displayMode"];
[&](){serialize_handle(json_value,member.displayMode);}();
auto& json_value=json["planeIndex"];
[&](){json_value=member.planeIndex;}();
auto& json_value=json["planeStackIndex"];
[&](){json_value=member.planeStackIndex;}();
auto& json_value=json["transform"];
[&](){[&](){[&](){json_value=member.transform;}();}();}();
auto& json_value=json["globalAlpha"];
[&](){json_value=member.globalAlpha;}();
auto& json_value=json["alphaMode"];
[&](){[&](){[&](){json_value=member.alphaMode;}();}();}();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageExtent);
            }();
}
void deserialize_struct(object& json, VkDisplaySurfaceCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDisplaySurfaceCreateFlagsKHR temp_vSaIbXv[&](){temp_vSaIbXv=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDisplaySurfaceCreateFlagsKHR)temp_vSaIbXv;}();}();
auto& json_value=json["displayMode"];
[&](){deserialize_handle(json_value, member.displayMode);}();
auto& json_value=json["planeIndex"];
[&](){member.planeIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["planeStackIndex"];
[&](){member.planeStackIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["transform"];
[&](){[&](){VkSurfaceTransformFlagBitsKHR temp_MSAmdXT[&](){temp_MSAmdXT=static_cast<int>(value_to<int>(json_value));}();member.transform=(VkSurfaceTransformFlagBitsKHR)temp_MSAmdXT;}();}();
auto& json_value=json["globalAlpha"];
[&](){member.globalAlpha=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["alphaMode"];
[&](){[&](){VkDisplayPlaneAlphaFlagBitsKHR temp_zbtuHIK[&](){temp_zbtuHIK=static_cast<int>(value_to<int>(json_value));}();member.alphaMode=(VkDisplayPlaneAlphaFlagBitsKHR)temp_zbtuHIK;}();}();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageExtent);
            }();
}

    void serialize_pUserData(object& json, VkDisplaySurfaceCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplaySurfaceCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPresentInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcRect"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcRect);
            }();
auto& json_value=json["dstRect"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstRect);
            }();
auto& json_value=json["persistent"];
[&](){[&](){json_value=member.persistent;}();}();
}
void deserialize_struct(object& json, VkDisplayPresentInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcRect"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcRect);
            }();
auto& json_value=json["dstRect"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstRect);
            }();
auto& json_value=json["persistent"];
[&](){[&](){member.persistent=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDisplayPresentInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPresentInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfaceCapabilitiesKHR& member){
        
    
auto& json_value=json["minImageCount"];
[&](){json_value=member.minImageCount;}();
auto& json_value=json["maxImageCount"];
[&](){json_value=member.maxImageCount;}();
auto& json_value=json["currentExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.currentExtent);
            }();
auto& json_value=json["minImageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minImageExtent);
            }();
auto& json_value=json["maxImageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxImageExtent);
            }();
auto& json_value=json["maxImageArrayLayers"];
[&](){json_value=member.maxImageArrayLayers;}();
auto& json_value=json["supportedTransforms"];
[&](){[&](){[&](){json_value=member.supportedTransforms;}();}();}();
auto& json_value=json["currentTransform"];
[&](){[&](){[&](){json_value=member.currentTransform;}();}();}();
auto& json_value=json["supportedCompositeAlpha"];
[&](){[&](){[&](){json_value=member.supportedCompositeAlpha;}();}();}();
auto& json_value=json["supportedUsageFlags"];
[&](){[&](){[&](){json_value=member.supportedUsageFlags;}();}();}();
}
void deserialize_struct(object& json, VkSurfaceCapabilitiesKHR& member){
auto& json_value=json["minImageCount"];
[&](){member.minImageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxImageCount"];
[&](){member.maxImageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["currentExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.currentExtent);
            }();
auto& json_value=json["minImageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minImageExtent);
            }();
auto& json_value=json["maxImageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxImageExtent);
            }();
auto& json_value=json["maxImageArrayLayers"];
[&](){member.maxImageArrayLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["supportedTransforms"];
[&](){[&](){VkSurfaceTransformFlagsKHR temp_hTCayBM[&](){temp_hTCayBM=static_cast<int>(value_to<int>(json_value));}();member.supportedTransforms=(VkSurfaceTransformFlagsKHR)temp_hTCayBM;}();}();
auto& json_value=json["currentTransform"];
[&](){[&](){VkSurfaceTransformFlagBitsKHR temp_iLniBKn[&](){temp_iLniBKn=static_cast<int>(value_to<int>(json_value));}();member.currentTransform=(VkSurfaceTransformFlagBitsKHR)temp_iLniBKn;}();}();
auto& json_value=json["supportedCompositeAlpha"];
[&](){[&](){VkCompositeAlphaFlagsKHR temp_vzqnZlb[&](){temp_vzqnZlb=static_cast<int>(value_to<int>(json_value));}();member.supportedCompositeAlpha=(VkCompositeAlphaFlagsKHR)temp_vzqnZlb;}();}();
auto& json_value=json["supportedUsageFlags"];
[&](){[&](){VkImageUsageFlags temp_WRBnKMi[&](){temp_WRBnKMi=static_cast<int>(value_to<int>(json_value));}();member.supportedUsageFlags=(VkImageUsageFlags)temp_WRBnKMi;}();}();
}

    void serialize_pUserData(object& json, VkSurfaceCapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfaceCapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkXlibSurfaceCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["dpy"];
[&](){
            if (member.dpy==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.dpy;}();
auto& json_value=json["window"];
[&](){json_value=(uintptr_t)member.window;}();
}
void deserialize_struct(object& json, VkXlibSurfaceCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkXlibSurfaceCreateFlagsKHR temp_qnKiAyN[&](){temp_qnKiAyN=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkXlibSurfaceCreateFlagsKHR)temp_qnKiAyN;}();}();
auto& json_value=json["dpy"];
[&](){
            if (!json_value.as_array().size()==0){
                member.dpy=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();
auto& json_value=json["window"];
[&](){variable=value_to<uintptr_t>(json_value);}();
}

    void serialize_pUserData(object& json, VkXlibSurfaceCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkXlibSurfaceCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkXcbSurfaceCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["connection"];
[&](){
            if (member.connection==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.connection;}();
auto& json_value=json["window"];
[&](){json_value=(uintptr_t)member.window;}();
}
void deserialize_struct(object& json, VkXcbSurfaceCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkXcbSurfaceCreateFlagsKHR temp_xySWjag[&](){temp_xySWjag=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkXcbSurfaceCreateFlagsKHR)temp_xySWjag;}();}();
auto& json_value=json["connection"];
[&](){
            if (!json_value.as_array().size()==0){
                member.connection=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();
auto& json_value=json["window"];
[&](){variable=value_to<uintptr_t>(json_value);}();
}

    void serialize_pUserData(object& json, VkXcbSurfaceCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkXcbSurfaceCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfaceFormatKHR& member){
        
    
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["colorSpace"];
[&](){[&](){[&](){json_value=member.colorSpace;}();}();}();
}
void deserialize_struct(object& json, VkSurfaceFormatKHR& member){
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["colorSpace"];
[&](){[&](){VkColorSpaceKHR temp_RUnUIbs[&](){temp_RUnUIbs=static_cast<int>(value_to<int>(json_value));}();member.colorSpace=(VkColorSpaceKHR)temp_RUnUIbs;}();}();
}

    void serialize_pUserData(object& json, VkSurfaceFormatKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfaceFormatKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["surface"];
[&](){serialize_handle(json_value,member.surface);}();
auto& json_value=json["minImageCount"];
[&](){json_value=member.minImageCount;}();
auto& json_value=json["imageFormat"];
[&](){[&](){[&](){json_value=member.imageFormat;}();}();}();
auto& json_value=json["imageColorSpace"];
[&](){[&](){[&](){json_value=member.imageColorSpace;}();}();}();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageExtent);
            }();
auto& json_value=json["imageArrayLayers"];
[&](){json_value=member.imageArrayLayers;}();
auto& json_value=json["imageUsage"];
[&](){[&](){[&](){json_value=member.imageUsage;}();}();}();
auto& json_value=json["imageSharingMode"];
[&](){[&](){[&](){json_value=member.imageSharingMode;}();}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){json_value=member.queueFamilyIndexCount;}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){
            if (member.pQueueFamilyIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){json_value[rqZQqua]=member.pQueueFamilyIndices[rqZQqua];}();
        }
        }();
auto& json_value=json["preTransform"];
[&](){[&](){[&](){json_value=member.preTransform;}();}();}();
auto& json_value=json["compositeAlpha"];
[&](){[&](){[&](){json_value=member.compositeAlpha;}();}();}();
auto& json_value=json["presentMode"];
[&](){[&](){[&](){json_value=member.presentMode;}();}();}();
auto& json_value=json["clipped"];
[&](){[&](){json_value=member.clipped;}();}();
auto& json_value=json["oldSwapchain"];
[&](){serialize_handle(json_value,member.oldSwapchain);}();
}
void deserialize_struct(object& json, VkSwapchainCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkSwapchainCreateFlagsKHR temp_yYYTdCi[&](){temp_yYYTdCi=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSwapchainCreateFlagsKHR)temp_yYYTdCi;}();}();
auto& json_value=json["surface"];
[&](){deserialize_handle(json_value, member.surface);}();
auto& json_value=json["minImageCount"];
[&](){member.minImageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageFormat"];
[&](){[&](){VkFormat temp_fNWyxMX[&](){temp_fNWyxMX=static_cast<int>(value_to<int>(json_value));}();member.imageFormat=(VkFormat)temp_fNWyxMX;}();}();
auto& json_value=json["imageColorSpace"];
[&](){[&](){VkColorSpaceKHR temp_DUYgylO[&](){temp_DUYgylO=static_cast<int>(value_to<int>(json_value));}();member.imageColorSpace=(VkColorSpaceKHR)temp_DUYgylO;}();}();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageExtent);
            }();
auto& json_value=json["imageArrayLayers"];
[&](){member.imageArrayLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageUsage"];
[&](){[&](){VkImageUsageFlags temp_LxhTcxS[&](){temp_LxhTcxS=static_cast<int>(value_to<int>(json_value));}();member.imageUsage=(VkImageUsageFlags)temp_LxhTcxS;}();}();
auto& json_value=json["imageSharingMode"];
[&](){[&](){VkSharingMode temp_sqcOmec[&](){temp_sqcOmec=static_cast<int>(value_to<int>(json_value));}();member.imageSharingMode=(VkSharingMode)temp_sqcOmec;}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){member.queueFamilyIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){ uint32_t* temp_uPDeaNU[&](){
            if (!json_value.as_array().size()==0){
                temp_uPDeaNU=NULL;
            return; }temp_uPDeaNU=(uint32_t*)malloc(member.queueFamilyIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int JEqKTnG=0; JEqKTnG < member.queueFamilyIndexCount; JEqKTnG++){
            [&](){temp_uPDeaNU[JEqKTnG]=static_cast<uint32_t>(value_to<int>(json_value[JEqKTnG]));}();
        }
        }();member.pQueueFamilyIndices=temp_uPDeaNU;}();
auto& json_value=json["preTransform"];
[&](){[&](){VkSurfaceTransformFlagBitsKHR temp_rzLTxRm[&](){temp_rzLTxRm=static_cast<int>(value_to<int>(json_value));}();member.preTransform=(VkSurfaceTransformFlagBitsKHR)temp_rzLTxRm;}();}();
auto& json_value=json["compositeAlpha"];
[&](){[&](){VkCompositeAlphaFlagBitsKHR temp_iKndjff[&](){temp_iKndjff=static_cast<int>(value_to<int>(json_value));}();member.compositeAlpha=(VkCompositeAlphaFlagBitsKHR)temp_iKndjff;}();}();
auto& json_value=json["presentMode"];
[&](){[&](){VkPresentModeKHR temp_hsEhypt[&](){temp_hsEhypt=static_cast<int>(value_to<int>(json_value));}();member.presentMode=(VkPresentModeKHR)temp_hsEhypt;}();}();
auto& json_value=json["clipped"];
[&](){[&](){member.clipped=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["oldSwapchain"];
[&](){deserialize_handle(json_value, member.oldSwapchain);}();
}

    void serialize_pUserData(object& json, VkSwapchainCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPresentInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["waitSemaphoreCount"];
[&](){json_value=member.waitSemaphoreCount;}();
auto& json_value=json["pWaitSemaphores"];
[&](){
            if (member.pWaitSemaphores==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UPuCjkG=0; UPuCjkG < member.waitSemaphoreCount; UPuCjkG++){
            [&](){serialize_handle(json_value[UPuCjkG],member.pWaitSemaphores[UPuCjkG]);}();
        }
        }();
auto& json_value=json["swapchainCount"];
[&](){json_value=member.swapchainCount;}();
auto& json_value=json["pSwapchains"];
[&](){
            if (member.pSwapchains==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int zFXKoee=0; zFXKoee < member.swapchainCount; zFXKoee++){
            [&](){serialize_handle(json_value[zFXKoee],member.pSwapchains[zFXKoee]);}();
        }
        }();
auto& json_value=json["pImageIndices"];
[&](){
            if (member.pImageIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uFkTWYN=0; uFkTWYN < member.swapchainCount; uFkTWYN++){
            [&](){json_value[uFkTWYN]=member.pImageIndices[uFkTWYN];}();
        }
        }();
auto& json_value=json["pResults"];
[&](){
            if (member.pResults==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int bYifpDK=0; bYifpDK < member.swapchainCount; bYifpDK++){
            [&](){[&](){[&](){json_value[bYifpDK]=member.pResults[bYifpDK];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkPresentInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["waitSemaphoreCount"];
[&](){member.waitSemaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pWaitSemaphores"];
[&](){ VkSemaphore* temp_RtdUsdR[&](){
            if (!json_value.as_array().size()==0){
                temp_RtdUsdR=NULL;
            return; }temp_RtdUsdR=(VkSemaphore*)malloc(member.waitSemaphoreCount*sizeof(VkSemaphore));
        auto& arr=json_value.as_array();
        for(int eowObQx=0; eowObQx < member.waitSemaphoreCount; eowObQx++){
            [&](){deserialize_handle(json_value[eowObQx], temp_RtdUsdR[eowObQx]);}();
        }
        }();member.pWaitSemaphores=temp_RtdUsdR;}();
auto& json_value=json["swapchainCount"];
[&](){member.swapchainCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSwapchains"];
[&](){ VkSwapchainKHR* temp_yHVhtVP[&](){
            if (!json_value.as_array().size()==0){
                temp_yHVhtVP=NULL;
            return; }temp_yHVhtVP=(VkSwapchainKHR*)malloc(member.swapchainCount*sizeof(VkSwapchainKHR));
        auto& arr=json_value.as_array();
        for(int KhSRwHa=0; KhSRwHa < member.swapchainCount; KhSRwHa++){
            [&](){deserialize_handle(json_value[KhSRwHa], temp_yHVhtVP[KhSRwHa]);}();
        }
        }();member.pSwapchains=temp_yHVhtVP;}();
auto& json_value=json["pImageIndices"];
[&](){ uint32_t* temp_msmqPUf[&](){
            if (!json_value.as_array().size()==0){
                temp_msmqPUf=NULL;
            return; }temp_msmqPUf=(uint32_t*)malloc(member.swapchainCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int daliJoD=0; daliJoD < member.swapchainCount; daliJoD++){
            [&](){temp_msmqPUf[daliJoD]=static_cast<uint32_t>(value_to<int>(json_value[daliJoD]));}();
        }
        }();member.pImageIndices=temp_msmqPUf;}();
auto& json_value=json["pResults"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pResults=NULL;
            return; }member.pResults=(VkResult*)malloc(member.swapchainCount*sizeof(VkResult));
        auto& arr=json_value.as_array();
        for(int bYifpDK=0; bYifpDK < member.swapchainCount; bYifpDK++){
            [&](){[&](){VkResult* temp_cjPWVjg[&](){temp_cjPWVjg=static_cast<int>(value_to<int>(json_value[bYifpDK]));}();member.pResults[bYifpDK]=(VkResult)temp_cjPWVjg;}();}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPresentInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPresentInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugReportCallbackCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pfnCallback"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnCallback);
            }();
auto& json_value=json["pUserData"];
serialize_pUserData(json_value, member);
}
void deserialize_struct(object& json, VkDebugReportCallbackCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDebugReportFlagsEXT temp_pUlSgOE[&](){temp_pUlSgOE=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDebugReportFlagsEXT)temp_pUlSgOE;}();}();
auto& json_value=json["pfnCallback"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnCallback);
            #endif
}();
auto& json_value=json["pUserData"];
deserialize_pUserData(json_value, member);
}

    void serialize_pUserData(object& json, VkDebugReportCallbackCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
json["PFN_vkDebugReportCallbackEXT"]=(uintptr_t)(member.pfnCallback);
}

    void deserialize_pUserData(object& json, VkDebugReportCallbackCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();
pUserData.pfnCallback=(PFN_vkDebugReportCallbackEXT)(value_to<uintptr_t>(json["PFN_vkDebugReportCallbackEXT"]));

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkValidationFlagsEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["disabledValidationCheckCount"];
[&](){json_value=member.disabledValidationCheckCount;}();
auto& json_value=json["pDisabledValidationChecks"];
[&](){
            if (member.pDisabledValidationChecks==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int jaivMZO=0; jaivMZO < member.disabledValidationCheckCount; jaivMZO++){
            [&](){[&](){[&](){json_value[jaivMZO]=member.pDisabledValidationChecks[jaivMZO];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkValidationFlagsEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["disabledValidationCheckCount"];
[&](){member.disabledValidationCheckCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDisabledValidationChecks"];
[&](){ VkValidationCheckEXT* temp_DYysvOf[&](){
            if (!json_value.as_array().size()==0){
                temp_DYysvOf=NULL;
            return; }temp_DYysvOf=(VkValidationCheckEXT*)malloc(member.disabledValidationCheckCount*sizeof(VkValidationCheckEXT));
        auto& arr=json_value.as_array();
        for(int VTQHILD=0; VTQHILD < member.disabledValidationCheckCount; VTQHILD++){
            [&](){[&](){const VkValidationCheckEXT* temp_GUWpOOo[&](){temp_GUWpOOo=static_cast<int>(value_to<int>(json_value[VTQHILD]));}();temp_DYysvOf[VTQHILD]=(VkValidationCheckEXT)temp_GUWpOOo;}();}();
        }
        }();member.pDisabledValidationChecks=temp_DYysvOf;}();
}

    void serialize_pUserData(object& json, VkValidationFlagsEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkValidationFlagsEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkValidationFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["enabledValidationFeatureCount"];
[&](){json_value=member.enabledValidationFeatureCount;}();
auto& json_value=json["pEnabledValidationFeatures"];
[&](){
            if (member.pEnabledValidationFeatures==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ctgavwB=0; ctgavwB < member.enabledValidationFeatureCount; ctgavwB++){
            [&](){[&](){[&](){json_value[ctgavwB]=member.pEnabledValidationFeatures[ctgavwB];}();}();}();
        }
        }();
auto& json_value=json["disabledValidationFeatureCount"];
[&](){json_value=member.disabledValidationFeatureCount;}();
auto& json_value=json["pDisabledValidationFeatures"];
[&](){
            if (member.pDisabledValidationFeatures==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int XEOKvrX=0; XEOKvrX < member.disabledValidationFeatureCount; XEOKvrX++){
            [&](){[&](){[&](){json_value[XEOKvrX]=member.pDisabledValidationFeatures[XEOKvrX];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkValidationFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["enabledValidationFeatureCount"];
[&](){member.enabledValidationFeatureCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pEnabledValidationFeatures"];
[&](){ VkValidationFeatureEnableEXT* temp_dCXHPvl[&](){
            if (!json_value.as_array().size()==0){
                temp_dCXHPvl=NULL;
            return; }temp_dCXHPvl=(VkValidationFeatureEnableEXT*)malloc(member.enabledValidationFeatureCount*sizeof(VkValidationFeatureEnableEXT));
        auto& arr=json_value.as_array();
        for(int bCZcZYb=0; bCZcZYb < member.enabledValidationFeatureCount; bCZcZYb++){
            [&](){[&](){const VkValidationFeatureEnableEXT* temp_yRgUHYa[&](){temp_yRgUHYa=static_cast<int>(value_to<int>(json_value[bCZcZYb]));}();temp_dCXHPvl[bCZcZYb]=(VkValidationFeatureEnableEXT)temp_yRgUHYa;}();}();
        }
        }();member.pEnabledValidationFeatures=temp_dCXHPvl;}();
auto& json_value=json["disabledValidationFeatureCount"];
[&](){member.disabledValidationFeatureCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDisabledValidationFeatures"];
[&](){ VkValidationFeatureDisableEXT* temp_QYgJMsX[&](){
            if (!json_value.as_array().size()==0){
                temp_QYgJMsX=NULL;
            return; }temp_QYgJMsX=(VkValidationFeatureDisableEXT*)malloc(member.disabledValidationFeatureCount*sizeof(VkValidationFeatureDisableEXT));
        auto& arr=json_value.as_array();
        for(int wUHyvNv=0; wUHyvNv < member.disabledValidationFeatureCount; wUHyvNv++){
            [&](){[&](){const VkValidationFeatureDisableEXT* temp_YLzxTjO[&](){temp_YLzxTjO=static_cast<int>(value_to<int>(json_value[wUHyvNv]));}();temp_QYgJMsX[wUHyvNv]=(VkValidationFeatureDisableEXT)temp_YLzxTjO;}();}();
        }
        }();member.pDisabledValidationFeatures=temp_QYgJMsX;}();
}

    void serialize_pUserData(object& json, VkValidationFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkValidationFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRasterizationStateRasterizationOrderAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rasterizationOrder"];
[&](){[&](){[&](){json_value=member.rasterizationOrder;}();}();}();
}
void deserialize_struct(object& json, VkPipelineRasterizationStateRasterizationOrderAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["rasterizationOrder"];
[&](){[&](){VkRasterizationOrderAMD temp_YNoyvJp[&](){temp_YNoyvJp=static_cast<int>(value_to<int>(json_value));}();member.rasterizationOrder=(VkRasterizationOrderAMD)temp_YNoyvJp;}();}();
}

    void serialize_pUserData(object& json, VkPipelineRasterizationStateRasterizationOrderAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRasterizationStateRasterizationOrderAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugMarkerObjectNameInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["objectType"];
[&](){[&](){[&](){json_value=member.objectType;}();}();}();
auto& json_value=json["object"];
[&](){json_value=member.object;}();
auto& json_value=json["pObjectName"];
[&](){
            if (member.pObjectName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int IrvYMgK=0; IrvYMgK < strlen(member.pObjectName)+1; IrvYMgK++){
            [&](){json_value[IrvYMgK]=member.pObjectName[IrvYMgK];}();
        }
        }();
}
void deserialize_struct(object& json, VkDebugMarkerObjectNameInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["objectType"];
[&](){[&](){VkDebugReportObjectTypeEXT temp_jLEjUfK[&](){temp_jLEjUfK=static_cast<int>(value_to<int>(json_value));}();member.objectType=(VkDebugReportObjectTypeEXT)temp_jLEjUfK;}();}();
auto& json_value=json["object"];
[&](){member.object=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["pObjectName"];
[&](){ char* temp_AUIQNis[&](){
            if (!json_value.as_array().size()==0){
                temp_AUIQNis=NULL;
            return; }temp_AUIQNis=(char*)malloc(temp_AUIQNis.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int vNFhQsi=0; vNFhQsi < temp_AUIQNis.as_array().size();; vNFhQsi++){
            [&](){temp_AUIQNis[vNFhQsi]=static_cast<char>(value_to<int>(json_value[vNFhQsi]));}();
        }
        }();member.pObjectName=temp_AUIQNis;}();
}

    void serialize_pUserData(object& json, VkDebugMarkerObjectNameInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDebugMarkerObjectNameInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugMarkerObjectTagInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["objectType"];
[&](){[&](){[&](){json_value=member.objectType;}();}();}();
auto& json_value=json["object"];
[&](){json_value=member.object;}();
auto& json_value=json["tagName"];
[&](){json_value=member.tagName;}();
auto& json_value=json["tagSize"];
[&](){json_value=member.tagSize;}();
auto& json_value=json["pTag"];
[&](){
            if (member.pTag==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pTag)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RyqFIjd=0; RyqFIjd < member.tagSize; RyqFIjd++){
            [&](){json_value[RyqFIjd]=(char*)(member.pTag)[RyqFIjd];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkDebugMarkerObjectTagInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["objectType"];
[&](){[&](){VkDebugReportObjectTypeEXT temp_jLEjUfK[&](){temp_jLEjUfK=static_cast<int>(value_to<int>(json_value));}();member.objectType=(VkDebugReportObjectTypeEXT)temp_jLEjUfK;}();}();
auto& json_value=json["object"];
[&](){member.object=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["tagName"];
[&](){member.tagName=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["tagSize"];
[&](){member.tagSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pTag"];
[&](){ void* temp_KACbkFs[&](){
            if (!json_value.as_array().size()==0){
                temp_KACbkFs=NULL;
            return; }char* temp_shTPeFP;[&](){
            if (!json_value.as_array().size()==0){
                temp_KACbkFs=NULL;
            return; }temp_KACbkFs=(char*)malloc(member.tagSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int lxDYfsn=0; lxDYfsn < member.tagSize; lxDYfsn++){
            [&](){temp_KACbkFs[lxDYfsn]=static_cast<char>(value_to<int>(json_value[lxDYfsn]));}();
        }
        }();temp_KACbkFs=temp_shTPeFP;}();member.pTag=temp_KACbkFs;}();
}

    void serialize_pUserData(object& json, VkDebugMarkerObjectTagInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDebugMarkerObjectTagInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugMarkerMarkerInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pMarkerName"];
[&](){
            if (member.pMarkerName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wSyyLJw=0; wSyyLJw < strlen(member.pMarkerName)+1; wSyyLJw++){
            [&](){json_value[wSyyLJw]=member.pMarkerName[wSyyLJw];}();
        }
        }();
auto& json_value=json["color"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){json_value[oKnkjtQ]=member.color[oKnkjtQ];}();
        }
        }();
}
void deserialize_struct(object& json, VkDebugMarkerMarkerInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pMarkerName"];
[&](){ char* temp_XJIlhPW[&](){
            if (!json_value.as_array().size()==0){
                temp_XJIlhPW=NULL;
            return; }temp_XJIlhPW=(char*)malloc(temp_XJIlhPW.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int GKICecd=0; GKICecd < temp_XJIlhPW.as_array().size();; GKICecd++){
            [&](){temp_XJIlhPW[GKICecd]=static_cast<char>(value_to<int>(json_value[GKICecd]));}();
        }
        }();member.pMarkerName=temp_XJIlhPW;}();
auto& json_value=json["color"];
[&](){
        auto& arr=json_value.as_array();
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){member.color[oKnkjtQ]=static_cast<float>(value_to<int>(json_value[oKnkjtQ]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkDebugMarkerMarkerInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDebugMarkerMarkerInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDedicatedAllocationImageCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dedicatedAllocation"];
[&](){[&](){json_value=member.dedicatedAllocation;}();}();
}
void deserialize_struct(object& json, VkDedicatedAllocationImageCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["dedicatedAllocation"];
[&](){[&](){member.dedicatedAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDedicatedAllocationImageCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDedicatedAllocationImageCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDedicatedAllocationBufferCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dedicatedAllocation"];
[&](){[&](){json_value=member.dedicatedAllocation;}();}();
}
void deserialize_struct(object& json, VkDedicatedAllocationBufferCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["dedicatedAllocation"];
[&](){[&](){member.dedicatedAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDedicatedAllocationBufferCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDedicatedAllocationBufferCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDedicatedAllocationMemoryAllocateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
}
void deserialize_struct(object& json, VkDedicatedAllocationMemoryAllocateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
}

    void serialize_pUserData(object& json, VkDedicatedAllocationMemoryAllocateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDedicatedAllocationMemoryAllocateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalImageFormatPropertiesNV& member){
        
    
auto& json_value=json["imageFormatProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageFormatProperties);
            }();
auto& json_value=json["externalMemoryFeatures"];
[&](){[&](){[&](){json_value=member.externalMemoryFeatures;}();}();}();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){[&](){json_value=member.exportFromImportedHandleTypes;}();}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){[&](){json_value=member.compatibleHandleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExternalImageFormatPropertiesNV& member){
auto& json_value=json["imageFormatProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageFormatProperties);
            }();
auto& json_value=json["externalMemoryFeatures"];
[&](){[&](){VkExternalMemoryFeatureFlagsNV temp_QWUkUpk[&](){temp_QWUkUpk=static_cast<int>(value_to<int>(json_value));}();member.externalMemoryFeatures=(VkExternalMemoryFeatureFlagsNV)temp_QWUkUpk;}();}();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlagsNV temp_gkEQctQ[&](){temp_gkEQctQ=static_cast<int>(value_to<int>(json_value));}();member.exportFromImportedHandleTypes=(VkExternalMemoryHandleTypeFlagsNV)temp_gkEQctQ;}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlagsNV temp_WzqHNXy[&](){temp_WzqHNXy=static_cast<int>(value_to<int>(json_value));}();member.compatibleHandleTypes=(VkExternalMemoryHandleTypeFlagsNV)temp_WzqHNXy;}();}();
}

    void serialize_pUserData(object& json, VkExternalImageFormatPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalImageFormatPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalMemoryImageCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleTypes"];
[&](){[&](){[&](){json_value=member.handleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExternalMemoryImageCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlagsNV temp_GzWAstv[&](){temp_GzWAstv=static_cast<int>(value_to<int>(json_value));}();member.handleTypes=(VkExternalMemoryHandleTypeFlagsNV)temp_GzWAstv;}();}();
}

    void serialize_pUserData(object& json, VkExternalMemoryImageCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalMemoryImageCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExportMemoryAllocateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleTypes"];
[&](){[&](){[&](){json_value=member.handleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExportMemoryAllocateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlagsNV temp_GzWAstv[&](){temp_GzWAstv=static_cast<int>(value_to<int>(json_value));}();member.handleTypes=(VkExternalMemoryHandleTypeFlagsNV)temp_GzWAstv;}();}();
}

    void serialize_pUserData(object& json, VkExportMemoryAllocateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExportMemoryAllocateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceGeneratedCommands"];
[&](){[&](){json_value=member.deviceGeneratedCommands;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceGeneratedCommands"];
[&](){[&](){member.deviceGeneratedCommands=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceGeneratedCompute"];
[&](){[&](){json_value=member.deviceGeneratedCompute;}();}();
auto& json_value=json["deviceGeneratedComputePipelines"];
[&](){[&](){json_value=member.deviceGeneratedComputePipelines;}();}();
auto& json_value=json["deviceGeneratedComputeCaptureReplay"];
[&](){[&](){json_value=member.deviceGeneratedComputeCaptureReplay;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceGeneratedCompute"];
[&](){[&](){member.deviceGeneratedCompute=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["deviceGeneratedComputePipelines"];
[&](){[&](){member.deviceGeneratedComputePipelines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["deviceGeneratedComputeCaptureReplay"];
[&](){[&](){member.deviceGeneratedComputeCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDevicePrivateDataCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["privateDataSlotRequestCount"];
[&](){json_value=member.privateDataSlotRequestCount;}();
}
void deserialize_struct(object& json, VkDevicePrivateDataCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["privateDataSlotRequestCount"];
[&](){member.privateDataSlotRequestCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDevicePrivateDataCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDevicePrivateDataCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPrivateDataSlotCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkPrivateDataSlotCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPrivateDataSlotCreateFlags temp_SswvMbm[&](){temp_SswvMbm=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPrivateDataSlotCreateFlags)temp_SswvMbm;}();}();
}

    void serialize_pUserData(object& json, VkPrivateDataSlotCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPrivateDataSlotCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePrivateDataFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["privateData"];
[&](){[&](){json_value=member.privateData;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePrivateDataFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["privateData"];
[&](){[&](){member.privateData=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePrivateDataFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePrivateDataFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxGraphicsShaderGroupCount"];
[&](){json_value=member.maxGraphicsShaderGroupCount;}();
auto& json_value=json["maxIndirectSequenceCount"];
[&](){json_value=member.maxIndirectSequenceCount;}();
auto& json_value=json["maxIndirectCommandsTokenCount"];
[&](){json_value=member.maxIndirectCommandsTokenCount;}();
auto& json_value=json["maxIndirectCommandsStreamCount"];
[&](){json_value=member.maxIndirectCommandsStreamCount;}();
auto& json_value=json["maxIndirectCommandsTokenOffset"];
[&](){json_value=member.maxIndirectCommandsTokenOffset;}();
auto& json_value=json["maxIndirectCommandsStreamStride"];
[&](){json_value=member.maxIndirectCommandsStreamStride;}();
auto& json_value=json["minSequencesCountBufferOffsetAlignment"];
[&](){json_value=member.minSequencesCountBufferOffsetAlignment;}();
auto& json_value=json["minSequencesIndexBufferOffsetAlignment"];
[&](){json_value=member.minSequencesIndexBufferOffsetAlignment;}();
auto& json_value=json["minIndirectCommandsBufferOffsetAlignment"];
[&](){json_value=member.minIndirectCommandsBufferOffsetAlignment;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxGraphicsShaderGroupCount"];
[&](){member.maxGraphicsShaderGroupCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxIndirectSequenceCount"];
[&](){member.maxIndirectSequenceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxIndirectCommandsTokenCount"];
[&](){member.maxIndirectCommandsTokenCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxIndirectCommandsStreamCount"];
[&](){member.maxIndirectCommandsStreamCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxIndirectCommandsTokenOffset"];
[&](){member.maxIndirectCommandsTokenOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxIndirectCommandsStreamStride"];
[&](){member.maxIndirectCommandsStreamStride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minSequencesCountBufferOffsetAlignment"];
[&](){member.minSequencesCountBufferOffsetAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minSequencesIndexBufferOffsetAlignment"];
[&](){member.minSequencesIndexBufferOffsetAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minIndirectCommandsBufferOffsetAlignment"];
[&](){member.minIndirectCommandsBufferOffsetAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultiDrawPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxMultiDrawCount"];
[&](){json_value=member.maxMultiDrawCount;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultiDrawPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxMultiDrawCount"];
[&](){member.maxMultiDrawCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultiDrawPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultiDrawPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGraphicsShaderGroupCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stageCount"];
[&](){json_value=member.stageCount;}();
auto& json_value=json["pStages"];
[&](){
            if (member.pStages==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto& temp=json_value[jHuRulk].emplace_object();
            return serialize_struct(temp, member.pStages[jHuRulk]);
            }();
        }
        }();
auto& json_value=json["pVertexInputState"];
[&](){
            if (member.pVertexInputState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wkXjKqh=0; wkXjKqh < 1; wkXjKqh++){
            [&](){
            auto& temp=json_value[wkXjKqh].emplace_object();
            return serialize_struct(temp, member.pVertexInputState[wkXjKqh]);
            }();
        }
        }();
auto& json_value=json["pTessellationState"];
[&](){
            if (member.pTessellationState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rSxHnEH=0; rSxHnEH < 1; rSxHnEH++){
            [&](){
            auto& temp=json_value[rSxHnEH].emplace_object();
            return serialize_struct(temp, member.pTessellationState[rSxHnEH]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkGraphicsShaderGroupCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["stageCount"];
[&](){member.stageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStages"];
[&](){ VkPipelineShaderStageCreateInfo* temp_pfZGdpq[&](){
            if (!json_value.as_array().size()==0){
                temp_pfZGdpq=NULL;
            return; }temp_pfZGdpq=(VkPipelineShaderStageCreateInfo*)malloc(member.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto& arr=json_value.as_array();
        for(int XttzcgZ=0; XttzcgZ < member.stageCount; XttzcgZ++){
            [&](){
            auto& temp=json_value[XttzcgZ].as_object();
            deserialize_struct(temp,temp_pfZGdpq[XttzcgZ]);
            }();
        }
        }();member.pStages=temp_pfZGdpq;}();
auto& json_value=json["pVertexInputState"];
[&](){ VkPipelineVertexInputStateCreateInfo* temp_GRDNOgA[&](){
            if (!json_value.as_array().size()==0){
                temp_GRDNOgA=NULL;
            return; }temp_GRDNOgA=(VkPipelineVertexInputStateCreateInfo*)malloc(1*sizeof(VkPipelineVertexInputStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int RFpaRUE=0; RFpaRUE < 1; RFpaRUE++){
            [&](){
            auto& temp=json_value[RFpaRUE].as_object();
            deserialize_struct(temp,temp_GRDNOgA[RFpaRUE]);
            }();
        }
        }();member.pVertexInputState=temp_GRDNOgA;}();
auto& json_value=json["pTessellationState"];
[&](){ VkPipelineTessellationStateCreateInfo* temp_LTmoKJi[&](){
            if (!json_value.as_array().size()==0){
                temp_LTmoKJi=NULL;
            return; }temp_LTmoKJi=(VkPipelineTessellationStateCreateInfo*)malloc(1*sizeof(VkPipelineTessellationStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int QktcRuM=0; QktcRuM < 1; QktcRuM++){
            [&](){
            auto& temp=json_value[QktcRuM].as_object();
            deserialize_struct(temp,temp_LTmoKJi[QktcRuM]);
            }();
        }
        }();member.pTessellationState=temp_LTmoKJi;}();
}

    void serialize_pUserData(object& json, VkGraphicsShaderGroupCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGraphicsShaderGroupCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGraphicsPipelineShaderGroupsCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["groupCount"];
[&](){json_value=member.groupCount;}();
auto& json_value=json["pGroups"];
[&](){
            if (member.pGroups==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int SHuCqju=0; SHuCqju < member.groupCount; SHuCqju++){
            [&](){
            auto& temp=json_value[SHuCqju].emplace_object();
            return serialize_struct(temp, member.pGroups[SHuCqju]);
            }();
        }
        }();
auto& json_value=json["pipelineCount"];
[&](){json_value=member.pipelineCount;}();
auto& json_value=json["pPipelines"];
[&](){
            if (member.pPipelines==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lyGUQUU=0; lyGUQUU < member.pipelineCount; lyGUQUU++){
            [&](){serialize_handle(json_value[lyGUQUU],member.pPipelines[lyGUQUU]);}();
        }
        }();
}
void deserialize_struct(object& json, VkGraphicsPipelineShaderGroupsCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["groupCount"];
[&](){member.groupCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pGroups"];
[&](){ VkGraphicsShaderGroupCreateInfoNV* temp_CSVujtj[&](){
            if (!json_value.as_array().size()==0){
                temp_CSVujtj=NULL;
            return; }temp_CSVujtj=(VkGraphicsShaderGroupCreateInfoNV*)malloc(member.groupCount*sizeof(VkGraphicsShaderGroupCreateInfoNV));
        auto& arr=json_value.as_array();
        for(int KggKLeT=0; KggKLeT < member.groupCount; KggKLeT++){
            [&](){
            auto& temp=json_value[KggKLeT].as_object();
            deserialize_struct(temp,temp_CSVujtj[KggKLeT]);
            }();
        }
        }();member.pGroups=temp_CSVujtj;}();
auto& json_value=json["pipelineCount"];
[&](){member.pipelineCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPipelines"];
[&](){ VkPipeline* temp_nDPxhhw[&](){
            if (!json_value.as_array().size()==0){
                temp_nDPxhhw=NULL;
            return; }temp_nDPxhhw=(VkPipeline*)malloc(member.pipelineCount*sizeof(VkPipeline));
        auto& arr=json_value.as_array();
        for(int zikgMik=0; zikgMik < member.pipelineCount; zikgMik++){
            [&](){deserialize_handle(json_value[zikgMik], temp_nDPxhhw[zikgMik]);}();
        }
        }();member.pPipelines=temp_nDPxhhw;}();
}

    void serialize_pUserData(object& json, VkGraphicsPipelineShaderGroupsCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGraphicsPipelineShaderGroupsCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindShaderGroupIndirectCommandNV& member){
        
    
auto& json_value=json["groupIndex"];
[&](){json_value=member.groupIndex;}();
}
void deserialize_struct(object& json, VkBindShaderGroupIndirectCommandNV& member){
auto& json_value=json["groupIndex"];
[&](){member.groupIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkBindShaderGroupIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindShaderGroupIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindIndexBufferIndirectCommandNV& member){
        
    
auto& json_value=json["bufferAddress"];
[&](){[&](){json_value=member.bufferAddress;}();}();
auto& json_value=json["size"];
[&](){json_value=member.size;}();
auto& json_value=json["indexType"];
[&](){[&](){[&](){json_value=member.indexType;}();}();}();
}
void deserialize_struct(object& json, VkBindIndexBufferIndirectCommandNV& member){
auto& json_value=json["bufferAddress"];
[&](){[&](){member.bufferAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){member.size=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["indexType"];
[&](){[&](){VkIndexType temp_oHMXYuj[&](){temp_oHMXYuj=static_cast<int>(value_to<int>(json_value));}();member.indexType=(VkIndexType)temp_oHMXYuj;}();}();
}

    void serialize_pUserData(object& json, VkBindIndexBufferIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindIndexBufferIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindVertexBufferIndirectCommandNV& member){
        
    
auto& json_value=json["bufferAddress"];
[&](){[&](){json_value=member.bufferAddress;}();}();
auto& json_value=json["size"];
[&](){json_value=member.size;}();
auto& json_value=json["stride"];
[&](){json_value=member.stride;}();
}
void deserialize_struct(object& json, VkBindVertexBufferIndirectCommandNV& member){
auto& json_value=json["bufferAddress"];
[&](){[&](){member.bufferAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){member.size=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["stride"];
[&](){member.stride=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkBindVertexBufferIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindVertexBufferIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSetStateFlagsIndirectCommandNV& member){
        
    
auto& json_value=json["data"];
[&](){json_value=member.data;}();
}
void deserialize_struct(object& json, VkSetStateFlagsIndirectCommandNV& member){
auto& json_value=json["data"];
[&](){member.data=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSetStateFlagsIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSetStateFlagsIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkIndirectCommandsStreamNV& member){
        
    
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
}
void deserialize_struct(object& json, VkIndirectCommandsStreamNV& member){
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkIndirectCommandsStreamNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkIndirectCommandsStreamNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkIndirectCommandsLayoutTokenNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["tokenType"];
[&](){[&](){[&](){json_value=member.tokenType;}();}();}();
auto& json_value=json["stream"];
[&](){json_value=member.stream;}();
auto& json_value=json["offset"];
[&](){json_value=member.offset;}();
auto& json_value=json["vertexBindingUnit"];
[&](){json_value=member.vertexBindingUnit;}();
auto& json_value=json["vertexDynamicStride"];
[&](){[&](){json_value=member.vertexDynamicStride;}();}();
auto& json_value=json["pushconstantPipelineLayout"];
[&](){serialize_handle(json_value,member.pushconstantPipelineLayout);}();
auto& json_value=json["pushconstantShaderStageFlags"];
[&](){[&](){[&](){json_value=member.pushconstantShaderStageFlags;}();}();}();
auto& json_value=json["pushconstantOffset"];
[&](){json_value=member.pushconstantOffset;}();
auto& json_value=json["pushconstantSize"];
[&](){json_value=member.pushconstantSize;}();
auto& json_value=json["indirectStateFlags"];
[&](){[&](){[&](){json_value=member.indirectStateFlags;}();}();}();
auto& json_value=json["indexTypeCount"];
[&](){json_value=member.indexTypeCount;}();
auto& json_value=json["pIndexTypes"];
[&](){
            if (member.pIndexTypes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int MJIZeIG=0; MJIZeIG < member.indexTypeCount; MJIZeIG++){
            [&](){[&](){[&](){json_value[MJIZeIG]=member.pIndexTypes[MJIZeIG];}();}();}();
        }
        }();
auto& json_value=json["pIndexTypeValues"];
[&](){
            if (member.pIndexTypeValues==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int FhKsxka=0; FhKsxka < member.indexTypeCount; FhKsxka++){
            [&](){json_value[FhKsxka]=member.pIndexTypeValues[FhKsxka];}();
        }
        }();
}
void deserialize_struct(object& json, VkIndirectCommandsLayoutTokenNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["tokenType"];
[&](){[&](){VkIndirectCommandsTokenTypeNV temp_OdOtbGT[&](){temp_OdOtbGT=static_cast<int>(value_to<int>(json_value));}();member.tokenType=(VkIndirectCommandsTokenTypeNV)temp_OdOtbGT;}();}();
auto& json_value=json["stream"];
[&](){member.stream=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["offset"];
[&](){member.offset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vertexBindingUnit"];
[&](){member.vertexBindingUnit=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vertexDynamicStride"];
[&](){[&](){member.vertexDynamicStride=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["pushconstantPipelineLayout"];
[&](){deserialize_handle(json_value, member.pushconstantPipelineLayout);}();
auto& json_value=json["pushconstantShaderStageFlags"];
[&](){[&](){VkShaderStageFlags temp_avSvpAB[&](){temp_avSvpAB=static_cast<int>(value_to<int>(json_value));}();member.pushconstantShaderStageFlags=(VkShaderStageFlags)temp_avSvpAB;}();}();
auto& json_value=json["pushconstantOffset"];
[&](){member.pushconstantOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pushconstantSize"];
[&](){member.pushconstantSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["indirectStateFlags"];
[&](){[&](){VkIndirectStateFlagsNV temp_tNMpscP[&](){temp_tNMpscP=static_cast<int>(value_to<int>(json_value));}();member.indirectStateFlags=(VkIndirectStateFlagsNV)temp_tNMpscP;}();}();
auto& json_value=json["indexTypeCount"];
[&](){member.indexTypeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pIndexTypes"];
[&](){ VkIndexType* temp_pPgHSDQ[&](){
            if (!json_value.as_array().size()==0){
                temp_pPgHSDQ=NULL;
            return; }temp_pPgHSDQ=(VkIndexType*)malloc(member.indexTypeCount*sizeof(VkIndexType));
        auto& arr=json_value.as_array();
        for(int FoZJVOk=0; FoZJVOk < member.indexTypeCount; FoZJVOk++){
            [&](){[&](){const VkIndexType* temp_xLyVgWc[&](){temp_xLyVgWc=static_cast<int>(value_to<int>(json_value[FoZJVOk]));}();temp_pPgHSDQ[FoZJVOk]=(VkIndexType)temp_xLyVgWc;}();}();
        }
        }();member.pIndexTypes=temp_pPgHSDQ;}();
auto& json_value=json["pIndexTypeValues"];
[&](){ uint32_t* temp_bXqjMYG[&](){
            if (!json_value.as_array().size()==0){
                temp_bXqjMYG=NULL;
            return; }temp_bXqjMYG=(uint32_t*)malloc(member.indexTypeCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int kfKnjmM=0; kfKnjmM < member.indexTypeCount; kfKnjmM++){
            [&](){temp_bXqjMYG[kfKnjmM]=static_cast<uint32_t>(value_to<int>(json_value[kfKnjmM]));}();
        }
        }();member.pIndexTypeValues=temp_bXqjMYG;}();
}

    void serialize_pUserData(object& json, VkIndirectCommandsLayoutTokenNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkIndirectCommandsLayoutTokenNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkIndirectCommandsLayoutCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){[&](){json_value=member.pipelineBindPoint;}();}();}();
auto& json_value=json["tokenCount"];
[&](){json_value=member.tokenCount;}();
auto& json_value=json["pTokens"];
[&](){
            if (member.pTokens==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int yPSEeiQ=0; yPSEeiQ < member.tokenCount; yPSEeiQ++){
            [&](){
            auto& temp=json_value[yPSEeiQ].emplace_object();
            return serialize_struct(temp, member.pTokens[yPSEeiQ]);
            }();
        }
        }();
auto& json_value=json["streamCount"];
[&](){json_value=member.streamCount;}();
auto& json_value=json["pStreamStrides"];
[&](){
            if (member.pStreamStrides==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int MyKJLOU=0; MyKJLOU < member.streamCount; MyKJLOU++){
            [&](){json_value[MyKJLOU]=member.pStreamStrides[MyKJLOU];}();
        }
        }();
}
void deserialize_struct(object& json, VkIndirectCommandsLayoutCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkIndirectCommandsLayoutUsageFlagsNV temp_PtbsjZx[&](){temp_PtbsjZx=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkIndirectCommandsLayoutUsageFlagsNV)temp_PtbsjZx;}();}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){VkPipelineBindPoint temp_fyjKPoR[&](){temp_fyjKPoR=static_cast<int>(value_to<int>(json_value));}();member.pipelineBindPoint=(VkPipelineBindPoint)temp_fyjKPoR;}();}();
auto& json_value=json["tokenCount"];
[&](){member.tokenCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pTokens"];
[&](){ VkIndirectCommandsLayoutTokenNV* temp_DjQmuAs[&](){
            if (!json_value.as_array().size()==0){
                temp_DjQmuAs=NULL;
            return; }temp_DjQmuAs=(VkIndirectCommandsLayoutTokenNV*)malloc(member.tokenCount*sizeof(VkIndirectCommandsLayoutTokenNV));
        auto& arr=json_value.as_array();
        for(int QziMwaF=0; QziMwaF < member.tokenCount; QziMwaF++){
            [&](){
            auto& temp=json_value[QziMwaF].as_object();
            deserialize_struct(temp,temp_DjQmuAs[QziMwaF]);
            }();
        }
        }();member.pTokens=temp_DjQmuAs;}();
auto& json_value=json["streamCount"];
[&](){member.streamCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStreamStrides"];
[&](){ uint32_t* temp_gGGtwUJ[&](){
            if (!json_value.as_array().size()==0){
                temp_gGGtwUJ=NULL;
            return; }temp_gGGtwUJ=(uint32_t*)malloc(member.streamCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int fUQEhtt=0; fUQEhtt < member.streamCount; fUQEhtt++){
            [&](){temp_gGGtwUJ[fUQEhtt]=static_cast<uint32_t>(value_to<int>(json_value[fUQEhtt]));}();
        }
        }();member.pStreamStrides=temp_gGGtwUJ;}();
}

    void serialize_pUserData(object& json, VkIndirectCommandsLayoutCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkIndirectCommandsLayoutCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGeneratedCommandsInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){[&](){json_value=member.pipelineBindPoint;}();}();}();
auto& json_value=json["pipeline"];
[&](){serialize_handle(json_value,member.pipeline);}();
auto& json_value=json["indirectCommandsLayout"];
[&](){serialize_handle(json_value,member.indirectCommandsLayout);}();
auto& json_value=json["streamCount"];
[&](){json_value=member.streamCount;}();
auto& json_value=json["pStreams"];
[&](){
            if (member.pStreams==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int TYeqEkQ=0; TYeqEkQ < member.streamCount; TYeqEkQ++){
            [&](){
            auto& temp=json_value[TYeqEkQ].emplace_object();
            return serialize_struct(temp, member.pStreams[TYeqEkQ]);
            }();
        }
        }();
auto& json_value=json["sequencesCount"];
[&](){json_value=member.sequencesCount;}();
auto& json_value=json["preprocessBuffer"];
[&](){serialize_handle(json_value,member.preprocessBuffer);}();
auto& json_value=json["preprocessOffset"];
[&](){[&](){json_value=member.preprocessOffset;}();}();
auto& json_value=json["preprocessSize"];
[&](){[&](){json_value=member.preprocessSize;}();}();
auto& json_value=json["sequencesCountBuffer"];
[&](){serialize_handle(json_value,member.sequencesCountBuffer);}();
auto& json_value=json["sequencesCountOffset"];
[&](){[&](){json_value=member.sequencesCountOffset;}();}();
auto& json_value=json["sequencesIndexBuffer"];
[&](){serialize_handle(json_value,member.sequencesIndexBuffer);}();
auto& json_value=json["sequencesIndexOffset"];
[&](){[&](){json_value=member.sequencesIndexOffset;}();}();
}
void deserialize_struct(object& json, VkGeneratedCommandsInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){VkPipelineBindPoint temp_fyjKPoR[&](){temp_fyjKPoR=static_cast<int>(value_to<int>(json_value));}();member.pipelineBindPoint=(VkPipelineBindPoint)temp_fyjKPoR;}();}();
auto& json_value=json["pipeline"];
[&](){deserialize_handle(json_value, member.pipeline);}();
auto& json_value=json["indirectCommandsLayout"];
[&](){deserialize_handle(json_value, member.indirectCommandsLayout);}();
auto& json_value=json["streamCount"];
[&](){member.streamCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStreams"];
[&](){ VkIndirectCommandsStreamNV* temp_nKUuvgl[&](){
            if (!json_value.as_array().size()==0){
                temp_nKUuvgl=NULL;
            return; }temp_nKUuvgl=(VkIndirectCommandsStreamNV*)malloc(member.streamCount*sizeof(VkIndirectCommandsStreamNV));
        auto& arr=json_value.as_array();
        for(int rDgynwm=0; rDgynwm < member.streamCount; rDgynwm++){
            [&](){
            auto& temp=json_value[rDgynwm].as_object();
            deserialize_struct(temp,temp_nKUuvgl[rDgynwm]);
            }();
        }
        }();member.pStreams=temp_nKUuvgl;}();
auto& json_value=json["sequencesCount"];
[&](){member.sequencesCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["preprocessBuffer"];
[&](){deserialize_handle(json_value, member.preprocessBuffer);}();
auto& json_value=json["preprocessOffset"];
[&](){[&](){member.preprocessOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["preprocessSize"];
[&](){[&](){member.preprocessSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sequencesCountBuffer"];
[&](){deserialize_handle(json_value, member.sequencesCountBuffer);}();
auto& json_value=json["sequencesCountOffset"];
[&](){[&](){member.sequencesCountOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sequencesIndexBuffer"];
[&](){deserialize_handle(json_value, member.sequencesIndexBuffer);}();
auto& json_value=json["sequencesIndexOffset"];
[&](){[&](){member.sequencesIndexOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkGeneratedCommandsInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGeneratedCommandsInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGeneratedCommandsMemoryRequirementsInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){[&](){json_value=member.pipelineBindPoint;}();}();}();
auto& json_value=json["pipeline"];
[&](){serialize_handle(json_value,member.pipeline);}();
auto& json_value=json["indirectCommandsLayout"];
[&](){serialize_handle(json_value,member.indirectCommandsLayout);}();
auto& json_value=json["maxSequencesCount"];
[&](){json_value=member.maxSequencesCount;}();
}
void deserialize_struct(object& json, VkGeneratedCommandsMemoryRequirementsInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){VkPipelineBindPoint temp_fyjKPoR[&](){temp_fyjKPoR=static_cast<int>(value_to<int>(json_value));}();member.pipelineBindPoint=(VkPipelineBindPoint)temp_fyjKPoR;}();}();
auto& json_value=json["pipeline"];
[&](){deserialize_handle(json_value, member.pipeline);}();
auto& json_value=json["indirectCommandsLayout"];
[&](){deserialize_handle(json_value, member.indirectCommandsLayout);}();
auto& json_value=json["maxSequencesCount"];
[&](){member.maxSequencesCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkGeneratedCommandsMemoryRequirementsInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGeneratedCommandsMemoryRequirementsInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineIndirectDeviceAddressInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){[&](){json_value=member.pipelineBindPoint;}();}();}();
auto& json_value=json["pipeline"];
[&](){serialize_handle(json_value,member.pipeline);}();
}
void deserialize_struct(object& json, VkPipelineIndirectDeviceAddressInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){VkPipelineBindPoint temp_fyjKPoR[&](){temp_fyjKPoR=static_cast<int>(value_to<int>(json_value));}();member.pipelineBindPoint=(VkPipelineBindPoint)temp_fyjKPoR;}();}();
auto& json_value=json["pipeline"];
[&](){deserialize_handle(json_value, member.pipeline);}();
}

    void serialize_pUserData(object& json, VkPipelineIndirectDeviceAddressInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineIndirectDeviceAddressInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindPipelineIndirectCommandNV& member){
        
    
auto& json_value=json["pipelineAddress"];
[&](){[&](){json_value=member.pipelineAddress;}();}();
}
void deserialize_struct(object& json, VkBindPipelineIndirectCommandNV& member){
auto& json_value=json["pipelineAddress"];
[&](){[&](){member.pipelineAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBindPipelineIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindPipelineIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFeatures2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["features"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.features);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceFeatures2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["features"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.features);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFeatures2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFeatures2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceProperties2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["properties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.properties);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceProperties2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["properties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.properties);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceProperties2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceProperties2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFormatProperties2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["formatProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.formatProperties);
            }();
}
void deserialize_struct(object& json, VkFormatProperties2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["formatProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.formatProperties);
            }();
}

    void serialize_pUserData(object& json, VkFormatProperties2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFormatProperties2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageFormatProperties2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageFormatProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageFormatProperties);
            }();
}
void deserialize_struct(object& json, VkImageFormatProperties2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageFormatProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageFormatProperties);
            }();
}

    void serialize_pUserData(object& json, VkImageFormatProperties2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageFormatProperties2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageFormatInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["tiling"];
[&](){[&](){[&](){json_value=member.tiling;}();}();}();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageFormatInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["type"];
[&](){[&](){VkImageType temp_AbsdHqq[&](){temp_AbsdHqq=static_cast<int>(value_to<int>(json_value));}();member.type=(VkImageType)temp_AbsdHqq;}();}();
auto& json_value=json["tiling"];
[&](){[&](){VkImageTiling temp_zOVFPJK[&](){temp_zOVFPJK=static_cast<int>(value_to<int>(json_value));}();member.tiling=(VkImageTiling)temp_zOVFPJK;}();}();
auto& json_value=json["usage"];
[&](){[&](){VkImageUsageFlags temp_wDutYxX[&](){temp_wDutYxX=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkImageUsageFlags)temp_wDutYxX;}();}();
auto& json_value=json["flags"];
[&](){[&](){VkImageCreateFlags temp_IdOZaju[&](){temp_IdOZaju=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkImageCreateFlags)temp_IdOZaju;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageFormatInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageFormatInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueueFamilyProperties2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["queueFamilyProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.queueFamilyProperties);
            }();
}
void deserialize_struct(object& json, VkQueueFamilyProperties2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["queueFamilyProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.queueFamilyProperties);
            }();
}

    void serialize_pUserData(object& json, VkQueueFamilyProperties2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueueFamilyProperties2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMemoryProperties2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.memoryProperties);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceMemoryProperties2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.memoryProperties);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMemoryProperties2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMemoryProperties2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseImageFormatProperties2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["properties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.properties);
            }();
}
void deserialize_struct(object& json, VkSparseImageFormatProperties2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["properties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.properties);
            }();
}

    void serialize_pUserData(object& json, VkSparseImageFormatProperties2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseImageFormatProperties2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSparseImageFormatInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["samples"];
[&](){[&](){[&](){json_value=member.samples;}();}();}();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
auto& json_value=json["tiling"];
[&](){[&](){[&](){json_value=member.tiling;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSparseImageFormatInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["type"];
[&](){[&](){VkImageType temp_AbsdHqq[&](){temp_AbsdHqq=static_cast<int>(value_to<int>(json_value));}();member.type=(VkImageType)temp_AbsdHqq;}();}();
auto& json_value=json["samples"];
[&](){[&](){VkSampleCountFlagBits temp_sbydRzr[&](){temp_sbydRzr=static_cast<int>(value_to<int>(json_value));}();member.samples=(VkSampleCountFlagBits)temp_sbydRzr;}();}();
auto& json_value=json["usage"];
[&](){[&](){VkImageUsageFlags temp_wDutYxX[&](){temp_wDutYxX=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkImageUsageFlags)temp_wDutYxX;}();}();
auto& json_value=json["tiling"];
[&](){[&](){VkImageTiling temp_zOVFPJK[&](){temp_zOVFPJK=static_cast<int>(value_to<int>(json_value));}();member.tiling=(VkImageTiling)temp_zOVFPJK;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSparseImageFormatInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSparseImageFormatInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePushDescriptorPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxPushDescriptors"];
[&](){json_value=member.maxPushDescriptors;}();
}
void deserialize_struct(object& json, VkPhysicalDevicePushDescriptorPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxPushDescriptors"];
[&](){member.maxPushDescriptors=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePushDescriptorPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePushDescriptorPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkConformanceVersion& member){
        
    
auto& json_value=json["major"];
[&](){json_value=member.major;}();
auto& json_value=json["minor"];
[&](){json_value=member.minor;}();
auto& json_value=json["subminor"];
[&](){json_value=member.subminor;}();
auto& json_value=json["patch"];
[&](){json_value=member.patch;}();
}
void deserialize_struct(object& json, VkConformanceVersion& member){
auto& json_value=json["major"];
[&](){member.major=static_cast<uint8_t>(value_to<int>(json_value));}();
auto& json_value=json["minor"];
[&](){member.minor=static_cast<uint8_t>(value_to<int>(json_value));}();
auto& json_value=json["subminor"];
[&](){member.subminor=static_cast<uint8_t>(value_to<int>(json_value));}();
auto& json_value=json["patch"];
[&](){member.patch=static_cast<uint8_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkConformanceVersion& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkConformanceVersion& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDriverProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["driverID"];
[&](){[&](){[&](){json_value=member.driverID;}();}();}();
auto& json_value=json["driverName"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){json_value[eglnjYG]=member.driverName[eglnjYG];}();
        }
        }();
auto& json_value=json["driverInfo"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){json_value[ygBYlpo]=member.driverInfo[ygBYlpo];}();
        }
        }();
auto& json_value=json["conformanceVersion"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.conformanceVersion);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceDriverProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["driverID"];
[&](){[&](){VkDriverId temp_gEVfXKa[&](){temp_gEVfXKa=static_cast<int>(value_to<int>(json_value));}();member.driverID=(VkDriverId)temp_gEVfXKa;}();}();
auto& json_value=json["driverName"];
[&](){
        auto& arr=json_value.as_array();
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){member.driverName[eglnjYG]=static_cast<char>(value_to<int>(json_value[eglnjYG]));}();
        }
        }();
auto& json_value=json["driverInfo"];
[&](){
        auto& arr=json_value.as_array();
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){member.driverInfo[ygBYlpo]=static_cast<char>(value_to<int>(json_value[ygBYlpo]));}();
        }
        }();
auto& json_value=json["conformanceVersion"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.conformanceVersion);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDriverProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDriverProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPresentRegionsKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchainCount"];
[&](){json_value=member.swapchainCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int SKDbKhP=0; SKDbKhP < member.swapchainCount; SKDbKhP++){
            [&](){
            auto& temp=json_value[SKDbKhP].emplace_object();
            return serialize_struct(temp, member.pRegions[SKDbKhP]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPresentRegionsKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchainCount"];
[&](){member.swapchainCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkPresentRegionKHR* temp_MNLvByU[&](){
            if (!json_value.as_array().size()==0){
                temp_MNLvByU=NULL;
            return; }temp_MNLvByU=(VkPresentRegionKHR*)malloc(member.swapchainCount*sizeof(VkPresentRegionKHR));
        auto& arr=json_value.as_array();
        for(int eyUXdIG=0; eyUXdIG < member.swapchainCount; eyUXdIG++){
            [&](){
            auto& temp=json_value[eyUXdIG].as_object();
            deserialize_struct(temp,temp_MNLvByU[eyUXdIG]);
            }();
        }
        }();member.pRegions=temp_MNLvByU;}();
}

    void serialize_pUserData(object& json, VkPresentRegionsKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPresentRegionsKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPresentRegionKHR& member){
        
    
auto& json_value=json["rectangleCount"];
[&](){json_value=member.rectangleCount;}();
auto& json_value=json["pRectangles"];
[&](){
            if (member.pRectangles==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int hAYHxnM=0; hAYHxnM < member.rectangleCount; hAYHxnM++){
            [&](){
            auto& temp=json_value[hAYHxnM].emplace_object();
            return serialize_struct(temp, member.pRectangles[hAYHxnM]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPresentRegionKHR& member){
auto& json_value=json["rectangleCount"];
[&](){member.rectangleCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRectangles"];
[&](){ VkRectLayerKHR* temp_GmHMtfK[&](){
            if (!json_value.as_array().size()==0){
                temp_GmHMtfK=NULL;
            return; }temp_GmHMtfK=(VkRectLayerKHR*)malloc(member.rectangleCount*sizeof(VkRectLayerKHR));
        auto& arr=json_value.as_array();
        for(int jYyfhtN=0; jYyfhtN < member.rectangleCount; jYyfhtN++){
            [&](){
            auto& temp=json_value[jYyfhtN].as_object();
            deserialize_struct(temp,temp_GmHMtfK[jYyfhtN]);
            }();
        }
        }();member.pRectangles=temp_GmHMtfK;}();
}

    void serialize_pUserData(object& json, VkPresentRegionKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPresentRegionKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRectLayerKHR& member){
        
    
auto& json_value=json["offset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.offset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
auto& json_value=json["layer"];
[&](){json_value=member.layer;}();
}
void deserialize_struct(object& json, VkRectLayerKHR& member){
auto& json_value=json["offset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.offset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
auto& json_value=json["layer"];
[&](){member.layer=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRectLayerKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRectLayerKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVariablePointersFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["variablePointersStorageBuffer"];
[&](){[&](){json_value=member.variablePointersStorageBuffer;}();}();
auto& json_value=json["variablePointers"];
[&](){[&](){json_value=member.variablePointers;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVariablePointersFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["variablePointersStorageBuffer"];
[&](){[&](){member.variablePointersStorageBuffer=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["variablePointers"];
[&](){[&](){member.variablePointers=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVariablePointersFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVariablePointersFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalMemoryProperties& member){
        
    
auto& json_value=json["externalMemoryFeatures"];
[&](){[&](){[&](){json_value=member.externalMemoryFeatures;}();}();}();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){[&](){json_value=member.exportFromImportedHandleTypes;}();}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){[&](){json_value=member.compatibleHandleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExternalMemoryProperties& member){
auto& json_value=json["externalMemoryFeatures"];
[&](){[&](){VkExternalMemoryFeatureFlags temp_WlniHpu[&](){temp_WlniHpu=static_cast<int>(value_to<int>(json_value));}();member.externalMemoryFeatures=(VkExternalMemoryFeatureFlags)temp_WlniHpu;}();}();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlags temp_SAnrTUF[&](){temp_SAnrTUF=static_cast<int>(value_to<int>(json_value));}();member.exportFromImportedHandleTypes=(VkExternalMemoryHandleTypeFlags)temp_SAnrTUF;}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlags temp_sgBGLjr[&](){temp_sgBGLjr=static_cast<int>(value_to<int>(json_value));}();member.compatibleHandleTypes=(VkExternalMemoryHandleTypeFlags)temp_sgBGLjr;}();}();
}

    void serialize_pUserData(object& json, VkExternalMemoryProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalMemoryProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExternalImageFormatInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExternalImageFormatInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalMemoryHandleTypeFlagBits temp_lYNzwhd[&](){temp_lYNzwhd=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalMemoryHandleTypeFlagBits)temp_lYNzwhd;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExternalImageFormatInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExternalImageFormatInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalImageFormatProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["externalMemoryProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.externalMemoryProperties);
            }();
}
void deserialize_struct(object& json, VkExternalImageFormatProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["externalMemoryProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.externalMemoryProperties);
            }();
}

    void serialize_pUserData(object& json, VkExternalImageFormatProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalImageFormatProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExternalBufferInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExternalBufferInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkBufferCreateFlags temp_SvLLkek[&](){temp_SvLLkek=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkBufferCreateFlags)temp_SvLLkek;}();}();
auto& json_value=json["usage"];
[&](){[&](){VkBufferUsageFlags temp_AJXZWOt[&](){temp_AJXZWOt=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkBufferUsageFlags)temp_AJXZWOt;}();}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalMemoryHandleTypeFlagBits temp_lYNzwhd[&](){temp_lYNzwhd=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalMemoryHandleTypeFlagBits)temp_lYNzwhd;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExternalBufferInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExternalBufferInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalBufferProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["externalMemoryProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.externalMemoryProperties);
            }();
}
void deserialize_struct(object& json, VkExternalBufferProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["externalMemoryProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.externalMemoryProperties);
            }();
}

    void serialize_pUserData(object& json, VkExternalBufferProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalBufferProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceIDProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){json_value[LghVtrk]=member.deviceUUID[LghVtrk];}();
        }
        }();
auto& json_value=json["driverUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){json_value[WbhUlZS]=member.driverUUID[WbhUlZS];}();
        }
        }();
auto& json_value=json["deviceLUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){json_value[kitdKfY]=member.deviceLUID[kitdKfY];}();
        }
        }();
auto& json_value=json["deviceNodeMask"];
[&](){json_value=member.deviceNodeMask;}();
auto& json_value=json["deviceLUIDValid"];
[&](){[&](){json_value=member.deviceLUIDValid;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceIDProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){member.deviceUUID[LghVtrk]=static_cast<uint8_t>(value_to<int>(json_value[LghVtrk]));}();
        }
        }();
auto& json_value=json["driverUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){member.driverUUID[WbhUlZS]=static_cast<uint8_t>(value_to<int>(json_value[WbhUlZS]));}();
        }
        }();
auto& json_value=json["deviceLUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){member.deviceLUID[kitdKfY]=static_cast<uint8_t>(value_to<int>(json_value[kitdKfY]));}();
        }
        }();
auto& json_value=json["deviceNodeMask"];
[&](){member.deviceNodeMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["deviceLUIDValid"];
[&](){[&](){member.deviceLUIDValid=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceIDProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceIDProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalMemoryImageCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleTypes"];
[&](){[&](){[&](){json_value=member.handleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExternalMemoryImageCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlags temp_xKKuSKa[&](){temp_xKKuSKa=static_cast<int>(value_to<int>(json_value));}();member.handleTypes=(VkExternalMemoryHandleTypeFlags)temp_xKKuSKa;}();}();
}

    void serialize_pUserData(object& json, VkExternalMemoryImageCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalMemoryImageCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalMemoryBufferCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleTypes"];
[&](){[&](){[&](){json_value=member.handleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExternalMemoryBufferCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlags temp_xKKuSKa[&](){temp_xKKuSKa=static_cast<int>(value_to<int>(json_value));}();member.handleTypes=(VkExternalMemoryHandleTypeFlags)temp_xKKuSKa;}();}();
}

    void serialize_pUserData(object& json, VkExternalMemoryBufferCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalMemoryBufferCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExportMemoryAllocateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleTypes"];
[&](){[&](){[&](){json_value=member.handleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExportMemoryAllocateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleTypes"];
[&](){[&](){VkExternalMemoryHandleTypeFlags temp_xKKuSKa[&](){temp_xKKuSKa=static_cast<int>(value_to<int>(json_value));}();member.handleTypes=(VkExternalMemoryHandleTypeFlags)temp_xKKuSKa;}();}();
}

    void serialize_pUserData(object& json, VkExportMemoryAllocateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExportMemoryAllocateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImportMemoryFdInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
auto& json_value=json["fd"];
[&](){json_value=member.fd;}();
}
void deserialize_struct(object& json, VkImportMemoryFdInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalMemoryHandleTypeFlagBits temp_lYNzwhd[&](){temp_lYNzwhd=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalMemoryHandleTypeFlagBits)temp_lYNzwhd;}();}();
auto& json_value=json["fd"];
[&](){member.fd=static_cast<int>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImportMemoryFdInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImportMemoryFdInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryFdPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryTypeBits"];
[&](){json_value=member.memoryTypeBits;}();
}
void deserialize_struct(object& json, VkMemoryFdPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryTypeBits"];
[&](){member.memoryTypeBits=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryFdPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryFdPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryGetFdInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkMemoryGetFdInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalMemoryHandleTypeFlagBits temp_lYNzwhd[&](){temp_lYNzwhd=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalMemoryHandleTypeFlagBits)temp_lYNzwhd;}();}();
}

    void serialize_pUserData(object& json, VkMemoryGetFdInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryGetFdInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExternalSemaphoreInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExternalSemaphoreInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalSemaphoreHandleTypeFlagBits temp_dKMVHYR[&](){temp_dKMVHYR=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalSemaphoreHandleTypeFlagBits)temp_dKMVHYR;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExternalSemaphoreInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExternalSemaphoreInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalSemaphoreProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){[&](){json_value=member.exportFromImportedHandleTypes;}();}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){[&](){json_value=member.compatibleHandleTypes;}();}();}();
auto& json_value=json["externalSemaphoreFeatures"];
[&](){[&](){[&](){json_value=member.externalSemaphoreFeatures;}();}();}();
}
void deserialize_struct(object& json, VkExternalSemaphoreProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){VkExternalSemaphoreHandleTypeFlags temp_SqziENx[&](){temp_SqziENx=static_cast<int>(value_to<int>(json_value));}();member.exportFromImportedHandleTypes=(VkExternalSemaphoreHandleTypeFlags)temp_SqziENx;}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){VkExternalSemaphoreHandleTypeFlags temp_RDMPXQf[&](){temp_RDMPXQf=static_cast<int>(value_to<int>(json_value));}();member.compatibleHandleTypes=(VkExternalSemaphoreHandleTypeFlags)temp_RDMPXQf;}();}();
auto& json_value=json["externalSemaphoreFeatures"];
[&](){[&](){VkExternalSemaphoreFeatureFlags temp_pMXWmBO[&](){temp_pMXWmBO=static_cast<int>(value_to<int>(json_value));}();member.externalSemaphoreFeatures=(VkExternalSemaphoreFeatureFlags)temp_pMXWmBO;}();}();
}

    void serialize_pUserData(object& json, VkExternalSemaphoreProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalSemaphoreProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExportSemaphoreCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleTypes"];
[&](){[&](){[&](){json_value=member.handleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExportSemaphoreCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleTypes"];
[&](){[&](){VkExternalSemaphoreHandleTypeFlags temp_tMDHISX[&](){temp_tMDHISX=static_cast<int>(value_to<int>(json_value));}();member.handleTypes=(VkExternalSemaphoreHandleTypeFlags)temp_tMDHISX;}();}();
}

    void serialize_pUserData(object& json, VkExportSemaphoreCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExportSemaphoreCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImportSemaphoreFdInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["semaphore"];
[&](){serialize_handle(json_value,member.semaphore);}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
auto& json_value=json["fd"];
[&](){json_value=member.fd;}();
}
void deserialize_struct(object& json, VkImportSemaphoreFdInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["semaphore"];
[&](){deserialize_handle(json_value, member.semaphore);}();
auto& json_value=json["flags"];
[&](){[&](){VkSemaphoreImportFlags temp_xdmjImq[&](){temp_xdmjImq=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSemaphoreImportFlags)temp_xdmjImq;}();}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalSemaphoreHandleTypeFlagBits temp_dKMVHYR[&](){temp_dKMVHYR=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalSemaphoreHandleTypeFlagBits)temp_dKMVHYR;}();}();
auto& json_value=json["fd"];
[&](){member.fd=static_cast<int>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImportSemaphoreFdInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImportSemaphoreFdInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSemaphoreGetFdInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["semaphore"];
[&](){serialize_handle(json_value,member.semaphore);}();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkSemaphoreGetFdInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["semaphore"];
[&](){deserialize_handle(json_value, member.semaphore);}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalSemaphoreHandleTypeFlagBits temp_dKMVHYR[&](){temp_dKMVHYR=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalSemaphoreHandleTypeFlagBits)temp_dKMVHYR;}();}();
}

    void serialize_pUserData(object& json, VkSemaphoreGetFdInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSemaphoreGetFdInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExternalFenceInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExternalFenceInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalFenceHandleTypeFlagBits temp_IIDnfWh[&](){temp_IIDnfWh=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalFenceHandleTypeFlagBits)temp_IIDnfWh;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExternalFenceInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExternalFenceInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalFenceProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){[&](){json_value=member.exportFromImportedHandleTypes;}();}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){[&](){json_value=member.compatibleHandleTypes;}();}();}();
auto& json_value=json["externalFenceFeatures"];
[&](){[&](){[&](){json_value=member.externalFenceFeatures;}();}();}();
}
void deserialize_struct(object& json, VkExternalFenceProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["exportFromImportedHandleTypes"];
[&](){[&](){VkExternalFenceHandleTypeFlags temp_ltWFMUd[&](){temp_ltWFMUd=static_cast<int>(value_to<int>(json_value));}();member.exportFromImportedHandleTypes=(VkExternalFenceHandleTypeFlags)temp_ltWFMUd;}();}();
auto& json_value=json["compatibleHandleTypes"];
[&](){[&](){VkExternalFenceHandleTypeFlags temp_qbzVgzB[&](){temp_qbzVgzB=static_cast<int>(value_to<int>(json_value));}();member.compatibleHandleTypes=(VkExternalFenceHandleTypeFlags)temp_qbzVgzB;}();}();
auto& json_value=json["externalFenceFeatures"];
[&](){[&](){VkExternalFenceFeatureFlags temp_sXpTWpE[&](){temp_sXpTWpE=static_cast<int>(value_to<int>(json_value));}();member.externalFenceFeatures=(VkExternalFenceFeatureFlags)temp_sXpTWpE;}();}();
}

    void serialize_pUserData(object& json, VkExternalFenceProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalFenceProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExportFenceCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleTypes"];
[&](){[&](){[&](){json_value=member.handleTypes;}();}();}();
}
void deserialize_struct(object& json, VkExportFenceCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleTypes"];
[&](){[&](){VkExternalFenceHandleTypeFlags temp_QdSDqGg[&](){temp_QdSDqGg=static_cast<int>(value_to<int>(json_value));}();member.handleTypes=(VkExternalFenceHandleTypeFlags)temp_QdSDqGg;}();}();
}

    void serialize_pUserData(object& json, VkExportFenceCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExportFenceCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImportFenceFdInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fence"];
[&](){serialize_handle(json_value,member.fence);}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
auto& json_value=json["fd"];
[&](){json_value=member.fd;}();
}
void deserialize_struct(object& json, VkImportFenceFdInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["fence"];
[&](){deserialize_handle(json_value, member.fence);}();
auto& json_value=json["flags"];
[&](){[&](){VkFenceImportFlags temp_KIdxYkG[&](){temp_KIdxYkG=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkFenceImportFlags)temp_KIdxYkG;}();}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalFenceHandleTypeFlagBits temp_IIDnfWh[&](){temp_IIDnfWh=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalFenceHandleTypeFlagBits)temp_IIDnfWh;}();}();
auto& json_value=json["fd"];
[&](){member.fd=static_cast<int>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImportFenceFdInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImportFenceFdInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFenceGetFdInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fence"];
[&](){serialize_handle(json_value,member.fence);}();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkFenceGetFdInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["fence"];
[&](){deserialize_handle(json_value, member.fence);}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalFenceHandleTypeFlagBits temp_IIDnfWh[&](){temp_IIDnfWh=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalFenceHandleTypeFlagBits)temp_IIDnfWh;}();}();
}

    void serialize_pUserData(object& json, VkFenceGetFdInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFenceGetFdInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultiviewFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["multiview"];
[&](){[&](){json_value=member.multiview;}();}();
auto& json_value=json["multiviewGeometryShader"];
[&](){[&](){json_value=member.multiviewGeometryShader;}();}();
auto& json_value=json["multiviewTessellationShader"];
[&](){[&](){json_value=member.multiviewTessellationShader;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultiviewFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["multiview"];
[&](){[&](){member.multiview=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiviewGeometryShader"];
[&](){[&](){member.multiviewGeometryShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiviewTessellationShader"];
[&](){[&](){member.multiviewTessellationShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultiviewFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultiviewFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultiviewProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxMultiviewViewCount"];
[&](){json_value=member.maxMultiviewViewCount;}();
auto& json_value=json["maxMultiviewInstanceIndex"];
[&](){json_value=member.maxMultiviewInstanceIndex;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultiviewProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxMultiviewViewCount"];
[&](){member.maxMultiviewViewCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMultiviewInstanceIndex"];
[&](){member.maxMultiviewInstanceIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultiviewProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultiviewProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassMultiviewCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["subpassCount"];
[&](){json_value=member.subpassCount;}();
auto& json_value=json["pViewMasks"];
[&](){
            if (member.pViewMasks==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int CcPBXcz=0; CcPBXcz < member.subpassCount; CcPBXcz++){
            [&](){json_value[CcPBXcz]=member.pViewMasks[CcPBXcz];}();
        }
        }();
auto& json_value=json["dependencyCount"];
[&](){json_value=member.dependencyCount;}();
auto& json_value=json["pViewOffsets"];
[&](){
            if (member.pViewOffsets==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NmJKoPY=0; NmJKoPY < member.dependencyCount; NmJKoPY++){
            [&](){json_value[NmJKoPY]=member.pViewOffsets[NmJKoPY];}();
        }
        }();
auto& json_value=json["correlationMaskCount"];
[&](){json_value=member.correlationMaskCount;}();
auto& json_value=json["pCorrelationMasks"];
[&](){
            if (member.pCorrelationMasks==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uavhVgO=0; uavhVgO < member.correlationMaskCount; uavhVgO++){
            [&](){json_value[uavhVgO]=member.pCorrelationMasks[uavhVgO];}();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassMultiviewCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["subpassCount"];
[&](){member.subpassCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewMasks"];
[&](){ uint32_t* temp_mVoQxLG[&](){
            if (!json_value.as_array().size()==0){
                temp_mVoQxLG=NULL;
            return; }temp_mVoQxLG=(uint32_t*)malloc(member.subpassCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int NeCZYBs=0; NeCZYBs < member.subpassCount; NeCZYBs++){
            [&](){temp_mVoQxLG[NeCZYBs]=static_cast<uint32_t>(value_to<int>(json_value[NeCZYBs]));}();
        }
        }();member.pViewMasks=temp_mVoQxLG;}();
auto& json_value=json["dependencyCount"];
[&](){member.dependencyCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewOffsets"];
[&](){ int32_t* temp_HcfQcYM[&](){
            if (!json_value.as_array().size()==0){
                temp_HcfQcYM=NULL;
            return; }temp_HcfQcYM=(int32_t*)malloc(member.dependencyCount*sizeof(int32_t));
        auto& arr=json_value.as_array();
        for(int rcsDcPf=0; rcsDcPf < member.dependencyCount; rcsDcPf++){
            [&](){temp_HcfQcYM[rcsDcPf]=static_cast<int32_t>(value_to<int>(json_value[rcsDcPf]));}();
        }
        }();member.pViewOffsets=temp_HcfQcYM;}();
auto& json_value=json["correlationMaskCount"];
[&](){member.correlationMaskCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCorrelationMasks"];
[&](){ uint32_t* temp_pWOoiQB[&](){
            if (!json_value.as_array().size()==0){
                temp_pWOoiQB=NULL;
            return; }temp_pWOoiQB=(uint32_t*)malloc(member.correlationMaskCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int ZTiZeBt=0; ZTiZeBt < member.correlationMaskCount; ZTiZeBt++){
            [&](){temp_pWOoiQB[ZTiZeBt]=static_cast<uint32_t>(value_to<int>(json_value[ZTiZeBt]));}();
        }
        }();member.pCorrelationMasks=temp_pWOoiQB;}();
}

    void serialize_pUserData(object& json, VkRenderPassMultiviewCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassMultiviewCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfaceCapabilities2EXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minImageCount"];
[&](){json_value=member.minImageCount;}();
auto& json_value=json["maxImageCount"];
[&](){json_value=member.maxImageCount;}();
auto& json_value=json["currentExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.currentExtent);
            }();
auto& json_value=json["minImageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minImageExtent);
            }();
auto& json_value=json["maxImageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxImageExtent);
            }();
auto& json_value=json["maxImageArrayLayers"];
[&](){json_value=member.maxImageArrayLayers;}();
auto& json_value=json["supportedTransforms"];
[&](){[&](){[&](){json_value=member.supportedTransforms;}();}();}();
auto& json_value=json["currentTransform"];
[&](){[&](){[&](){json_value=member.currentTransform;}();}();}();
auto& json_value=json["supportedCompositeAlpha"];
[&](){[&](){[&](){json_value=member.supportedCompositeAlpha;}();}();}();
auto& json_value=json["supportedUsageFlags"];
[&](){[&](){[&](){json_value=member.supportedUsageFlags;}();}();}();
auto& json_value=json["supportedSurfaceCounters"];
[&](){[&](){[&](){json_value=member.supportedSurfaceCounters;}();}();}();
}
void deserialize_struct(object& json, VkSurfaceCapabilities2EXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["minImageCount"];
[&](){member.minImageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxImageCount"];
[&](){member.maxImageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["currentExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.currentExtent);
            }();
auto& json_value=json["minImageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minImageExtent);
            }();
auto& json_value=json["maxImageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxImageExtent);
            }();
auto& json_value=json["maxImageArrayLayers"];
[&](){member.maxImageArrayLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["supportedTransforms"];
[&](){[&](){VkSurfaceTransformFlagsKHR temp_hTCayBM[&](){temp_hTCayBM=static_cast<int>(value_to<int>(json_value));}();member.supportedTransforms=(VkSurfaceTransformFlagsKHR)temp_hTCayBM;}();}();
auto& json_value=json["currentTransform"];
[&](){[&](){VkSurfaceTransformFlagBitsKHR temp_iLniBKn[&](){temp_iLniBKn=static_cast<int>(value_to<int>(json_value));}();member.currentTransform=(VkSurfaceTransformFlagBitsKHR)temp_iLniBKn;}();}();
auto& json_value=json["supportedCompositeAlpha"];
[&](){[&](){VkCompositeAlphaFlagsKHR temp_vzqnZlb[&](){temp_vzqnZlb=static_cast<int>(value_to<int>(json_value));}();member.supportedCompositeAlpha=(VkCompositeAlphaFlagsKHR)temp_vzqnZlb;}();}();
auto& json_value=json["supportedUsageFlags"];
[&](){[&](){VkImageUsageFlags temp_WRBnKMi[&](){temp_WRBnKMi=static_cast<int>(value_to<int>(json_value));}();member.supportedUsageFlags=(VkImageUsageFlags)temp_WRBnKMi;}();}();
auto& json_value=json["supportedSurfaceCounters"];
[&](){[&](){VkSurfaceCounterFlagsEXT temp_BKwxlNK[&](){temp_BKwxlNK=static_cast<int>(value_to<int>(json_value));}();member.supportedSurfaceCounters=(VkSurfaceCounterFlagsEXT)temp_BKwxlNK;}();}();
}

    void serialize_pUserData(object& json, VkSurfaceCapabilities2EXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfaceCapabilities2EXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPowerInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["powerState"];
[&](){[&](){[&](){json_value=member.powerState;}();}();}();
}
void deserialize_struct(object& json, VkDisplayPowerInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["powerState"];
[&](){[&](){VkDisplayPowerStateEXT temp_ibkhZrj[&](){temp_ibkhZrj=static_cast<int>(value_to<int>(json_value));}();member.powerState=(VkDisplayPowerStateEXT)temp_ibkhZrj;}();}();
}

    void serialize_pUserData(object& json, VkDisplayPowerInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPowerInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceEventInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceEvent"];
[&](){[&](){[&](){json_value=member.deviceEvent;}();}();}();
}
void deserialize_struct(object& json, VkDeviceEventInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["deviceEvent"];
[&](){[&](){VkDeviceEventTypeEXT temp_nKRhzyb[&](){temp_nKRhzyb=static_cast<int>(value_to<int>(json_value));}();member.deviceEvent=(VkDeviceEventTypeEXT)temp_nKRhzyb;}();}();
}

    void serialize_pUserData(object& json, VkDeviceEventInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceEventInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayEventInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["displayEvent"];
[&](){[&](){[&](){json_value=member.displayEvent;}();}();}();
}
void deserialize_struct(object& json, VkDisplayEventInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["displayEvent"];
[&](){[&](){VkDisplayEventTypeEXT temp_dxSMUWA[&](){temp_dxSMUWA=static_cast<int>(value_to<int>(json_value));}();member.displayEvent=(VkDisplayEventTypeEXT)temp_dxSMUWA;}();}();
}

    void serialize_pUserData(object& json, VkDisplayEventInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayEventInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainCounterCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["surfaceCounters"];
[&](){[&](){[&](){json_value=member.surfaceCounters;}();}();}();
}
void deserialize_struct(object& json, VkSwapchainCounterCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["surfaceCounters"];
[&](){[&](){VkSurfaceCounterFlagsEXT temp_GvVCSZg[&](){temp_GvVCSZg=static_cast<int>(value_to<int>(json_value));}();member.surfaceCounters=(VkSurfaceCounterFlagsEXT)temp_GvVCSZg;}();}();
}

    void serialize_pUserData(object& json, VkSwapchainCounterCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainCounterCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceGroupProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["physicalDeviceCount"];
[&](){json_value=member.physicalDeviceCount;}();
auto& json_value=json["physicalDevices"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int SySGTYu=0; SySGTYu < VK_MAX_DEVICE_GROUP_SIZE; SySGTYu++){
            [&](){serialize_handle(json_value[SySGTYu],member.physicalDevices[SySGTYu]);}();
        }
        }();
auto& json_value=json["subsetAllocation"];
[&](){[&](){json_value=member.subsetAllocation;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceGroupProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["physicalDeviceCount"];
[&](){member.physicalDeviceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["physicalDevices"];
[&](){
        auto& arr=json_value.as_array();
        for(int SySGTYu=0; SySGTYu < VK_MAX_DEVICE_GROUP_SIZE; SySGTYu++){
            [&](){deserialize_handle(json_value[SySGTYu], member.physicalDevices[SySGTYu]);}();
        }
        }();
auto& json_value=json["subsetAllocation"];
[&](){[&](){member.subsetAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceGroupProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceGroupProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryAllocateFlagsInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["deviceMask"];
[&](){json_value=member.deviceMask;}();
}
void deserialize_struct(object& json, VkMemoryAllocateFlagsInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkMemoryAllocateFlags temp_BiAQzDo[&](){temp_BiAQzDo=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkMemoryAllocateFlags)temp_BiAQzDo;}();}();
auto& json_value=json["deviceMask"];
[&](){member.deviceMask=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryAllocateFlagsInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryAllocateFlagsInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindBufferMemoryInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){json_value=member.memoryOffset;}();}();
}
void deserialize_struct(object& json, VkBindBufferMemoryInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){member.memoryOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBindBufferMemoryInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindBufferMemoryInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindBufferMemoryDeviceGroupInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceIndexCount"];
[&](){json_value=member.deviceIndexCount;}();
auto& json_value=json["pDeviceIndices"];
[&](){
            if (member.pDeviceIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lNKjpBY=0; lNKjpBY < member.deviceIndexCount; lNKjpBY++){
            [&](){json_value[lNKjpBY]=member.pDeviceIndices[lNKjpBY];}();
        }
        }();
}
void deserialize_struct(object& json, VkBindBufferMemoryDeviceGroupInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["deviceIndexCount"];
[&](){member.deviceIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDeviceIndices"];
[&](){ uint32_t* temp_AdsIqXQ[&](){
            if (!json_value.as_array().size()==0){
                temp_AdsIqXQ=NULL;
            return; }temp_AdsIqXQ=(uint32_t*)malloc(member.deviceIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int CQTEfmn=0; CQTEfmn < member.deviceIndexCount; CQTEfmn++){
            [&](){temp_AdsIqXQ[CQTEfmn]=static_cast<uint32_t>(value_to<int>(json_value[CQTEfmn]));}();
        }
        }();member.pDeviceIndices=temp_AdsIqXQ;}();
}

    void serialize_pUserData(object& json, VkBindBufferMemoryDeviceGroupInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindBufferMemoryDeviceGroupInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindImageMemoryInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){json_value=member.memoryOffset;}();}();
}
void deserialize_struct(object& json, VkBindImageMemoryInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){member.memoryOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBindImageMemoryInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindImageMemoryInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindImageMemoryDeviceGroupInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceIndexCount"];
[&](){json_value=member.deviceIndexCount;}();
auto& json_value=json["pDeviceIndices"];
[&](){
            if (member.pDeviceIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lNKjpBY=0; lNKjpBY < member.deviceIndexCount; lNKjpBY++){
            [&](){json_value[lNKjpBY]=member.pDeviceIndices[lNKjpBY];}();
        }
        }();
auto& json_value=json["splitInstanceBindRegionCount"];
[&](){json_value=member.splitInstanceBindRegionCount;}();
auto& json_value=json["pSplitInstanceBindRegions"];
[&](){
            if (member.pSplitInstanceBindRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int jPXRrxI=0; jPXRrxI < member.splitInstanceBindRegionCount; jPXRrxI++){
            [&](){
            auto& temp=json_value[jPXRrxI].emplace_object();
            return serialize_struct(temp, member.pSplitInstanceBindRegions[jPXRrxI]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkBindImageMemoryDeviceGroupInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["deviceIndexCount"];
[&](){member.deviceIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDeviceIndices"];
[&](){ uint32_t* temp_AdsIqXQ[&](){
            if (!json_value.as_array().size()==0){
                temp_AdsIqXQ=NULL;
            return; }temp_AdsIqXQ=(uint32_t*)malloc(member.deviceIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int CQTEfmn=0; CQTEfmn < member.deviceIndexCount; CQTEfmn++){
            [&](){temp_AdsIqXQ[CQTEfmn]=static_cast<uint32_t>(value_to<int>(json_value[CQTEfmn]));}();
        }
        }();member.pDeviceIndices=temp_AdsIqXQ;}();
auto& json_value=json["splitInstanceBindRegionCount"];
[&](){member.splitInstanceBindRegionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSplitInstanceBindRegions"];
[&](){ VkRect2D* temp_BgeEAMK[&](){
            if (!json_value.as_array().size()==0){
                temp_BgeEAMK=NULL;
            return; }temp_BgeEAMK=(VkRect2D*)malloc(member.splitInstanceBindRegionCount*sizeof(VkRect2D));
        auto& arr=json_value.as_array();
        for(int btPWlWs=0; btPWlWs < member.splitInstanceBindRegionCount; btPWlWs++){
            [&](){
            auto& temp=json_value[btPWlWs].as_object();
            deserialize_struct(temp,temp_BgeEAMK[btPWlWs]);
            }();
        }
        }();member.pSplitInstanceBindRegions=temp_BgeEAMK;}();
}

    void serialize_pUserData(object& json, VkBindImageMemoryDeviceGroupInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindImageMemoryDeviceGroupInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupRenderPassBeginInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceMask"];
[&](){json_value=member.deviceMask;}();
auto& json_value=json["deviceRenderAreaCount"];
[&](){json_value=member.deviceRenderAreaCount;}();
auto& json_value=json["pDeviceRenderAreas"];
[&](){
            if (member.pDeviceRenderAreas==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int mYcOwlX=0; mYcOwlX < member.deviceRenderAreaCount; mYcOwlX++){
            [&](){
            auto& temp=json_value[mYcOwlX].emplace_object();
            return serialize_struct(temp, member.pDeviceRenderAreas[mYcOwlX]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDeviceGroupRenderPassBeginInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["deviceMask"];
[&](){member.deviceMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["deviceRenderAreaCount"];
[&](){member.deviceRenderAreaCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDeviceRenderAreas"];
[&](){ VkRect2D* temp_AFgNxrr[&](){
            if (!json_value.as_array().size()==0){
                temp_AFgNxrr=NULL;
            return; }temp_AFgNxrr=(VkRect2D*)malloc(member.deviceRenderAreaCount*sizeof(VkRect2D));
        auto& arr=json_value.as_array();
        for(int jdrjfsb=0; jdrjfsb < member.deviceRenderAreaCount; jdrjfsb++){
            [&](){
            auto& temp=json_value[jdrjfsb].as_object();
            deserialize_struct(temp,temp_AFgNxrr[jdrjfsb]);
            }();
        }
        }();member.pDeviceRenderAreas=temp_AFgNxrr;}();
}

    void serialize_pUserData(object& json, VkDeviceGroupRenderPassBeginInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupRenderPassBeginInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupCommandBufferBeginInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceMask"];
[&](){json_value=member.deviceMask;}();
}
void deserialize_struct(object& json, VkDeviceGroupCommandBufferBeginInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["deviceMask"];
[&](){member.deviceMask=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDeviceGroupCommandBufferBeginInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupCommandBufferBeginInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupSubmitInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["waitSemaphoreCount"];
[&](){json_value=member.waitSemaphoreCount;}();
auto& json_value=json["pWaitSemaphoreDeviceIndices"];
[&](){
            if (member.pWaitSemaphoreDeviceIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UfAbcmF=0; UfAbcmF < member.waitSemaphoreCount; UfAbcmF++){
            [&](){json_value[UfAbcmF]=member.pWaitSemaphoreDeviceIndices[UfAbcmF];}();
        }
        }();
auto& json_value=json["commandBufferCount"];
[&](){json_value=member.commandBufferCount;}();
auto& json_value=json["pCommandBufferDeviceMasks"];
[&](){
            if (member.pCommandBufferDeviceMasks==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int XIzJtyo=0; XIzJtyo < member.commandBufferCount; XIzJtyo++){
            [&](){json_value[XIzJtyo]=member.pCommandBufferDeviceMasks[XIzJtyo];}();
        }
        }();
auto& json_value=json["signalSemaphoreCount"];
[&](){json_value=member.signalSemaphoreCount;}();
auto& json_value=json["pSignalSemaphoreDeviceIndices"];
[&](){
            if (member.pSignalSemaphoreDeviceIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int npBGdHi=0; npBGdHi < member.signalSemaphoreCount; npBGdHi++){
            [&](){json_value[npBGdHi]=member.pSignalSemaphoreDeviceIndices[npBGdHi];}();
        }
        }();
}
void deserialize_struct(object& json, VkDeviceGroupSubmitInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["waitSemaphoreCount"];
[&](){member.waitSemaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pWaitSemaphoreDeviceIndices"];
[&](){ uint32_t* temp_QkUoTsj[&](){
            if (!json_value.as_array().size()==0){
                temp_QkUoTsj=NULL;
            return; }temp_QkUoTsj=(uint32_t*)malloc(member.waitSemaphoreCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int BuBXuVG=0; BuBXuVG < member.waitSemaphoreCount; BuBXuVG++){
            [&](){temp_QkUoTsj[BuBXuVG]=static_cast<uint32_t>(value_to<int>(json_value[BuBXuVG]));}();
        }
        }();member.pWaitSemaphoreDeviceIndices=temp_QkUoTsj;}();
auto& json_value=json["commandBufferCount"];
[&](){member.commandBufferCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCommandBufferDeviceMasks"];
[&](){ uint32_t* temp_lkUGduK[&](){
            if (!json_value.as_array().size()==0){
                temp_lkUGduK=NULL;
            return; }temp_lkUGduK=(uint32_t*)malloc(member.commandBufferCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int lYHqVuX=0; lYHqVuX < member.commandBufferCount; lYHqVuX++){
            [&](){temp_lkUGduK[lYHqVuX]=static_cast<uint32_t>(value_to<int>(json_value[lYHqVuX]));}();
        }
        }();member.pCommandBufferDeviceMasks=temp_lkUGduK;}();
auto& json_value=json["signalSemaphoreCount"];
[&](){member.signalSemaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSignalSemaphoreDeviceIndices"];
[&](){ uint32_t* temp_AWqCoFQ[&](){
            if (!json_value.as_array().size()==0){
                temp_AWqCoFQ=NULL;
            return; }temp_AWqCoFQ=(uint32_t*)malloc(member.signalSemaphoreCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int YFAlfKs=0; YFAlfKs < member.signalSemaphoreCount; YFAlfKs++){
            [&](){temp_AWqCoFQ[YFAlfKs]=static_cast<uint32_t>(value_to<int>(json_value[YFAlfKs]));}();
        }
        }();member.pSignalSemaphoreDeviceIndices=temp_AWqCoFQ;}();
}

    void serialize_pUserData(object& json, VkDeviceGroupSubmitInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupSubmitInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupBindSparseInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["resourceDeviceIndex"];
[&](){json_value=member.resourceDeviceIndex;}();
auto& json_value=json["memoryDeviceIndex"];
[&](){json_value=member.memoryDeviceIndex;}();
}
void deserialize_struct(object& json, VkDeviceGroupBindSparseInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["resourceDeviceIndex"];
[&](){member.resourceDeviceIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["memoryDeviceIndex"];
[&](){member.memoryDeviceIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDeviceGroupBindSparseInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupBindSparseInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupPresentCapabilitiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentMask"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int mvXAdTF=0; mvXAdTF < VK_MAX_DEVICE_GROUP_SIZE; mvXAdTF++){
            [&](){json_value[mvXAdTF]=member.presentMask[mvXAdTF];}();
        }
        }();
auto& json_value=json["modes"];
[&](){[&](){[&](){json_value=member.modes;}();}();}();
}
void deserialize_struct(object& json, VkDeviceGroupPresentCapabilitiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentMask"];
[&](){
        auto& arr=json_value.as_array();
        for(int mvXAdTF=0; mvXAdTF < VK_MAX_DEVICE_GROUP_SIZE; mvXAdTF++){
            [&](){member.presentMask[mvXAdTF]=static_cast<uint32_t>(value_to<int>(json_value[mvXAdTF]));}();
        }
        }();
auto& json_value=json["modes"];
[&](){[&](){VkDeviceGroupPresentModeFlagsKHR temp_WWtqbTE[&](){temp_WWtqbTE=static_cast<int>(value_to<int>(json_value));}();member.modes=(VkDeviceGroupPresentModeFlagsKHR)temp_WWtqbTE;}();}();
}

    void serialize_pUserData(object& json, VkDeviceGroupPresentCapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupPresentCapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageSwapchainCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchain"];
[&](){serialize_handle(json_value,member.swapchain);}();
}
void deserialize_struct(object& json, VkImageSwapchainCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchain"];
[&](){deserialize_handle(json_value, member.swapchain);}();
}

    void serialize_pUserData(object& json, VkImageSwapchainCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageSwapchainCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindImageMemorySwapchainInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchain"];
[&](){serialize_handle(json_value,member.swapchain);}();
auto& json_value=json["imageIndex"];
[&](){json_value=member.imageIndex;}();
}
void deserialize_struct(object& json, VkBindImageMemorySwapchainInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchain"];
[&](){deserialize_handle(json_value, member.swapchain);}();
auto& json_value=json["imageIndex"];
[&](){member.imageIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkBindImageMemorySwapchainInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindImageMemorySwapchainInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAcquireNextImageInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchain"];
[&](){serialize_handle(json_value,member.swapchain);}();
auto& json_value=json["timeout"];
[&](){json_value=member.timeout;}();
auto& json_value=json["semaphore"];
[&](){serialize_handle(json_value,member.semaphore);}();
auto& json_value=json["fence"];
[&](){serialize_handle(json_value,member.fence);}();
auto& json_value=json["deviceMask"];
[&](){json_value=member.deviceMask;}();
}
void deserialize_struct(object& json, VkAcquireNextImageInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchain"];
[&](){deserialize_handle(json_value, member.swapchain);}();
auto& json_value=json["timeout"];
[&](){member.timeout=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["semaphore"];
[&](){deserialize_handle(json_value, member.semaphore);}();
auto& json_value=json["fence"];
[&](){deserialize_handle(json_value, member.fence);}();
auto& json_value=json["deviceMask"];
[&](){member.deviceMask=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAcquireNextImageInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAcquireNextImageInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupPresentInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchainCount"];
[&](){json_value=member.swapchainCount;}();
auto& json_value=json["pDeviceMasks"];
[&](){
            if (member.pDeviceMasks==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int xoZBOZT=0; xoZBOZT < member.swapchainCount; xoZBOZT++){
            [&](){json_value[xoZBOZT]=member.pDeviceMasks[xoZBOZT];}();
        }
        }();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
}
void deserialize_struct(object& json, VkDeviceGroupPresentInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchainCount"];
[&](){member.swapchainCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDeviceMasks"];
[&](){ uint32_t* temp_GKJKoFG[&](){
            if (!json_value.as_array().size()==0){
                temp_GKJKoFG=NULL;
            return; }temp_GKJKoFG=(uint32_t*)malloc(member.swapchainCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int rRsChIX=0; rRsChIX < member.swapchainCount; rRsChIX++){
            [&](){temp_GKJKoFG[rRsChIX]=static_cast<uint32_t>(value_to<int>(json_value[rRsChIX]));}();
        }
        }();member.pDeviceMasks=temp_GKJKoFG;}();
auto& json_value=json["mode"];
[&](){[&](){VkDeviceGroupPresentModeFlagBitsKHR temp_wWybLaG[&](){temp_wWybLaG=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkDeviceGroupPresentModeFlagBitsKHR)temp_wWybLaG;}();}();
}

    void serialize_pUserData(object& json, VkDeviceGroupPresentInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupPresentInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupDeviceCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["physicalDeviceCount"];
[&](){json_value=member.physicalDeviceCount;}();
auto& json_value=json["pPhysicalDevices"];
[&](){
            if (member.pPhysicalDevices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int GzWtyIK=0; GzWtyIK < member.physicalDeviceCount; GzWtyIK++){
            [&](){serialize_handle(json_value[GzWtyIK],member.pPhysicalDevices[GzWtyIK]);}();
        }
        }();
}
void deserialize_struct(object& json, VkDeviceGroupDeviceCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["physicalDeviceCount"];
[&](){member.physicalDeviceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPhysicalDevices"];
[&](){ VkPhysicalDevice* temp_PkQscKw[&](){
            if (!json_value.as_array().size()==0){
                temp_PkQscKw=NULL;
            return; }temp_PkQscKw=(VkPhysicalDevice*)malloc(member.physicalDeviceCount*sizeof(VkPhysicalDevice));
        auto& arr=json_value.as_array();
        for(int YyctNwz=0; YyctNwz < member.physicalDeviceCount; YyctNwz++){
            [&](){deserialize_handle(json_value[YyctNwz], temp_PkQscKw[YyctNwz]);}();
        }
        }();member.pPhysicalDevices=temp_PkQscKw;}();
}

    void serialize_pUserData(object& json, VkDeviceGroupDeviceCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupDeviceCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceGroupSwapchainCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["modes"];
[&](){[&](){[&](){json_value=member.modes;}();}();}();
}
void deserialize_struct(object& json, VkDeviceGroupSwapchainCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["modes"];
[&](){[&](){VkDeviceGroupPresentModeFlagsKHR temp_WWtqbTE[&](){temp_WWtqbTE=static_cast<int>(value_to<int>(json_value));}();member.modes=(VkDeviceGroupPresentModeFlagsKHR)temp_WWtqbTE;}();}();
}

    void serialize_pUserData(object& json, VkDeviceGroupSwapchainCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceGroupSwapchainCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorUpdateTemplateEntry& member){
        
    
auto& json_value=json["dstBinding"];
[&](){json_value=member.dstBinding;}();
auto& json_value=json["dstArrayElement"];
[&](){json_value=member.dstArrayElement;}();
auto& json_value=json["descriptorCount"];
[&](){json_value=member.descriptorCount;}();
auto& json_value=json["descriptorType"];
[&](){[&](){[&](){json_value=member.descriptorType;}();}();}();
auto& json_value=json["offset"];
[&](){json_value=member.offset;}();
auto& json_value=json["stride"];
[&](){json_value=member.stride;}();
}
void deserialize_struct(object& json, VkDescriptorUpdateTemplateEntry& member){
auto& json_value=json["dstBinding"];
[&](){member.dstBinding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstArrayElement"];
[&](){member.dstArrayElement=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["descriptorCount"];
[&](){member.descriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["descriptorType"];
[&](){[&](){VkDescriptorType temp_xewOskh[&](){temp_xewOskh=static_cast<int>(value_to<int>(json_value));}();member.descriptorType=(VkDescriptorType)temp_xewOskh;}();}();
auto& json_value=json["offset"];
[&](){member.offset=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["stride"];
[&](){member.stride=static_cast<size_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDescriptorUpdateTemplateEntry& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorUpdateTemplateEntry& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorUpdateTemplateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["descriptorUpdateEntryCount"];
[&](){json_value=member.descriptorUpdateEntryCount;}();
auto& json_value=json["pDescriptorUpdateEntries"];
[&](){
            if (member.pDescriptorUpdateEntries==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ueVWUaH=0; ueVWUaH < member.descriptorUpdateEntryCount; ueVWUaH++){
            [&](){
            auto& temp=json_value[ueVWUaH].emplace_object();
            return serialize_struct(temp, member.pDescriptorUpdateEntries[ueVWUaH]);
            }();
        }
        }();
auto& json_value=json["templateType"];
[&](){[&](){[&](){json_value=member.templateType;}();}();}();
auto& json_value=json["descriptorSetLayout"];
[&](){serialize_handle(json_value,member.descriptorSetLayout);}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){[&](){json_value=member.pipelineBindPoint;}();}();}();
auto& json_value=json["pipelineLayout"];
[&](){serialize_handle(json_value,member.pipelineLayout);}();
auto& json_value=json["set"];
[&](){json_value=member.set;}();
}
void deserialize_struct(object& json, VkDescriptorUpdateTemplateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDescriptorUpdateTemplateCreateFlags temp_NpihXpa[&](){temp_NpihXpa=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDescriptorUpdateTemplateCreateFlags)temp_NpihXpa;}();}();
auto& json_value=json["descriptorUpdateEntryCount"];
[&](){member.descriptorUpdateEntryCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDescriptorUpdateEntries"];
[&](){ VkDescriptorUpdateTemplateEntry* temp_cUAutwE[&](){
            if (!json_value.as_array().size()==0){
                temp_cUAutwE=NULL;
            return; }temp_cUAutwE=(VkDescriptorUpdateTemplateEntry*)malloc(member.descriptorUpdateEntryCount*sizeof(VkDescriptorUpdateTemplateEntry));
        auto& arr=json_value.as_array();
        for(int HbRTThr=0; HbRTThr < member.descriptorUpdateEntryCount; HbRTThr++){
            [&](){
            auto& temp=json_value[HbRTThr].as_object();
            deserialize_struct(temp,temp_cUAutwE[HbRTThr]);
            }();
        }
        }();member.pDescriptorUpdateEntries=temp_cUAutwE;}();
auto& json_value=json["templateType"];
[&](){[&](){VkDescriptorUpdateTemplateType temp_hdkSdLJ[&](){temp_hdkSdLJ=static_cast<int>(value_to<int>(json_value));}();member.templateType=(VkDescriptorUpdateTemplateType)temp_hdkSdLJ;}();}();
auto& json_value=json["descriptorSetLayout"];
[&](){deserialize_handle(json_value, member.descriptorSetLayout);}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){VkPipelineBindPoint temp_fyjKPoR[&](){temp_fyjKPoR=static_cast<int>(value_to<int>(json_value));}();member.pipelineBindPoint=(VkPipelineBindPoint)temp_fyjKPoR;}();}();
auto& json_value=json["pipelineLayout"];
[&](){deserialize_handle(json_value, member.pipelineLayout);}();
auto& json_value=json["set"];
[&](){member.set=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDescriptorUpdateTemplateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorUpdateTemplateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkXYColorEXT& member){
        
    
auto& json_value=json["x"];
[&](){json_value=member.x;}();
auto& json_value=json["y"];
[&](){json_value=member.y;}();
}
void deserialize_struct(object& json, VkXYColorEXT& member){
auto& json_value=json["x"];
[&](){member.x=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["y"];
[&](){member.y=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkXYColorEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkXYColorEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePresentIdFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentId"];
[&](){[&](){json_value=member.presentId;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePresentIdFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentId"];
[&](){[&](){member.presentId=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePresentIdFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePresentIdFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPresentIdKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchainCount"];
[&](){json_value=member.swapchainCount;}();
auto& json_value=json["pPresentIds"];
[&](){
            if (member.pPresentIds==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int BdqaAIv=0; BdqaAIv < member.swapchainCount; BdqaAIv++){
            [&](){json_value[BdqaAIv]=member.pPresentIds[BdqaAIv];}();
        }
        }();
}
void deserialize_struct(object& json, VkPresentIdKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchainCount"];
[&](){member.swapchainCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPresentIds"];
[&](){ uint64_t* temp_DQuKncR[&](){
            if (!json_value.as_array().size()==0){
                temp_DQuKncR=NULL;
            return; }temp_DQuKncR=(uint64_t*)malloc(member.swapchainCount*sizeof(uint64_t));
        auto& arr=json_value.as_array();
        for(int gRltcKr=0; gRltcKr < member.swapchainCount; gRltcKr++){
            [&](){temp_DQuKncR[gRltcKr]=static_cast<uint64_t>(value_to<int>(json_value[gRltcKr]));}();
        }
        }();member.pPresentIds=temp_DQuKncR;}();
}

    void serialize_pUserData(object& json, VkPresentIdKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPresentIdKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePresentWaitFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentWait"];
[&](){[&](){json_value=member.presentWait;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePresentWaitFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentWait"];
[&](){[&](){member.presentWait=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePresentWaitFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePresentWaitFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkHdrMetadataEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["displayPrimaryRed"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.displayPrimaryRed);
            }();
auto& json_value=json["displayPrimaryGreen"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.displayPrimaryGreen);
            }();
auto& json_value=json["displayPrimaryBlue"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.displayPrimaryBlue);
            }();
auto& json_value=json["whitePoint"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.whitePoint);
            }();
auto& json_value=json["maxLuminance"];
[&](){json_value=member.maxLuminance;}();
auto& json_value=json["minLuminance"];
[&](){json_value=member.minLuminance;}();
auto& json_value=json["maxContentLightLevel"];
[&](){json_value=member.maxContentLightLevel;}();
auto& json_value=json["maxFrameAverageLightLevel"];
[&](){json_value=member.maxFrameAverageLightLevel;}();
}
void deserialize_struct(object& json, VkHdrMetadataEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["displayPrimaryRed"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.displayPrimaryRed);
            }();
auto& json_value=json["displayPrimaryGreen"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.displayPrimaryGreen);
            }();
auto& json_value=json["displayPrimaryBlue"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.displayPrimaryBlue);
            }();
auto& json_value=json["whitePoint"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.whitePoint);
            }();
auto& json_value=json["maxLuminance"];
[&](){member.maxLuminance=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["minLuminance"];
[&](){member.minLuminance=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxContentLightLevel"];
[&](){member.maxContentLightLevel=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxFrameAverageLightLevel"];
[&](){member.maxFrameAverageLightLevel=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkHdrMetadataEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkHdrMetadataEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayNativeHdrSurfaceCapabilitiesAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["localDimmingSupport"];
[&](){[&](){json_value=member.localDimmingSupport;}();}();
}
void deserialize_struct(object& json, VkDisplayNativeHdrSurfaceCapabilitiesAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["localDimmingSupport"];
[&](){[&](){member.localDimmingSupport=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDisplayNativeHdrSurfaceCapabilitiesAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayNativeHdrSurfaceCapabilitiesAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainDisplayNativeHdrCreateInfoAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["localDimmingEnable"];
[&](){[&](){json_value=member.localDimmingEnable;}();}();
}
void deserialize_struct(object& json, VkSwapchainDisplayNativeHdrCreateInfoAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["localDimmingEnable"];
[&](){[&](){member.localDimmingEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSwapchainDisplayNativeHdrCreateInfoAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainDisplayNativeHdrCreateInfoAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRefreshCycleDurationGOOGLE& member){
        
    
auto& json_value=json["refreshDuration"];
[&](){json_value=member.refreshDuration;}();
}
void deserialize_struct(object& json, VkRefreshCycleDurationGOOGLE& member){
auto& json_value=json["refreshDuration"];
[&](){member.refreshDuration=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRefreshCycleDurationGOOGLE& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRefreshCycleDurationGOOGLE& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPastPresentationTimingGOOGLE& member){
        
    
auto& json_value=json["presentID"];
[&](){json_value=member.presentID;}();
auto& json_value=json["desiredPresentTime"];
[&](){json_value=member.desiredPresentTime;}();
auto& json_value=json["actualPresentTime"];
[&](){json_value=member.actualPresentTime;}();
auto& json_value=json["earliestPresentTime"];
[&](){json_value=member.earliestPresentTime;}();
auto& json_value=json["presentMargin"];
[&](){json_value=member.presentMargin;}();
}
void deserialize_struct(object& json, VkPastPresentationTimingGOOGLE& member){
auto& json_value=json["presentID"];
[&](){member.presentID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["desiredPresentTime"];
[&](){member.desiredPresentTime=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["actualPresentTime"];
[&](){member.actualPresentTime=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["earliestPresentTime"];
[&](){member.earliestPresentTime=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["presentMargin"];
[&](){member.presentMargin=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPastPresentationTimingGOOGLE& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPastPresentationTimingGOOGLE& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPresentTimesInfoGOOGLE& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchainCount"];
[&](){json_value=member.swapchainCount;}();
auto& json_value=json["pTimes"];
[&](){
            if (member.pTimes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int cvRjTcE=0; cvRjTcE < member.swapchainCount; cvRjTcE++){
            [&](){
            auto& temp=json_value[cvRjTcE].emplace_object();
            return serialize_struct(temp, member.pTimes[cvRjTcE]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPresentTimesInfoGOOGLE& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchainCount"];
[&](){member.swapchainCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pTimes"];
[&](){ VkPresentTimeGOOGLE* temp_LAYIKGZ[&](){
            if (!json_value.as_array().size()==0){
                temp_LAYIKGZ=NULL;
            return; }temp_LAYIKGZ=(VkPresentTimeGOOGLE*)malloc(member.swapchainCount*sizeof(VkPresentTimeGOOGLE));
        auto& arr=json_value.as_array();
        for(int TsPUkSX=0; TsPUkSX < member.swapchainCount; TsPUkSX++){
            [&](){
            auto& temp=json_value[TsPUkSX].as_object();
            deserialize_struct(temp,temp_LAYIKGZ[TsPUkSX]);
            }();
        }
        }();member.pTimes=temp_LAYIKGZ;}();
}

    void serialize_pUserData(object& json, VkPresentTimesInfoGOOGLE& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPresentTimesInfoGOOGLE& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPresentTimeGOOGLE& member){
        
    
auto& json_value=json["presentID"];
[&](){json_value=member.presentID;}();
auto& json_value=json["desiredPresentTime"];
[&](){json_value=member.desiredPresentTime;}();
}
void deserialize_struct(object& json, VkPresentTimeGOOGLE& member){
auto& json_value=json["presentID"];
[&](){member.presentID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["desiredPresentTime"];
[&](){member.desiredPresentTime=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPresentTimeGOOGLE& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPresentTimeGOOGLE& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkViewportWScalingNV& member){
        
    
auto& json_value=json["xcoeff"];
[&](){json_value=member.xcoeff;}();
auto& json_value=json["ycoeff"];
[&](){json_value=member.ycoeff;}();
}
void deserialize_struct(object& json, VkViewportWScalingNV& member){
auto& json_value=json["xcoeff"];
[&](){member.xcoeff=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["ycoeff"];
[&](){member.ycoeff=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkViewportWScalingNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkViewportWScalingNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineViewportWScalingStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["viewportWScalingEnable"];
[&](){[&](){json_value=member.viewportWScalingEnable;}();}();
auto& json_value=json["viewportCount"];
[&](){json_value=member.viewportCount;}();
auto& json_value=json["pViewportWScalings"];
[&](){
            if (member.pViewportWScalings==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int EfZNYhr=0; EfZNYhr < member.viewportCount; EfZNYhr++){
            [&](){
            auto& temp=json_value[EfZNYhr].emplace_object();
            return serialize_struct(temp, member.pViewportWScalings[EfZNYhr]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineViewportWScalingStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["viewportWScalingEnable"];
[&](){[&](){member.viewportWScalingEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["viewportCount"];
[&](){member.viewportCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewportWScalings"];
[&](){ VkViewportWScalingNV* temp_ZhLcbjS[&](){
            if (!json_value.as_array().size()==0){
                temp_ZhLcbjS=NULL;
            return; }temp_ZhLcbjS=(VkViewportWScalingNV*)malloc(member.viewportCount*sizeof(VkViewportWScalingNV));
        auto& arr=json_value.as_array();
        for(int FpWmrJX=0; FpWmrJX < member.viewportCount; FpWmrJX++){
            [&](){
            auto& temp=json_value[FpWmrJX].as_object();
            deserialize_struct(temp,temp_ZhLcbjS[FpWmrJX]);
            }();
        }
        }();member.pViewportWScalings=temp_ZhLcbjS;}();
}

    void serialize_pUserData(object& json, VkPipelineViewportWScalingStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineViewportWScalingStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkViewportSwizzleNV& member){
        
    
auto& json_value=json["x"];
[&](){[&](){[&](){json_value=member.x;}();}();}();
auto& json_value=json["y"];
[&](){[&](){[&](){json_value=member.y;}();}();}();
auto& json_value=json["z"];
[&](){[&](){[&](){json_value=member.z;}();}();}();
auto& json_value=json["w"];
[&](){[&](){[&](){json_value=member.w;}();}();}();
}
void deserialize_struct(object& json, VkViewportSwizzleNV& member){
auto& json_value=json["x"];
[&](){[&](){VkViewportCoordinateSwizzleNV temp_lvxnRKk[&](){temp_lvxnRKk=static_cast<int>(value_to<int>(json_value));}();member.x=(VkViewportCoordinateSwizzleNV)temp_lvxnRKk;}();}();
auto& json_value=json["y"];
[&](){[&](){VkViewportCoordinateSwizzleNV temp_HNyEZUe[&](){temp_HNyEZUe=static_cast<int>(value_to<int>(json_value));}();member.y=(VkViewportCoordinateSwizzleNV)temp_HNyEZUe;}();}();
auto& json_value=json["z"];
[&](){[&](){VkViewportCoordinateSwitemp_OdCukyFtemp_OdCukyFleNV temp_OdCukyF[&](){temp_OdCukyF=static_cast<int>(value_to<int>(json_value));}();member.z=(VkViewportCoordinateSwizzleNV)temp_OdCukyF;}();}();
auto& json_value=json["w"];
[&](){[&](){VkVietemp_mTWSHISportCoordinateStemp_mTWSHISizzleNV temp_mTWSHIS[&](){temp_mTWSHIS=static_cast<int>(value_to<int>(json_value));}();member.w=(VkViewportCoordinateSwizzleNV)temp_mTWSHIS;}();}();
}

    void serialize_pUserData(object& json, VkViewportSwizzleNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkViewportSwizzleNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineViewportSwizzleStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["viewportCount"];
[&](){json_value=member.viewportCount;}();
auto& json_value=json["pViewportSwizzles"];
[&](){
            if (member.pViewportSwizzles==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int JmIiIjF=0; JmIiIjF < member.viewportCount; JmIiIjF++){
            [&](){
            auto& temp=json_value[JmIiIjF].emplace_object();
            return serialize_struct(temp, member.pViewportSwizzles[JmIiIjF]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineViewportSwizzleStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineViewportSwizzleStateCreateFlagsNV temp_MMCYEKh[&](){temp_MMCYEKh=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineViewportSwizzleStateCreateFlagsNV)temp_MMCYEKh;}();}();
auto& json_value=json["viewportCount"];
[&](){member.viewportCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewportSwizzles"];
[&](){ VkViewportSwizzleNV* temp_SAOloTy[&](){
            if (!json_value.as_array().size()==0){
                temp_SAOloTy=NULL;
            return; }temp_SAOloTy=(VkViewportSwizzleNV*)malloc(member.viewportCount*sizeof(VkViewportSwizzleNV));
        auto& arr=json_value.as_array();
        for(int cnyoCkA=0; cnyoCkA < member.viewportCount; cnyoCkA++){
            [&](){
            auto& temp=json_value[cnyoCkA].as_object();
            deserialize_struct(temp,temp_SAOloTy[cnyoCkA]);
            }();
        }
        }();member.pViewportSwizzles=temp_SAOloTy;}();
}

    void serialize_pUserData(object& json, VkPipelineViewportSwizzleStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineViewportSwizzleStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDiscardRectanglePropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxDiscardRectangles"];
[&](){json_value=member.maxDiscardRectangles;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDiscardRectanglePropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxDiscardRectangles"];
[&](){member.maxDiscardRectangles=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDiscardRectanglePropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDiscardRectanglePropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineDiscardRectangleStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["discardRectangleMode"];
[&](){[&](){[&](){json_value=member.discardRectangleMode;}();}();}();
auto& json_value=json["discardRectangleCount"];
[&](){json_value=member.discardRectangleCount;}();
auto& json_value=json["pDiscardRectangles"];
[&](){
            if (member.pDiscardRectangles==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int utzawpH=0; utzawpH < member.discardRectangleCount; utzawpH++){
            [&](){
            auto& temp=json_value[utzawpH].emplace_object();
            return serialize_struct(temp, member.pDiscardRectangles[utzawpH]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineDiscardRectangleStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineDiscardRectangleStateCreateFlagsEXT temp_ozSuQID[&](){temp_ozSuQID=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineDiscardRectangleStateCreateFlagsEXT)temp_ozSuQID;}();}();
auto& json_value=json["discardRectangleMode"];
[&](){[&](){VkDiscardRectangleModeEXT temp_hTslvPV[&](){temp_hTslvPV=static_cast<int>(value_to<int>(json_value));}();member.discardRectangleMode=(VkDiscardRectangleModeEXT)temp_hTslvPV;}();}();
auto& json_value=json["discardRectangleCount"];
[&](){member.discardRectangleCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDiscardRectangles"];
[&](){ VkRect2D* temp_ZVwGWCj[&](){
            if (!json_value.as_array().size()==0){
                temp_ZVwGWCj=NULL;
            return; }temp_ZVwGWCj=(VkRect2D*)malloc(member.discardRectangleCount*sizeof(VkRect2D));
        auto& arr=json_value.as_array();
        for(int xzQKeqP=0; xzQKeqP < member.discardRectangleCount; xzQKeqP++){
            [&](){
            auto& temp=json_value[xzQKeqP].as_object();
            deserialize_struct(temp,temp_ZVwGWCj[xzQKeqP]);
            }();
        }
        }();member.pDiscardRectangles=temp_ZVwGWCj;}();
}

    void serialize_pUserData(object& json, VkPipelineDiscardRectangleStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineDiscardRectangleStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["perViewPositionAllComponents"];
[&](){[&](){json_value=member.perViewPositionAllComponents;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["perViewPositionAllComponents"];
[&](){[&](){member.perViewPositionAllComponents=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkInputAttachmentAspectReference& member){
        
    
auto& json_value=json["subpass"];
[&](){json_value=member.subpass;}();
auto& json_value=json["inputAttachmentIndex"];
[&](){json_value=member.inputAttachmentIndex;}();
auto& json_value=json["aspectMask"];
[&](){[&](){[&](){json_value=member.aspectMask;}();}();}();
}
void deserialize_struct(object& json, VkInputAttachmentAspectReference& member){
auto& json_value=json["subpass"];
[&](){member.subpass=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["inputAttachmentIndex"];
[&](){member.inputAttachmentIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["aspectMask"];
[&](){[&](){VkImageAspectFlags temp_JsnReia[&](){temp_JsnReia=static_cast<int>(value_to<int>(json_value));}();member.aspectMask=(VkImageAspectFlags)temp_JsnReia;}();}();
}

    void serialize_pUserData(object& json, VkInputAttachmentAspectReference& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkInputAttachmentAspectReference& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassInputAttachmentAspectCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["aspectReferenceCount"];
[&](){json_value=member.aspectReferenceCount;}();
auto& json_value=json["pAspectReferences"];
[&](){
            if (member.pAspectReferences==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rIgAnwx=0; rIgAnwx < member.aspectReferenceCount; rIgAnwx++){
            [&](){
            auto& temp=json_value[rIgAnwx].emplace_object();
            return serialize_struct(temp, member.pAspectReferences[rIgAnwx]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassInputAttachmentAspectCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["aspectReferenceCount"];
[&](){member.aspectReferenceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAspectReferences"];
[&](){ VkInputAttachmentAspectReference* temp_fFgnFli[&](){
            if (!json_value.as_array().size()==0){
                temp_fFgnFli=NULL;
            return; }temp_fFgnFli=(VkInputAttachmentAspectReference*)malloc(member.aspectReferenceCount*sizeof(VkInputAttachmentAspectReference));
        auto& arr=json_value.as_array();
        for(int FZlDMBF=0; FZlDMBF < member.aspectReferenceCount; FZlDMBF++){
            [&](){
            auto& temp=json_value[FZlDMBF].as_object();
            deserialize_struct(temp,temp_fFgnFli[FZlDMBF]);
            }();
        }
        }();member.pAspectReferences=temp_fFgnFli;}();
}

    void serialize_pUserData(object& json, VkRenderPassInputAttachmentAspectCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassInputAttachmentAspectCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSurfaceInfo2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["surface"];
[&](){serialize_handle(json_value,member.surface);}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSurfaceInfo2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["surface"];
[&](){deserialize_handle(json_value, member.surface);}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSurfaceInfo2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSurfaceInfo2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfaceCapabilities2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["surfaceCapabilities"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.surfaceCapabilities);
            }();
}
void deserialize_struct(object& json, VkSurfaceCapabilities2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["surfaceCapabilities"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.surfaceCapabilities);
            }();
}

    void serialize_pUserData(object& json, VkSurfaceCapabilities2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfaceCapabilities2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfaceFormat2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["surfaceFormat"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.surfaceFormat);
            }();
}
void deserialize_struct(object& json, VkSurfaceFormat2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["surfaceFormat"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.surfaceFormat);
            }();
}

    void serialize_pUserData(object& json, VkSurfaceFormat2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfaceFormat2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayProperties2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["displayProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.displayProperties);
            }();
}
void deserialize_struct(object& json, VkDisplayProperties2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["displayProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.displayProperties);
            }();
}

    void serialize_pUserData(object& json, VkDisplayProperties2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayProperties2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPlaneProperties2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["displayPlaneProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.displayPlaneProperties);
            }();
}
void deserialize_struct(object& json, VkDisplayPlaneProperties2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["displayPlaneProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.displayPlaneProperties);
            }();
}

    void serialize_pUserData(object& json, VkDisplayPlaneProperties2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPlaneProperties2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayModeProperties2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["displayModeProperties"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.displayModeProperties);
            }();
}
void deserialize_struct(object& json, VkDisplayModeProperties2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["displayModeProperties"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.displayModeProperties);
            }();
}

    void serialize_pUserData(object& json, VkDisplayModeProperties2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayModeProperties2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPlaneInfo2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["mode"];
[&](){serialize_handle(json_value,member.mode);}();
auto& json_value=json["planeIndex"];
[&](){json_value=member.planeIndex;}();
}
void deserialize_struct(object& json, VkDisplayPlaneInfo2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["mode"];
[&](){deserialize_handle(json_value, member.mode);}();
auto& json_value=json["planeIndex"];
[&](){member.planeIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDisplayPlaneInfo2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPlaneInfo2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDisplayPlaneCapabilities2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["capabilities"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.capabilities);
            }();
}
void deserialize_struct(object& json, VkDisplayPlaneCapabilities2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["capabilities"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.capabilities);
            }();
}

    void serialize_pUserData(object& json, VkDisplayPlaneCapabilities2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDisplayPlaneCapabilities2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSharedPresentSurfaceCapabilitiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sharedPresentSupportedUsageFlags"];
[&](){[&](){[&](){json_value=member.sharedPresentSupportedUsageFlags;}();}();}();
}
void deserialize_struct(object& json, VkSharedPresentSurfaceCapabilitiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["sharedPresentSupportedUsageFlags"];
[&](){[&](){VkImageUsageFlags temp_LBJmXAK[&](){temp_LBJmXAK=static_cast<int>(value_to<int>(json_value));}();member.sharedPresentSupportedUsageFlags=(VkImageUsageFlags)temp_LBJmXAK;}();}();
}

    void serialize_pUserData(object& json, VkSharedPresentSurfaceCapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSharedPresentSurfaceCapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevice16BitStorageFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["storageBuffer16BitAccess"];
[&](){[&](){json_value=member.storageBuffer16BitAccess;}();}();
auto& json_value=json["uniformAndStorageBuffer16BitAccess"];
[&](){[&](){json_value=member.uniformAndStorageBuffer16BitAccess;}();}();
auto& json_value=json["storagePushConstant16"];
[&](){[&](){json_value=member.storagePushConstant16;}();}();
auto& json_value=json["storageInputOutput16"];
[&](){[&](){json_value=member.storageInputOutput16;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevice16BitStorageFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["storageBuffer16BitAccess"];
[&](){[&](){member.storageBuffer16BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformAndStorageBuffer16BitAccess"];
[&](){[&](){member.uniformAndStorageBuffer16BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storagePushConstant16"];
[&](){[&](){member.storagePushConstant16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storageInputOutput16"];
[&](){[&](){member.storageInputOutput16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevice16BitStorageFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevice16BitStorageFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSubgroupProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["subgroupSize"];
[&](){json_value=member.subgroupSize;}();
auto& json_value=json["supportedStages"];
[&](){[&](){[&](){json_value=member.supportedStages;}();}();}();
auto& json_value=json["supportedOperations"];
[&](){[&](){[&](){json_value=member.supportedOperations;}();}();}();
auto& json_value=json["quadOperationsInAllStages"];
[&](){[&](){json_value=member.quadOperationsInAllStages;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSubgroupProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["subgroupSize"];
[&](){member.subgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["supportedStages"];
[&](){[&](){VkShaderStageFlags temp_SszTCcf[&](){temp_SszTCcf=static_cast<int>(value_to<int>(json_value));}();member.supportedStages=(VkShaderStageFlags)temp_SszTCcf;}();}();
auto& json_value=json["supportedOperations"];
[&](){[&](){VkSubgroupFeatureFlags temp_heIDvCx[&](){temp_heIDvCx=static_cast<int>(value_to<int>(json_value));}();member.supportedOperations=(VkSubgroupFeatureFlags)temp_heIDvCx;}();}();
auto& json_value=json["quadOperationsInAllStages"];
[&](){[&](){member.quadOperationsInAllStages=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSubgroupProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSubgroupProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderSubgroupExtendedTypes"];
[&](){[&](){json_value=member.shaderSubgroupExtendedTypes;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderSubgroupExtendedTypes"];
[&](){[&](){member.shaderSubgroupExtendedTypes=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferMemoryRequirementsInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
}
void deserialize_struct(object& json, VkBufferMemoryRequirementsInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
}

    void serialize_pUserData(object& json, VkBufferMemoryRequirementsInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferMemoryRequirementsInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceBufferMemoryRequirements& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pCreateInfo"];
[&](){
            if (member.pCreateInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int xlJNDRB=0; xlJNDRB < 1; xlJNDRB++){
            [&](){
            auto& temp=json_value[xlJNDRB].emplace_object();
            return serialize_struct(temp, member.pCreateInfo[xlJNDRB]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDeviceBufferMemoryRequirements& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pCreateInfo"];
[&](){ VkBufferCreateInfo* temp_jZUqWFE[&](){
            if (!json_value.as_array().size()==0){
                temp_jZUqWFE=NULL;
            return; }temp_jZUqWFE=(VkBufferCreateInfo*)malloc(1*sizeof(VkBufferCreateInfo));
        auto& arr=json_value.as_array();
        for(int uLhNaqZ=0; uLhNaqZ < 1; uLhNaqZ++){
            [&](){
            auto& temp=json_value[uLhNaqZ].as_object();
            deserialize_struct(temp,temp_jZUqWFE[uLhNaqZ]);
            }();
        }
        }();member.pCreateInfo=temp_jZUqWFE;}();
}

    void serialize_pUserData(object& json, VkDeviceBufferMemoryRequirements& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceBufferMemoryRequirements& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageMemoryRequirementsInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
}
void deserialize_struct(object& json, VkImageMemoryRequirementsInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
}

    void serialize_pUserData(object& json, VkImageMemoryRequirementsInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageMemoryRequirementsInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageSparseMemoryRequirementsInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
}
void deserialize_struct(object& json, VkImageSparseMemoryRequirementsInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
}

    void serialize_pUserData(object& json, VkImageSparseMemoryRequirementsInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageSparseMemoryRequirementsInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceImageMemoryRequirements& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pCreateInfo"];
[&](){
            if (member.pCreateInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int pUPULkH=0; pUPULkH < 1; pUPULkH++){
            [&](){
            auto& temp=json_value[pUPULkH].emplace_object();
            return serialize_struct(temp, member.pCreateInfo[pUPULkH]);
            }();
        }
        }();
auto& json_value=json["planeAspect"];
[&](){[&](){[&](){json_value=member.planeAspect;}();}();}();
}
void deserialize_struct(object& json, VkDeviceImageMemoryRequirements& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pCreateInfo"];
[&](){ VkImageCreateInfo* temp_GaGgIvU[&](){
            if (!json_value.as_array().size()==0){
                temp_GaGgIvU=NULL;
            return; }temp_GaGgIvU=(VkImageCreateInfo*)malloc(1*sizeof(VkImageCreateInfo));
        auto& arr=json_value.as_array();
        for(int OCzXYbh=0; OCzXYbh < 1; OCzXYbh++){
            [&](){
            auto& temp=json_value[OCzXYbh].as_object();
            deserialize_struct(temp,temp_GaGgIvU[OCzXYbh]);
            }();
        }
        }();member.pCreateInfo=temp_GaGgIvU;}();
auto& json_value=json["planeAspect"];
[&](){[&](){VkImageAspectFlagBits temp_PAVDIjz[&](){temp_PAVDIjz=static_cast<int>(value_to<int>(json_value));}();member.planeAspect=(VkImageAspectFlagBits)temp_PAVDIjz;}();}();
}

    void serialize_pUserData(object& json, VkDeviceImageMemoryRequirements& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceImageMemoryRequirements& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryRequirements2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryRequirements"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.memoryRequirements);
            }();
}
void deserialize_struct(object& json, VkMemoryRequirements2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryRequirements"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.memoryRequirements);
            }();
}

    void serialize_pUserData(object& json, VkMemoryRequirements2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryRequirements2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSparseImageMemoryRequirements2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryRequirements"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.memoryRequirements);
            }();
}
void deserialize_struct(object& json, VkSparseImageMemoryRequirements2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryRequirements"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.memoryRequirements);
            }();
}

    void serialize_pUserData(object& json, VkSparseImageMemoryRequirements2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSparseImageMemoryRequirements2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePointClippingProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pointClippingBehavior"];
[&](){[&](){[&](){json_value=member.pointClippingBehavior;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePointClippingProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pointClippingBehavior"];
[&](){[&](){VkPointClippingBehavior temp_kUYPaec[&](){temp_kUYPaec=static_cast<int>(value_to<int>(json_value));}();member.pointClippingBehavior=(VkPointClippingBehavior)temp_kUYPaec;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePointClippingProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePointClippingProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryDedicatedRequirements& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["prefersDedicatedAllocation"];
[&](){[&](){json_value=member.prefersDedicatedAllocation;}();}();
auto& json_value=json["requiresDedicatedAllocation"];
[&](){[&](){json_value=member.requiresDedicatedAllocation;}();}();
}
void deserialize_struct(object& json, VkMemoryDedicatedRequirements& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["prefersDedicatedAllocation"];
[&](){[&](){member.prefersDedicatedAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["requiresDedicatedAllocation"];
[&](){[&](){member.requiresDedicatedAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkMemoryDedicatedRequirements& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryDedicatedRequirements& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryDedicatedAllocateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
}
void deserialize_struct(object& json, VkMemoryDedicatedAllocateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
}

    void serialize_pUserData(object& json, VkMemoryDedicatedAllocateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryDedicatedAllocateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewUsageCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
}
void deserialize_struct(object& json, VkImageViewUsageCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["usage"];
[&](){[&](){VkImageUsageFlags temp_wDutYxX[&](){temp_wDutYxX=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkImageUsageFlags)temp_wDutYxX;}();}();
}

    void serialize_pUserData(object& json, VkImageViewUsageCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewUsageCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewSlicedCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sliceOffset"];
[&](){json_value=member.sliceOffset;}();
auto& json_value=json["sliceCount"];
[&](){json_value=member.sliceCount;}();
}
void deserialize_struct(object& json, VkImageViewSlicedCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["sliceOffset"];
[&](){member.sliceOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sliceCount"];
[&](){member.sliceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImageViewSlicedCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewSlicedCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineTessellationDomainOriginStateCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["domainOrigin"];
[&](){[&](){[&](){json_value=member.domainOrigin;}();}();}();
}
void deserialize_struct(object& json, VkPipelineTessellationDomainOriginStateCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["domainOrigin"];
[&](){[&](){VkTessellationDomainOrigin temp_lravsDC[&](){temp_lravsDC=static_cast<int>(value_to<int>(json_value));}();member.domainOrigin=(VkTessellationDomainOrigin)temp_lravsDC;}();}();
}

    void serialize_pUserData(object& json, VkPipelineTessellationDomainOriginStateCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineTessellationDomainOriginStateCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerYcbcrConversionInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["conversion"];
[&](){serialize_handle(json_value,member.conversion);}();
}
void deserialize_struct(object& json, VkSamplerYcbcrConversionInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["conversion"];
[&](){deserialize_handle(json_value, member.conversion);}();
}

    void serialize_pUserData(object& json, VkSamplerYcbcrConversionInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerYcbcrConversionInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerYcbcrConversionCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["ycbcrModel"];
[&](){[&](){[&](){json_value=member.ycbcrModel;}();}();}();
auto& json_value=json["ycbcrRange"];
[&](){[&](){[&](){json_value=member.ycbcrRange;}();}();}();
auto& json_value=json["components"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.components);
            }();
auto& json_value=json["xChromaOffset"];
[&](){[&](){[&](){json_value=member.xChromaOffset;}();}();}();
auto& json_value=json["yChromaOffset"];
[&](){[&](){[&](){json_value=member.yChromaOffset;}();}();}();
auto& json_value=json["chromaFilter"];
[&](){[&](){[&](){json_value=member.chromaFilter;}();}();}();
auto& json_value=json["forceExplicitReconstruction"];
[&](){[&](){json_value=member.forceExplicitReconstruction;}();}();
}
void deserialize_struct(object& json, VkSamplerYcbcrConversionCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["ycbcrModel"];
[&](){[&](){VkSamplerYcbcrModelConversion temp_gMOzAgM[&](){temp_gMOzAgM=static_cast<int>(value_to<int>(json_value));}();member.ycbcrModel=(VkSamplerYcbcrModelConversion)temp_gMOzAgM;}();}();
auto& json_value=json["ycbcrRange"];
[&](){[&](){VkSamplerYcbcrRange temp_LUaVrpq[&](){temp_LUaVrpq=static_cast<int>(value_to<int>(json_value));}();member.ycbcrRange=(VkSamplerYcbcrRange)temp_LUaVrpq;}();}();
auto& json_value=json["components"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.components);
            }();
auto& json_value=json["xChromaOffset"];
[&](){[&](){VkChromaLocation temp_hKycltv[&](){temp_hKycltv=static_cast<int>(value_to<int>(json_value));}();member.xChromaOffset=(VkChromaLocation)temp_hKycltv;}();}();
auto& json_value=json["yChromaOffset"];
[&](){[&](){VkChromaLocation temp_vyRUYPM[&](){temp_vyRUYPM=static_cast<int>(value_to<int>(json_value));}();member.yChromaOffset=(VkChromaLocation)temp_vyRUYPM;}();}();
auto& json_value=json["chromaFilter"];
[&](){[&](){VkFilter temp_WsiFeOH[&](){temp_WsiFeOH=static_cast<int>(value_to<int>(json_value));}();member.chromaFilter=(VkFilter)temp_WsiFeOH;}();}();
auto& json_value=json["forceExplicitReconstruction"];
[&](){[&](){member.forceExplicitReconstruction=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSamplerYcbcrConversionCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerYcbcrConversionCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindImagePlaneMemoryInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["planeAspect"];
[&](){[&](){[&](){json_value=member.planeAspect;}();}();}();
}
void deserialize_struct(object& json, VkBindImagePlaneMemoryInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["planeAspect"];
[&](){[&](){VkImageAspectFlagBits temp_PAVDIjz[&](){temp_PAVDIjz=static_cast<int>(value_to<int>(json_value));}();member.planeAspect=(VkImageAspectFlagBits)temp_PAVDIjz;}();}();
}

    void serialize_pUserData(object& json, VkBindImagePlaneMemoryInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindImagePlaneMemoryInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImagePlaneMemoryRequirementsInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["planeAspect"];
[&](){[&](){[&](){json_value=member.planeAspect;}();}();}();
}
void deserialize_struct(object& json, VkImagePlaneMemoryRequirementsInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["planeAspect"];
[&](){[&](){VkImageAspectFlagBits temp_PAVDIjz[&](){temp_PAVDIjz=static_cast<int>(value_to<int>(json_value));}();member.planeAspect=(VkImageAspectFlagBits)temp_PAVDIjz;}();}();
}

    void serialize_pUserData(object& json, VkImagePlaneMemoryRequirementsInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImagePlaneMemoryRequirementsInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSamplerYcbcrConversionFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["samplerYcbcrConversion"];
[&](){[&](){json_value=member.samplerYcbcrConversion;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSamplerYcbcrConversionFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["samplerYcbcrConversion"];
[&](){[&](){member.samplerYcbcrConversion=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSamplerYcbcrConversionFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSamplerYcbcrConversionFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerYcbcrConversionImageFormatProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["combinedImageSamplerDescriptorCount"];
[&](){json_value=member.combinedImageSamplerDescriptorCount;}();
}
void deserialize_struct(object& json, VkSamplerYcbcrConversionImageFormatProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["combinedImageSamplerDescriptorCount"];
[&](){member.combinedImageSamplerDescriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSamplerYcbcrConversionImageFormatProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerYcbcrConversionImageFormatProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkTextureLODGatherFormatPropertiesAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["supportsTextureGatherLODBiasAMD"];
[&](){[&](){json_value=member.supportsTextureGatherLODBiasAMD;}();}();
}
void deserialize_struct(object& json, VkTextureLODGatherFormatPropertiesAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["supportsTextureGatherLODBiasAMD"];
[&](){[&](){member.supportsTextureGatherLODBiasAMD=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkTextureLODGatherFormatPropertiesAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkTextureLODGatherFormatPropertiesAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkConditionalRenderingBeginInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkConditionalRenderingBeginInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["flags"];
[&](){[&](){VkConditionalRenderingFlagsEXT temp_BTDEgWd[&](){temp_BTDEgWd=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkConditionalRenderingFlagsEXT)temp_BTDEgWd;}();}();
}

    void serialize_pUserData(object& json, VkConditionalRenderingBeginInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkConditionalRenderingBeginInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkProtectedSubmitInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["protectedSubmit"];
[&](){[&](){json_value=member.protectedSubmit;}();}();
}
void deserialize_struct(object& json, VkProtectedSubmitInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["protectedSubmit"];
[&](){[&](){member.protectedSubmit=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkProtectedSubmitInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkProtectedSubmitInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceProtectedMemoryFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["protectedMemory"];
[&](){[&](){json_value=member.protectedMemory;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceProtectedMemoryFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["protectedMemory"];
[&](){[&](){member.protectedMemory=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceProtectedMemoryFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceProtectedMemoryFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceProtectedMemoryProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["protectedNoFault"];
[&](){[&](){json_value=member.protectedNoFault;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceProtectedMemoryProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["protectedNoFault"];
[&](){[&](){member.protectedNoFault=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceProtectedMemoryProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceProtectedMemoryProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceQueueInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["queueFamilyIndex"];
[&](){json_value=member.queueFamilyIndex;}();
auto& json_value=json["queueIndex"];
[&](){json_value=member.queueIndex;}();
}
void deserialize_struct(object& json, VkDeviceQueueInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDeviceQueueCreateFlags temp_cLvxMpp[&](){temp_cLvxMpp=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDeviceQueueCreateFlags)temp_cLvxMpp;}();}();
auto& json_value=json["queueFamilyIndex"];
[&](){member.queueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["queueIndex"];
[&](){member.queueIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDeviceQueueInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceQueueInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCoverageToColorStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["coverageToColorEnable"];
[&](){[&](){json_value=member.coverageToColorEnable;}();}();
auto& json_value=json["coverageToColorLocation"];
[&](){json_value=member.coverageToColorLocation;}();
}
void deserialize_struct(object& json, VkPipelineCoverageToColorStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCoverageToColorStateCreateFlagsNV temp_EhMGxfP[&](){temp_EhMGxfP=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCoverageToColorStateCreateFlagsNV)temp_EhMGxfP;}();}();
auto& json_value=json["coverageToColorEnable"];
[&](){[&](){member.coverageToColorEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["coverageToColorLocation"];
[&](){member.coverageToColorLocation=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineCoverageToColorStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCoverageToColorStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSamplerFilterMinmaxProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["filterMinmaxSingleComponentFormats"];
[&](){[&](){json_value=member.filterMinmaxSingleComponentFormats;}();}();
auto& json_value=json["filterMinmaxImageComponentMapping"];
[&](){[&](){json_value=member.filterMinmaxImageComponentMapping;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSamplerFilterMinmaxProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["filterMinmaxSingleComponentFormats"];
[&](){[&](){member.filterMinmaxSingleComponentFormats=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["filterMinmaxImageComponentMapping"];
[&](){[&](){member.filterMinmaxImageComponentMapping=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSamplerFilterMinmaxProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSamplerFilterMinmaxProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSampleLocationEXT& member){
        
    
auto& json_value=json["x"];
[&](){json_value=member.x;}();
auto& json_value=json["y"];
[&](){json_value=member.y;}();
}
void deserialize_struct(object& json, VkSampleLocationEXT& member){
auto& json_value=json["x"];
[&](){member.x=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["y"];
[&](){member.y=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSampleLocationEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSampleLocationEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSampleLocationsInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sampleLocationsPerPixel"];
[&](){[&](){[&](){json_value=member.sampleLocationsPerPixel;}();}();}();
auto& json_value=json["sampleLocationGridSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.sampleLocationGridSize);
            }();
auto& json_value=json["sampleLocationsCount"];
[&](){json_value=member.sampleLocationsCount;}();
auto& json_value=json["pSampleLocations"];
[&](){
            if (member.pSampleLocations==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int AEcYmme=0; AEcYmme < member.sampleLocationsCount; AEcYmme++){
            [&](){
            auto& temp=json_value[AEcYmme].emplace_object();
            return serialize_struct(temp, member.pSampleLocations[AEcYmme]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkSampleLocationsInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["sampleLocationsPerPixel"];
[&](){[&](){VkSampleCountFlagBits temp_cbKHKWC[&](){temp_cbKHKWC=static_cast<int>(value_to<int>(json_value));}();member.sampleLocationsPerPixel=(VkSampleCountFlagBits)temp_cbKHKWC;}();}();
auto& json_value=json["sampleLocationGridSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.sampleLocationGridSize);
            }();
auto& json_value=json["sampleLocationsCount"];
[&](){member.sampleLocationsCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSampleLocations"];
[&](){ VkSampleLocationEXT* temp_JdCfCUB[&](){
            if (!json_value.as_array().size()==0){
                temp_JdCfCUB=NULL;
            return; }temp_JdCfCUB=(VkSampleLocationEXT*)malloc(member.sampleLocationsCount*sizeof(VkSampleLocationEXT));
        auto& arr=json_value.as_array();
        for(int VuEajPo=0; VuEajPo < member.sampleLocationsCount; VuEajPo++){
            [&](){
            auto& temp=json_value[VuEajPo].as_object();
            deserialize_struct(temp,temp_JdCfCUB[VuEajPo]);
            }();
        }
        }();member.pSampleLocations=temp_JdCfCUB;}();
}

    void serialize_pUserData(object& json, VkSampleLocationsInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSampleLocationsInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentSampleLocationsEXT& member){
        
    
auto& json_value=json["attachmentIndex"];
[&](){json_value=member.attachmentIndex;}();
auto& json_value=json["sampleLocationsInfo"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.sampleLocationsInfo);
            }();
}
void deserialize_struct(object& json, VkAttachmentSampleLocationsEXT& member){
auto& json_value=json["attachmentIndex"];
[&](){member.attachmentIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sampleLocationsInfo"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.sampleLocationsInfo);
            }();
}

    void serialize_pUserData(object& json, VkAttachmentSampleLocationsEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentSampleLocationsEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassSampleLocationsEXT& member){
        
    
auto& json_value=json["subpassIndex"];
[&](){json_value=member.subpassIndex;}();
auto& json_value=json["sampleLocationsInfo"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.sampleLocationsInfo);
            }();
}
void deserialize_struct(object& json, VkSubpassSampleLocationsEXT& member){
auto& json_value=json["subpassIndex"];
[&](){member.subpassIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sampleLocationsInfo"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.sampleLocationsInfo);
            }();
}

    void serialize_pUserData(object& json, VkSubpassSampleLocationsEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassSampleLocationsEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassSampleLocationsBeginInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["attachmentInitialSampleLocationsCount"];
[&](){json_value=member.attachmentInitialSampleLocationsCount;}();
auto& json_value=json["pAttachmentInitialSampleLocations"];
[&](){
            if (member.pAttachmentInitialSampleLocations==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int VhCXYaI=0; VhCXYaI < member.attachmentInitialSampleLocationsCount; VhCXYaI++){
            [&](){
            auto& temp=json_value[VhCXYaI].emplace_object();
            return serialize_struct(temp, member.pAttachmentInitialSampleLocations[VhCXYaI]);
            }();
        }
        }();
auto& json_value=json["postSubpassSampleLocationsCount"];
[&](){json_value=member.postSubpassSampleLocationsCount;}();
auto& json_value=json["pPostSubpassSampleLocations"];
[&](){
            if (member.pPostSubpassSampleLocations==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KWZzgwg=0; KWZzgwg < member.postSubpassSampleLocationsCount; KWZzgwg++){
            [&](){
            auto& temp=json_value[KWZzgwg].emplace_object();
            return serialize_struct(temp, member.pPostSubpassSampleLocations[KWZzgwg]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassSampleLocationsBeginInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["attachmentInitialSampleLocationsCount"];
[&](){member.attachmentInitialSampleLocationsCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAttachmentInitialSampleLocations"];
[&](){ VkAttachmentSampleLocationsEXT* temp_PmaVgsx[&](){
            if (!json_value.as_array().size()==0){
                temp_PmaVgsx=NULL;
            return; }temp_PmaVgsx=(VkAttachmentSampleLocationsEXT*)malloc(member.attachmentInitialSampleLocationsCount*sizeof(VkAttachmentSampleLocationsEXT));
        auto& arr=json_value.as_array();
        for(int KcToJrv=0; KcToJrv < member.attachmentInitialSampleLocationsCount; KcToJrv++){
            [&](){
            auto& temp=json_value[KcToJrv].as_object();
            deserialize_struct(temp,temp_PmaVgsx[KcToJrv]);
            }();
        }
        }();member.pAttachmentInitialSampleLocations=temp_PmaVgsx;}();
auto& json_value=json["postSubpassSampleLocationsCount"];
[&](){member.postSubpassSampleLocationsCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPostSubpassSampleLocations"];
[&](){ VkSubpassSampleLocationsEXT* temp_AgmBrqJ[&](){
            if (!json_value.as_array().size()==0){
                temp_AgmBrqJ=NULL;
            return; }temp_AgmBrqJ=(VkSubpassSampleLocationsEXT*)malloc(member.postSubpassSampleLocationsCount*sizeof(VkSubpassSampleLocationsEXT));
        auto& arr=json_value.as_array();
        for(int JwwfDjw=0; JwwfDjw < member.postSubpassSampleLocationsCount; JwwfDjw++){
            [&](){
            auto& temp=json_value[JwwfDjw].as_object();
            deserialize_struct(temp,temp_AgmBrqJ[JwwfDjw]);
            }();
        }
        }();member.pPostSubpassSampleLocations=temp_AgmBrqJ;}();
}

    void serialize_pUserData(object& json, VkRenderPassSampleLocationsBeginInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassSampleLocationsBeginInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineSampleLocationsStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sampleLocationsEnable"];
[&](){[&](){json_value=member.sampleLocationsEnable;}();}();
auto& json_value=json["sampleLocationsInfo"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.sampleLocationsInfo);
            }();
}
void deserialize_struct(object& json, VkPipelineSampleLocationsStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["sampleLocationsEnable"];
[&](){[&](){member.sampleLocationsEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sampleLocationsInfo"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.sampleLocationsInfo);
            }();
}

    void serialize_pUserData(object& json, VkPipelineSampleLocationsStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineSampleLocationsStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSampleLocationsPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sampleLocationSampleCounts"];
[&](){[&](){[&](){json_value=member.sampleLocationSampleCounts;}();}();}();
auto& json_value=json["maxSampleLocationGridSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxSampleLocationGridSize);
            }();
auto& json_value=json["sampleLocationCoordinateRange"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int PRguJoc=0; PRguJoc < 2; PRguJoc++){
            [&](){json_value[PRguJoc]=member.sampleLocationCoordinateRange[PRguJoc];}();
        }
        }();
auto& json_value=json["sampleLocationSubPixelBits"];
[&](){json_value=member.sampleLocationSubPixelBits;}();
auto& json_value=json["variableSampleLocations"];
[&](){[&](){json_value=member.variableSampleLocations;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSampleLocationsPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["sampleLocationSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_cOArGfk[&](){temp_cOArGfk=static_cast<int>(value_to<int>(json_value));}();member.sampleLocationSampleCounts=(VkSampleCountFlags)temp_cOArGfk;}();}();
auto& json_value=json["maxSampleLocationGridSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxSampleLocationGridSize);
            }();
auto& json_value=json["sampleLocationCoordinateRange"];
[&](){
        auto& arr=json_value.as_array();
        for(int PRguJoc=0; PRguJoc < 2; PRguJoc++){
            [&](){member.sampleLocationCoordinateRange[PRguJoc]=static_cast<float>(value_to<int>(json_value[PRguJoc]));}();
        }
        }();
auto& json_value=json["sampleLocationSubPixelBits"];
[&](){member.sampleLocationSubPixelBits=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["variableSampleLocations"];
[&](){[&](){member.variableSampleLocations=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSampleLocationsPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSampleLocationsPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMultisamplePropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxSampleLocationGridSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxSampleLocationGridSize);
            }();
}
void deserialize_struct(object& json, VkMultisamplePropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxSampleLocationGridSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxSampleLocationGridSize);
            }();
}

    void serialize_pUserData(object& json, VkMultisamplePropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMultisamplePropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerReductionModeCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["reductionMode"];
[&](){[&](){[&](){json_value=member.reductionMode;}();}();}();
}
void deserialize_struct(object& json, VkSamplerReductionModeCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["reductionMode"];
[&](){[&](){VkSamplerReductionMode temp_PzmhjYN[&](){temp_PzmhjYN=static_cast<int>(value_to<int>(json_value));}();member.reductionMode=(VkSamplerReductionMode)temp_PzmhjYN;}();}();
}

    void serialize_pUserData(object& json, VkSamplerReductionModeCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerReductionModeCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["advancedBlendCoherentOperations"];
[&](){[&](){json_value=member.advancedBlendCoherentOperations;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["advancedBlendCoherentOperations"];
[&](){[&](){member.advancedBlendCoherentOperations=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultiDrawFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["multiDraw"];
[&](){[&](){json_value=member.multiDraw;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultiDrawFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["multiDraw"];
[&](){[&](){member.multiDraw=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultiDrawFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultiDrawFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["advancedBlendMaxColorAttachments"];
[&](){json_value=member.advancedBlendMaxColorAttachments;}();
auto& json_value=json["advancedBlendIndependentBlend"];
[&](){[&](){json_value=member.advancedBlendIndependentBlend;}();}();
auto& json_value=json["advancedBlendNonPremultipliedSrcColor"];
[&](){[&](){json_value=member.advancedBlendNonPremultipliedSrcColor;}();}();
auto& json_value=json["advancedBlendNonPremultipliedDstColor"];
[&](){[&](){json_value=member.advancedBlendNonPremultipliedDstColor;}();}();
auto& json_value=json["advancedBlendCorrelatedOverlap"];
[&](){[&](){json_value=member.advancedBlendCorrelatedOverlap;}();}();
auto& json_value=json["advancedBlendAllOperations"];
[&](){[&](){json_value=member.advancedBlendAllOperations;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["advancedBlendMaxColorAttachments"];
[&](){member.advancedBlendMaxColorAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["advancedBlendIndependentBlend"];
[&](){[&](){member.advancedBlendIndependentBlend=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["advancedBlendNonPremultipliedSrcColor"];
[&](){[&](){member.advancedBlendNonPremultipliedSrcColor=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["advancedBlendNonPremultipliedDstColor"];
[&](){[&](){member.advancedBlendNonPremultipliedDstColor=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["advancedBlendCorrelatedOverlap"];
[&](){[&](){member.advancedBlendCorrelatedOverlap=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["advancedBlendAllOperations"];
[&](){[&](){member.advancedBlendAllOperations=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineColorBlendAdvancedStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcPremultiplied"];
[&](){[&](){json_value=member.srcPremultiplied;}();}();
auto& json_value=json["dstPremultiplied"];
[&](){[&](){json_value=member.dstPremultiplied;}();}();
auto& json_value=json["blendOverlap"];
[&](){[&](){[&](){json_value=member.blendOverlap;}();}();}();
}
void deserialize_struct(object& json, VkPipelineColorBlendAdvancedStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcPremultiplied"];
[&](){[&](){member.srcPremultiplied=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dstPremultiplied"];
[&](){[&](){member.dstPremultiplied=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["blendOverlap"];
[&](){[&](){VkBlendOverlapEXT temp_XnRYCgG[&](){temp_XnRYCgG=static_cast<int>(value_to<int>(json_value));}();member.blendOverlap=(VkBlendOverlapEXT)temp_XnRYCgG;}();}();
}

    void serialize_pUserData(object& json, VkPipelineColorBlendAdvancedStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineColorBlendAdvancedStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceInlineUniformBlockFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["inlineUniformBlock"];
[&](){[&](){json_value=member.inlineUniformBlock;}();}();
auto& json_value=json["descriptorBindingInlineUniformBlockUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingInlineUniformBlockUpdateAfterBind;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceInlineUniformBlockFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["inlineUniformBlock"];
[&](){[&](){member.inlineUniformBlock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingInlineUniformBlockUpdateAfterBind"];
[&](){[&](){member.descriptorBindingInlineUniformBlockUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceInlineUniformBlockFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceInlineUniformBlockFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceInlineUniformBlockProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxInlineUniformBlockSize"];
[&](){json_value=member.maxInlineUniformBlockSize;}();
auto& json_value=json["maxPerStageDescriptorInlineUniformBlocks"];
[&](){json_value=member.maxPerStageDescriptorInlineUniformBlocks;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;}();
auto& json_value=json["maxDescriptorSetInlineUniformBlocks"];
[&](){json_value=member.maxDescriptorSetInlineUniformBlocks;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInlineUniformBlocks"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindInlineUniformBlocks;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceInlineUniformBlockProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxInlineUniformBlockSize"];
[&](){member.maxInlineUniformBlockSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorInlineUniformBlocks"];
[&](){member.maxPerStageDescriptorInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"];
[&](){member.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetInlineUniformBlocks"];
[&](){member.maxDescriptorSetInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInlineUniformBlocks"];
[&](){member.maxDescriptorSetUpdateAfterBindInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceInlineUniformBlockProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceInlineUniformBlockProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkWriteDescriptorSetInlineUniformBlock& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dataSize"];
[&](){json_value=member.dataSize;}();
auto& json_value=json["pData"];
[&](){
            if (member.pData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KUeyATI=0; KUeyATI < member.dataSize; KUeyATI++){
            [&](){json_value[KUeyATI]=(char*)(member.pData)[KUeyATI];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkWriteDescriptorSetInlineUniformBlock& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["dataSize"];
[&](){member.dataSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pData"];
[&](){ void* temp_FrwwHum[&](){
            if (!json_value.as_array().size()==0){
                temp_FrwwHum=NULL;
            return; }char* temp_WIyeSmx;[&](){
            if (!json_value.as_array().size()==0){
                temp_FrwwHum=NULL;
            return; }temp_FrwwHum=(char*)malloc(member.dataSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int OCmuZGI=0; OCmuZGI < member.dataSize; OCmuZGI++){
            [&](){temp_FrwwHum[OCmuZGI]=static_cast<char>(value_to<int>(json_value[OCmuZGI]));}();
        }
        }();temp_FrwwHum=temp_WIyeSmx;}();member.pData=temp_FrwwHum;}();
}

    void serialize_pUserData(object& json, VkWriteDescriptorSetInlineUniformBlock& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkWriteDescriptorSetInlineUniformBlock& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorPoolInlineUniformBlockCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxInlineUniformBlockBindings"];
[&](){json_value=member.maxInlineUniformBlockBindings;}();
}
void deserialize_struct(object& json, VkDescriptorPoolInlineUniformBlockCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["maxInlineUniformBlockBindings"];
[&](){member.maxInlineUniformBlockBindings=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDescriptorPoolInlineUniformBlockCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorPoolInlineUniformBlockCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCoverageModulationStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["coverageModulationMode"];
[&](){[&](){[&](){json_value=member.coverageModulationMode;}();}();}();
auto& json_value=json["coverageModulationTableEnable"];
[&](){[&](){json_value=member.coverageModulationTableEnable;}();}();
auto& json_value=json["coverageModulationTableCount"];
[&](){json_value=member.coverageModulationTableCount;}();
auto& json_value=json["pCoverageModulationTable"];
[&](){
            if (member.pCoverageModulationTable==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int PsVHolD=0; PsVHolD < member.coverageModulationTableCount; PsVHolD++){
            [&](){json_value[PsVHolD]=member.pCoverageModulationTable[PsVHolD];}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineCoverageModulationStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCoverageModulationStateCreateFlagsNV temp_PrNpZic[&](){temp_PrNpZic=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCoverageModulationStateCreateFlagsNV)temp_PrNpZic;}();}();
auto& json_value=json["coverageModulationMode"];
[&](){[&](){VkCoverageModulationModeNV temp_YCPJsEH[&](){temp_YCPJsEH=static_cast<int>(value_to<int>(json_value));}();member.coverageModulationMode=(VkCoverageModulationModeNV)temp_YCPJsEH;}();}();
auto& json_value=json["coverageModulationTableEnable"];
[&](){[&](){member.coverageModulationTableEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["coverageModulationTableCount"];
[&](){member.coverageModulationTableCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCoverageModulationTable"];
[&](){ float* temp_XOhzyfQ[&](){
            if (!json_value.as_array().size()==0){
                temp_XOhzyfQ=NULL;
            return; }temp_XOhzyfQ=(float*)malloc(member.coverageModulationTableCount*sizeof(float));
        auto& arr=json_value.as_array();
        for(int hQRBHsT=0; hQRBHsT < member.coverageModulationTableCount; hQRBHsT++){
            [&](){temp_XOhzyfQ[hQRBHsT]=static_cast<float>(value_to<int>(json_value[hQRBHsT]));}();
        }
        }();member.pCoverageModulationTable=temp_XOhzyfQ;}();
}

    void serialize_pUserData(object& json, VkPipelineCoverageModulationStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCoverageModulationStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageFormatListCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["viewFormatCount"];
[&](){json_value=member.viewFormatCount;}();
auto& json_value=json["pViewFormats"];
[&](){
            if (member.pViewFormats==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int JvKPhOq=0; JvKPhOq < member.viewFormatCount; JvKPhOq++){
            [&](){[&](){[&](){json_value[JvKPhOq]=member.pViewFormats[JvKPhOq];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkImageFormatListCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["viewFormatCount"];
[&](){member.viewFormatCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewFormats"];
[&](){ VkFormat* temp_kdTEUIK[&](){
            if (!json_value.as_array().size()==0){
                temp_kdTEUIK=NULL;
            return; }temp_kdTEUIK=(VkFormat*)malloc(member.viewFormatCount*sizeof(VkFormat));
        auto& arr=json_value.as_array();
        for(int tWwlFTf=0; tWwlFTf < member.viewFormatCount; tWwlFTf++){
            [&](){[&](){const VkFormat* temp_FxPnjWU[&](){temp_FxPnjWU=static_cast<int>(value_to<int>(json_value[tWwlFTf]));}();temp_kdTEUIK[tWwlFTf]=(VkFormat)temp_FxPnjWU;}();}();
        }
        }();member.pViewFormats=temp_kdTEUIK;}();
}

    void serialize_pUserData(object& json, VkImageFormatListCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageFormatListCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkValidationCacheCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["initialDataSize"];
[&](){json_value=member.initialDataSize;}();
auto& json_value=json["pInitialData"];
[&](){
            if (member.pInitialData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pInitialData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int VgUKinx=0; VgUKinx < member.initialDataSize; VgUKinx++){
            [&](){json_value[VgUKinx]=(char*)(member.pInitialData)[VgUKinx];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkValidationCacheCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkValidationCacheCreateFlagsEXT temp_QUizVcb[&](){temp_QUizVcb=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkValidationCacheCreateFlagsEXT)temp_QUizVcb;}();}();
auto& json_value=json["initialDataSize"];
[&](){member.initialDataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pInitialData"];
[&](){ void* temp_CjhmeWG[&](){
            if (!json_value.as_array().size()==0){
                temp_CjhmeWG=NULL;
            return; }char* temp_IbkKMGY;[&](){
            if (!json_value.as_array().size()==0){
                temp_CjhmeWG=NULL;
            return; }temp_CjhmeWG=(char*)malloc(member.initialDataSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int FUremIn=0; FUremIn < member.initialDataSize; FUremIn++){
            [&](){temp_CjhmeWG[FUremIn]=static_cast<char>(value_to<int>(json_value[FUremIn]));}();
        }
        }();temp_CjhmeWG=temp_IbkKMGY;}();member.pInitialData=temp_CjhmeWG;}();
}

    void serialize_pUserData(object& json, VkValidationCacheCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkValidationCacheCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkShaderModuleValidationCacheCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["validationCache"];
[&](){serialize_handle(json_value,member.validationCache);}();
}
void deserialize_struct(object& json, VkShaderModuleValidationCacheCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["validationCache"];
[&](){deserialize_handle(json_value, member.validationCache);}();
}

    void serialize_pUserData(object& json, VkShaderModuleValidationCacheCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkShaderModuleValidationCacheCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMaintenance3Properties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxPerSetDescriptors"];
[&](){json_value=member.maxPerSetDescriptors;}();
auto& json_value=json["maxMemoryAllocationSize"];
[&](){[&](){json_value=member.maxMemoryAllocationSize;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMaintenance3Properties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxPerSetDescriptors"];
[&](){member.maxPerSetDescriptors=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMemoryAllocationSize"];
[&](){[&](){member.maxMemoryAllocationSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMaintenance3Properties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMaintenance3Properties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMaintenance4Features& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maintenance4"];
[&](){[&](){json_value=member.maintenance4;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMaintenance4Features& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maintenance4"];
[&](){[&](){member.maintenance4=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMaintenance4Features& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMaintenance4Features& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMaintenance4Properties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxBufferSize"];
[&](){[&](){json_value=member.maxBufferSize;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMaintenance4Properties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxBufferSize"];
[&](){[&](){member.maxBufferSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMaintenance4Properties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMaintenance4Properties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMaintenance5FeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maintenance5"];
[&](){[&](){json_value=member.maintenance5;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMaintenance5FeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maintenance5"];
[&](){[&](){member.maintenance5=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMaintenance5FeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMaintenance5FeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMaintenance5PropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["earlyFragmentMultisampleCoverageAfterSampleCounting"];
[&](){[&](){json_value=member.earlyFragmentMultisampleCoverageAfterSampleCounting;}();}();
auto& json_value=json["earlyFragmentSampleMaskTestBeforeSampleCounting"];
[&](){[&](){json_value=member.earlyFragmentSampleMaskTestBeforeSampleCounting;}();}();
auto& json_value=json["depthStencilSwizzleOneSupport"];
[&](){[&](){json_value=member.depthStencilSwizzleOneSupport;}();}();
auto& json_value=json["polygonModePointSize"];
[&](){[&](){json_value=member.polygonModePointSize;}();}();
auto& json_value=json["nonStrictSinglePixelWideLinesUseParallelogram"];
[&](){[&](){json_value=member.nonStrictSinglePixelWideLinesUseParallelogram;}();}();
auto& json_value=json["nonStrictWideLinesUseParallelogram"];
[&](){[&](){json_value=member.nonStrictWideLinesUseParallelogram;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMaintenance5PropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["earlyFragmentMultisampleCoverageAfterSampleCounting"];
[&](){[&](){member.earlyFragmentMultisampleCoverageAfterSampleCounting=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["earlyFragmentSampleMaskTestBeforeSampleCounting"];
[&](){[&](){member.earlyFragmentSampleMaskTestBeforeSampleCounting=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthStencilSwizzleOneSupport"];
[&](){[&](){member.depthStencilSwizzleOneSupport=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["polygonModePointSize"];
[&](){[&](){member.polygonModePointSize=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["nonStrictSinglePixelWideLinesUseParallelogram"];
[&](){[&](){member.nonStrictSinglePixelWideLinesUseParallelogram=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["nonStrictWideLinesUseParallelogram"];
[&](){[&](){member.nonStrictWideLinesUseParallelogram=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMaintenance5PropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMaintenance5PropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderingAreaInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["viewMask"];
[&](){json_value=member.viewMask;}();
auto& json_value=json["colorAttachmentCount"];
[&](){json_value=member.colorAttachmentCount;}();
auto& json_value=json["pColorAttachmentFormats"];
[&](){
            if (member.pColorAttachmentFormats==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wEZNsRI=0; wEZNsRI < member.colorAttachmentCount; wEZNsRI++){
            [&](){[&](){[&](){json_value[wEZNsRI]=member.pColorAttachmentFormats[wEZNsRI];}();}();}();
        }
        }();
auto& json_value=json["depthAttachmentFormat"];
[&](){[&](){[&](){json_value=member.depthAttachmentFormat;}();}();}();
auto& json_value=json["stencilAttachmentFormat"];
[&](){[&](){[&](){json_value=member.stencilAttachmentFormat;}();}();}();
}
void deserialize_struct(object& json, VkRenderingAreaInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["viewMask"];
[&](){member.viewMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["colorAttachmentCount"];
[&](){member.colorAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorAttachmentFormats"];
[&](){ VkFormat* temp_jJQRYSF[&](){
            if (!json_value.as_array().size()==0){
                temp_jJQRYSF=NULL;
            return; }temp_jJQRYSF=(VkFormat*)malloc(member.colorAttachmentCount*sizeof(VkFormat));
        auto& arr=json_value.as_array();
        for(int XcfMUtc=0; XcfMUtc < member.colorAttachmentCount; XcfMUtc++){
            [&](){[&](){const VkFormat* temp_sNQcGNB[&](){temp_sNQcGNB=static_cast<int>(value_to<int>(json_value[XcfMUtc]));}();temp_jJQRYSF[XcfMUtc]=(VkFormat)temp_sNQcGNB;}();}();
        }
        }();member.pColorAttachmentFormats=temp_jJQRYSF;}();
auto& json_value=json["depthAttachmentFormat"];
[&](){[&](){VkFormat temp_HBUvOqE[&](){temp_HBUvOqE=static_cast<int>(value_to<int>(json_value));}();member.depthAttachmentFormat=(VkFormat)temp_HBUvOqE;}();}();
auto& json_value=json["stencilAttachmentFormat"];
[&](){[&](){VkFormat temp_XOrMtnc[&](){temp_XOrMtnc=static_cast<int>(value_to<int>(json_value));}();member.stencilAttachmentFormat=(VkFormat)temp_XOrMtnc;}();}();
}

    void serialize_pUserData(object& json, VkRenderingAreaInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderingAreaInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetLayoutSupport& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["supported"];
[&](){[&](){json_value=member.supported;}();}();
}
void deserialize_struct(object& json, VkDescriptorSetLayoutSupport& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["supported"];
[&](){[&](){member.supported=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDescriptorSetLayoutSupport& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetLayoutSupport& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderDrawParametersFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderDrawParameters"];
[&](){[&](){json_value=member.shaderDrawParameters;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderDrawParametersFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderDrawParameters"];
[&](){[&](){member.shaderDrawParameters=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderDrawParametersFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderDrawParametersFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderFloat16Int8Features& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderFloat16"];
[&](){[&](){json_value=member.shaderFloat16;}();}();
auto& json_value=json["shaderInt8"];
[&](){[&](){json_value=member.shaderInt8;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderFloat16Int8Features& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderFloat16"];
[&](){[&](){member.shaderFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInt8"];
[&](){[&](){member.shaderInt8=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderFloat16Int8Features& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderFloat16Int8Features& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFloatControlsProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["denormBehaviorIndependence"];
[&](){[&](){[&](){json_value=member.denormBehaviorIndependence;}();}();}();
auto& json_value=json["roundingModeIndependence"];
[&](){[&](){[&](){json_value=member.roundingModeIndependence;}();}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat16"];
[&](){[&](){json_value=member.shaderSignedZeroInfNanPreserveFloat16;}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat32"];
[&](){[&](){json_value=member.shaderSignedZeroInfNanPreserveFloat32;}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat64"];
[&](){[&](){json_value=member.shaderSignedZeroInfNanPreserveFloat64;}();}();
auto& json_value=json["shaderDenormPreserveFloat16"];
[&](){[&](){json_value=member.shaderDenormPreserveFloat16;}();}();
auto& json_value=json["shaderDenormPreserveFloat32"];
[&](){[&](){json_value=member.shaderDenormPreserveFloat32;}();}();
auto& json_value=json["shaderDenormPreserveFloat64"];
[&](){[&](){json_value=member.shaderDenormPreserveFloat64;}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat16"];
[&](){[&](){json_value=member.shaderDenormFlushToZeroFloat16;}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat32"];
[&](){[&](){json_value=member.shaderDenormFlushToZeroFloat32;}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat64"];
[&](){[&](){json_value=member.shaderDenormFlushToZeroFloat64;}();}();
auto& json_value=json["shaderRoundingModeRTEFloat16"];
[&](){[&](){json_value=member.shaderRoundingModeRTEFloat16;}();}();
auto& json_value=json["shaderRoundingModeRTEFloat32"];
[&](){[&](){json_value=member.shaderRoundingModeRTEFloat32;}();}();
auto& json_value=json["shaderRoundingModeRTEFloat64"];
[&](){[&](){json_value=member.shaderRoundingModeRTEFloat64;}();}();
auto& json_value=json["shaderRoundingModeRTZFloat16"];
[&](){[&](){json_value=member.shaderRoundingModeRTZFloat16;}();}();
auto& json_value=json["shaderRoundingModeRTZFloat32"];
[&](){[&](){json_value=member.shaderRoundingModeRTZFloat32;}();}();
auto& json_value=json["shaderRoundingModeRTZFloat64"];
[&](){[&](){json_value=member.shaderRoundingModeRTZFloat64;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFloatControlsProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["denormBehaviorIndependence"];
[&](){[&](){VkShaderFloatControlsIndependence temp_MFkuOJI[&](){temp_MFkuOJI=static_cast<int>(value_to<int>(json_value));}();member.denormBehaviorIndependence=(VkShaderFloatControlsIndependence)temp_MFkuOJI;}();}();
auto& json_value=json["roundingModeIndependence"];
[&](){[&](){VkShaderFloatControlsIndependence temp_QhEkDlD[&](){temp_QhEkDlD=static_cast<int>(value_to<int>(json_value));}();member.roundingModeIndependence=(VkShaderFloatControlsIndependence)temp_QhEkDlD;}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat16"];
[&](){[&](){member.shaderSignedZeroInfNanPreserveFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat32"];
[&](){[&](){member.shaderSignedZeroInfNanPreserveFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat64"];
[&](){[&](){member.shaderSignedZeroInfNanPreserveFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormPreserveFloat16"];
[&](){[&](){member.shaderDenormPreserveFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormPreserveFloat32"];
[&](){[&](){member.shaderDenormPreserveFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormPreserveFloat64"];
[&](){[&](){member.shaderDenormPreserveFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat16"];
[&](){[&](){member.shaderDenormFlushToZeroFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat32"];
[&](){[&](){member.shaderDenormFlushToZeroFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat64"];
[&](){[&](){member.shaderDenormFlushToZeroFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTEFloat16"];
[&](){[&](){member.shaderRoundingModeRTEFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTEFloat32"];
[&](){[&](){member.shaderRoundingModeRTEFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTEFloat64"];
[&](){[&](){member.shaderRoundingModeRTEFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTZFloat16"];
[&](){[&](){member.shaderRoundingModeRTZFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTZFloat32"];
[&](){[&](){member.shaderRoundingModeRTZFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTZFloat64"];
[&](){[&](){member.shaderRoundingModeRTZFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFloatControlsProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFloatControlsProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceHostQueryResetFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["hostQueryReset"];
[&](){[&](){json_value=member.hostQueryReset;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceHostQueryResetFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["hostQueryReset"];
[&](){[&](){member.hostQueryReset=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceHostQueryResetFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceHostQueryResetFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkShaderResourceUsageAMD& member){
        
    
auto& json_value=json["numUsedVgprs"];
[&](){json_value=member.numUsedVgprs;}();
auto& json_value=json["numUsedSgprs"];
[&](){json_value=member.numUsedSgprs;}();
auto& json_value=json["ldsSizePerLocalWorkGroup"];
[&](){json_value=member.ldsSizePerLocalWorkGroup;}();
auto& json_value=json["ldsUsageSizeInBytes"];
[&](){json_value=member.ldsUsageSizeInBytes;}();
auto& json_value=json["scratchMemUsageInBytes"];
[&](){json_value=member.scratchMemUsageInBytes;}();
}
void deserialize_struct(object& json, VkShaderResourceUsageAMD& member){
auto& json_value=json["numUsedVgprs"];
[&](){member.numUsedVgprs=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["numUsedSgprs"];
[&](){member.numUsedSgprs=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["ldsSizePerLocalWorkGroup"];
[&](){member.ldsSizePerLocalWorkGroup=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["ldsUsageSizeInBytes"];
[&](){member.ldsUsageSizeInBytes=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["scratchMemUsageInBytes"];
[&](){member.scratchMemUsageInBytes=static_cast<size_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkShaderResourceUsageAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkShaderResourceUsageAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkShaderStatisticsInfoAMD& member){
        
    
auto& json_value=json["shaderStageMask"];
[&](){[&](){[&](){json_value=member.shaderStageMask;}();}();}();
auto& json_value=json["resourceUsage"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.resourceUsage);
            }();
auto& json_value=json["numPhysicalVgprs"];
[&](){json_value=member.numPhysicalVgprs;}();
auto& json_value=json["numPhysicalSgprs"];
[&](){json_value=member.numPhysicalSgprs;}();
auto& json_value=json["numAvailableVgprs"];
[&](){json_value=member.numAvailableVgprs;}();
auto& json_value=json["numAvailableSgprs"];
[&](){json_value=member.numAvailableSgprs;}();
auto& json_value=json["computeWorkGroupSize"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int gYtCXER=0; gYtCXER < 3; gYtCXER++){
            [&](){json_value[gYtCXER]=member.computeWorkGroupSize[gYtCXER];}();
        }
        }();
}
void deserialize_struct(object& json, VkShaderStatisticsInfoAMD& member){
auto& json_value=json["shaderStageMask"];
[&](){[&](){VkShaderStageFlags temp_suFMGUC[&](){temp_suFMGUC=static_cast<int>(value_to<int>(json_value));}();member.shaderStageMask=(VkShaderStageFlags)temp_suFMGUC;}();}();
auto& json_value=json["resourceUsage"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.resourceUsage);
            }();
auto& json_value=json["numPhysicalVgprs"];
[&](){member.numPhysicalVgprs=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["numPhysicalSgprs"];
[&](){member.numPhysicalSgprs=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["numAvailableVgprs"];
[&](){member.numAvailableVgprs=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["numAvailableSgprs"];
[&](){member.numAvailableSgprs=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["computeWorkGroupSize"];
[&](){
        auto& arr=json_value.as_array();
        for(int gYtCXER=0; gYtCXER < 3; gYtCXER++){
            [&](){member.computeWorkGroupSize[gYtCXER]=static_cast<uint32_t>(value_to<int>(json_value[gYtCXER]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkShaderStatisticsInfoAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkShaderStatisticsInfoAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceQueueGlobalPriorityCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["globalPriority"];
[&](){[&](){[&](){json_value=member.globalPriority;}();}();}();
}
void deserialize_struct(object& json, VkDeviceQueueGlobalPriorityCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["globalPriority"];
[&](){[&](){VkQueueGlobalPriorityKHR temp_QuysYjo[&](){temp_QuysYjo=static_cast<int>(value_to<int>(json_value));}();member.globalPriority=(VkQueueGlobalPriorityKHR)temp_QuysYjo;}();}();
}

    void serialize_pUserData(object& json, VkDeviceQueueGlobalPriorityCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceQueueGlobalPriorityCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["globalPriorityQuery"];
[&](){[&](){json_value=member.globalPriorityQuery;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["globalPriorityQuery"];
[&](){[&](){member.globalPriorityQuery=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueueFamilyGlobalPriorityPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["priorityCount"];
[&](){json_value=member.priorityCount;}();
auto& json_value=json["priorities"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int fMHmDjA=0; fMHmDjA < VK_MAX_GLOBAL_PRIORITY_SIZE_KHR; fMHmDjA++){
            [&](){[&](){[&](){json_value[fMHmDjA]=member.priorities[fMHmDjA];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkQueueFamilyGlobalPriorityPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["priorityCount"];
[&](){member.priorityCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["priorities"];
[&](){
        auto& arr=json_value.as_array();
        for(int fMHmDjA=0; fMHmDjA < VK_MAX_GLOBAL_PRIORITY_SIZE_KHR; fMHmDjA++){
            [&](){[&](){VkQueueGlobalPriorityKHR temp_QiWRNMq[VK_MAX_GLOBAL_PRIORITY_SIZE_KHR][&](){temp_QiWRNMq=static_cast<int>(value_to<int>(json_value[fMHmDjA]));}();member.priorities[fMHmDjA]=(VkQueueGlobalPriorityKHR)temp_QiWRNMq;}();}();
        }
        }();
}

    void serialize_pUserData(object& json, VkQueueFamilyGlobalPriorityPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueueFamilyGlobalPriorityPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugUtilsObjectNameInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["objectType"];
[&](){[&](){[&](){json_value=member.objectType;}();}();}();
auto& json_value=json["objectHandle"];
[&](){json_value=member.objectHandle;}();
auto& json_value=json["pObjectName"];
[&](){
            if (member.pObjectName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int IrvYMgK=0; IrvYMgK < strlen(member.pObjectName)+1; IrvYMgK++){
            [&](){json_value[IrvYMgK]=member.pObjectName[IrvYMgK];}();
        }
        }();
}
void deserialize_struct(object& json, VkDebugUtilsObjectNameInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["objectType"];
[&](){[&](){VkObjectType temp_AYuLSBj[&](){temp_AYuLSBj=static_cast<int>(value_to<int>(json_value));}();member.objectType=(VkObjectType)temp_AYuLSBj;}();}();
auto& json_value=json["objectHandle"];
[&](){member.objectHandle=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["pObjectName"];
[&](){ char* temp_AUIQNis[&](){
            if (!json_value.as_array().size()==0){
                temp_AUIQNis=NULL;
            return; }temp_AUIQNis=(char*)malloc(temp_AUIQNis.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int vNFhQsi=0; vNFhQsi < temp_AUIQNis.as_array().size();; vNFhQsi++){
            [&](){temp_AUIQNis[vNFhQsi]=static_cast<char>(value_to<int>(json_value[vNFhQsi]));}();
        }
        }();member.pObjectName=temp_AUIQNis;}();
}

    void serialize_pUserData(object& json, VkDebugUtilsObjectNameInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDebugUtilsObjectNameInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugUtilsObjectTagInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["objectType"];
[&](){[&](){[&](){json_value=member.objectType;}();}();}();
auto& json_value=json["objectHandle"];
[&](){json_value=member.objectHandle;}();
auto& json_value=json["tagName"];
[&](){json_value=member.tagName;}();
auto& json_value=json["tagSize"];
[&](){json_value=member.tagSize;}();
auto& json_value=json["pTag"];
[&](){
            if (member.pTag==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pTag)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RyqFIjd=0; RyqFIjd < member.tagSize; RyqFIjd++){
            [&](){json_value[RyqFIjd]=(char*)(member.pTag)[RyqFIjd];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkDebugUtilsObjectTagInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["objectType"];
[&](){[&](){VkObjectType temp_AYuLSBj[&](){temp_AYuLSBj=static_cast<int>(value_to<int>(json_value));}();member.objectType=(VkObjectType)temp_AYuLSBj;}();}();
auto& json_value=json["objectHandle"];
[&](){member.objectHandle=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["tagName"];
[&](){member.tagName=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["tagSize"];
[&](){member.tagSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pTag"];
[&](){ void* temp_KACbkFs[&](){
            if (!json_value.as_array().size()==0){
                temp_KACbkFs=NULL;
            return; }char* temp_shTPeFP;[&](){
            if (!json_value.as_array().size()==0){
                temp_KACbkFs=NULL;
            return; }temp_KACbkFs=(char*)malloc(member.tagSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int lxDYfsn=0; lxDYfsn < member.tagSize; lxDYfsn++){
            [&](){temp_KACbkFs[lxDYfsn]=static_cast<char>(value_to<int>(json_value[lxDYfsn]));}();
        }
        }();temp_KACbkFs=temp_shTPeFP;}();member.pTag=temp_KACbkFs;}();
}

    void serialize_pUserData(object& json, VkDebugUtilsObjectTagInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDebugUtilsObjectTagInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugUtilsLabelEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pLabelName"];
[&](){
            if (member.pLabelName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int MIohVNO=0; MIohVNO < strlen(member.pLabelName)+1; MIohVNO++){
            [&](){json_value[MIohVNO]=member.pLabelName[MIohVNO];}();
        }
        }();
auto& json_value=json["color"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){json_value[oKnkjtQ]=member.color[oKnkjtQ];}();
        }
        }();
}
void deserialize_struct(object& json, VkDebugUtilsLabelEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pLabelName"];
[&](){ char* temp_rAzUFXL[&](){
            if (!json_value.as_array().size()==0){
                temp_rAzUFXL=NULL;
            return; }temp_rAzUFXL=(char*)malloc(temp_rAzUFXL.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int HnGeXhl=0; HnGeXhl < temp_rAzUFXL.as_array().size();; HnGeXhl++){
            [&](){temp_rAzUFXL[HnGeXhl]=static_cast<char>(value_to<int>(json_value[HnGeXhl]));}();
        }
        }();member.pLabelName=temp_rAzUFXL;}();
auto& json_value=json["color"];
[&](){
        auto& arr=json_value.as_array();
        for(int oKnkjtQ=0; oKnkjtQ < 4; oKnkjtQ++){
            [&](){member.color[oKnkjtQ]=static_cast<float>(value_to<int>(json_value[oKnkjtQ]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkDebugUtilsLabelEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDebugUtilsLabelEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugUtilsMessengerCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["messageSeverity"];
[&](){[&](){[&](){json_value=member.messageSeverity;}();}();}();
auto& json_value=json["messageType"];
[&](){[&](){[&](){json_value=member.messageType;}();}();}();
auto& json_value=json["pfnUserCallback"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnUserCallback);
            }();
auto& json_value=json["pUserData"];
serialize_pUserData(json_value, member);
}
void deserialize_struct(object& json, VkDebugUtilsMessengerCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDebugUtilsMessengerCreateFlagsEXT temp_xAZwePj[&](){temp_xAZwePj=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDebugUtilsMessengerCreateFlagsEXT)temp_xAZwePj;}();}();
auto& json_value=json["messageSeverity"];
[&](){[&](){VkDebugUtilsMessageSeverityFlagsEXT temp_SrqyhNJ[&](){temp_SrqyhNJ=static_cast<int>(value_to<int>(json_value));}();member.messageSeverity=(VkDebugUtilsMessageSeverityFlagsEXT)temp_SrqyhNJ;}();}();
auto& json_value=json["messageType"];
[&](){[&](){VkDebugUtilsMessageTypeFlagsEXT temp_cGwpAbv[&](){temp_cGwpAbv=static_cast<int>(value_to<int>(json_value));}();member.messageType=(VkDebugUtilsMessageTypeFlagsEXT)temp_cGwpAbv;}();}();
auto& json_value=json["pfnUserCallback"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnUserCallback);
            #endif
}();
auto& json_value=json["pUserData"];
deserialize_pUserData(json_value, member);
}

    void serialize_pUserData(object& json, VkDebugUtilsMessengerCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
json["PFN_vkDebugUtilsMessengerCallbackEXT"]=(uintptr_t)(member.pfnUserCallback);
}

    void deserialize_pUserData(object& json, VkDebugUtilsMessengerCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();
pUserData.pfnUserCallback=(PFN_vkDebugUtilsMessengerCallbackEXT)(value_to<uintptr_t>(json["PFN_vkDebugUtilsMessengerCallbackEXT"]));

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDebugUtilsMessengerCallbackDataEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pMessageIdName"];
[&](){
            if (member.pMessageIdName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int BmwQwRz=0; BmwQwRz < strlen(member.pMessageIdName)+1; BmwQwRz++){
            [&](){json_value[BmwQwRz]=member.pMessageIdName[BmwQwRz];}();
        }
        }();
auto& json_value=json["messageIdNumber"];
[&](){json_value=member.messageIdNumber;}();
auto& json_value=json["pMessage"];
[&](){
            if (member.pMessage==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int SjkcUWO=0; SjkcUWO < strlen(member.pMessage)+1; SjkcUWO++){
            [&](){json_value[SjkcUWO]=member.pMessage[SjkcUWO];}();
        }
        }();
auto& json_value=json["queueLabelCount"];
[&](){json_value=member.queueLabelCount;}();
auto& json_value=json["pQueueLabels"];
[&](){
            if (member.pQueueLabels==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int Cickicm=0; Cickicm < member.queueLabelCount; Cickicm++){
            [&](){
            auto& temp=json_value[Cickicm].emplace_object();
            return serialize_struct(temp, member.pQueueLabels[Cickicm]);
            }();
        }
        }();
auto& json_value=json["cmdBufLabelCount"];
[&](){json_value=member.cmdBufLabelCount;}();
auto& json_value=json["pCmdBufLabels"];
[&](){
            if (member.pCmdBufLabels==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int oRsJZdR=0; oRsJZdR < member.cmdBufLabelCount; oRsJZdR++){
            [&](){
            auto& temp=json_value[oRsJZdR].emplace_object();
            return serialize_struct(temp, member.pCmdBufLabels[oRsJZdR]);
            }();
        }
        }();
auto& json_value=json["objectCount"];
[&](){json_value=member.objectCount;}();
auto& json_value=json["pObjects"];
[&](){
            if (member.pObjects==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uqPjyhr=0; uqPjyhr < member.objectCount; uqPjyhr++){
            [&](){
            auto& temp=json_value[uqPjyhr].emplace_object();
            return serialize_struct(temp, member.pObjects[uqPjyhr]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDebugUtilsMessengerCallbackDataEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDebugUtilsMessengerCallbackDataFlagsEXT temp_SqLBLPH[&](){temp_SqLBLPH=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDebugUtilsMessengerCallbackDataFlagsEXT)temp_SqLBLPH;}();}();
auto& json_value=json["pMessageIdName"];
[&](){ char* temp_kwCXxpj[&](){
            if (!json_value.as_array().size()==0){
                temp_kwCXxpj=NULL;
            return; }temp_kwCXxpj=(char*)malloc(temp_kwCXxpj.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int ModiWWF=0; ModiWWF < temp_kwCXxpj.as_array().size();; ModiWWF++){
            [&](){temp_kwCXxpj[ModiWWF]=static_cast<char>(value_to<int>(json_value[ModiWWF]));}();
        }
        }();member.pMessageIdName=temp_kwCXxpj;}();
auto& json_value=json["messageIdNumber"];
[&](){member.messageIdNumber=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["pMessage"];
[&](){ char* temp_vAWXWir[&](){
            if (!json_value.as_array().size()==0){
                temp_vAWXWir=NULL;
            return; }temp_vAWXWir=(char*)malloc(temp_vAWXWir.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int GRiWTDL=0; GRiWTDL < temp_vAWXWir.as_array().size();; GRiWTDL++){
            [&](){temp_vAWXWir[GRiWTDL]=static_cast<char>(value_to<int>(json_value[GRiWTDL]));}();
        }
        }();member.pMessage=temp_vAWXWir;}();
auto& json_value=json["queueLabelCount"];
[&](){member.queueLabelCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pQueueLabels"];
[&](){ VkDebugUtilsLabelEXT* temp_oxRqRCw[&](){
            if (!json_value.as_array().size()==0){
                temp_oxRqRCw=NULL;
            return; }temp_oxRqRCw=(VkDebugUtilsLabelEXT*)malloc(member.queueLabelCount*sizeof(VkDebugUtilsLabelEXT));
        auto& arr=json_value.as_array();
        for(int LkHCjKg=0; LkHCjKg < member.queueLabelCount; LkHCjKg++){
            [&](){
            auto& temp=json_value[LkHCjKg].as_object();
            deserialize_struct(temp,temp_oxRqRCw[LkHCjKg]);
            }();
        }
        }();member.pQueueLabels=temp_oxRqRCw;}();
auto& json_value=json["cmdBufLabelCount"];
[&](){member.cmdBufLabelCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCmdBufLabels"];
[&](){ VkDebugUtilsLabelEXT* temp_voaCWEz[&](){
            if (!json_value.as_array().size()==0){
                temp_voaCWEz=NULL;
            return; }temp_voaCWEz=(VkDebugUtilsLabelEXT*)malloc(member.cmdBufLabelCount*sizeof(VkDebugUtilsLabelEXT));
        auto& arr=json_value.as_array();
        for(int aRHhrDc=0; aRHhrDc < member.cmdBufLabelCount; aRHhrDc++){
            [&](){
            auto& temp=json_value[aRHhrDc].as_object();
            deserialize_struct(temp,temp_voaCWEz[aRHhrDc]);
            }();
        }
        }();member.pCmdBufLabels=temp_voaCWEz;}();
auto& json_value=json["objectCount"];
[&](){member.objectCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pObjects"];
[&](){ VkDebugUtilsObjectNameInfoEXT* temp_ocKVnrZ[&](){
            if (!json_value.as_array().size()==0){
                temp_ocKVnrZ=NULL;
            return; }temp_ocKVnrZ=(VkDebugUtilsObjectNameInfoEXT*)malloc(member.objectCount*sizeof(VkDebugUtilsObjectNameInfoEXT));
        auto& arr=json_value.as_array();
        for(int SOnpTum=0; SOnpTum < member.objectCount; SOnpTum++){
            [&](){
            auto& temp=json_value[SOnpTum].as_object();
            deserialize_struct(temp,temp_ocKVnrZ[SOnpTum]);
            }();
        }
        }();member.pObjects=temp_ocKVnrZ;}();
}

    void serialize_pUserData(object& json, VkDebugUtilsMessengerCallbackDataEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDebugUtilsMessengerCallbackDataEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceMemoryReport"];
[&](){[&](){json_value=member.deviceMemoryReport;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceMemoryReport"];
[&](){[&](){member.deviceMemoryReport=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceDeviceMemoryReportCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pfnUserCallback"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnUserCallback);
            }();
auto& json_value=json["pUserData"];
serialize_pUserData(json_value, member);
}
void deserialize_struct(object& json, VkDeviceDeviceMemoryReportCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDeviceMemoryReportFlagsEXT temp_SkkZSzk[&](){temp_SkkZSzk=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDeviceMemoryReportFlagsEXT)temp_SkkZSzk;}();}();
auto& json_value=json["pfnUserCallback"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnUserCallback);
            #endif
}();
auto& json_value=json["pUserData"];
deserialize_pUserData(json_value, member);
}

    void serialize_pUserData(object& json, VkDeviceDeviceMemoryReportCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
json["PFN_vkDeviceMemoryReportCallbackEXT"]=(uintptr_t)(member.pfnUserCallback);
}

    void deserialize_pUserData(object& json, VkDeviceDeviceMemoryReportCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();
pUserData.pfnUserCallback=(PFN_vkDeviceMemoryReportCallbackEXT)(value_to<uintptr_t>(json["PFN_vkDeviceMemoryReportCallbackEXT"]));

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceMemoryReportCallbackDataEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["memoryObjectId"];
[&](){json_value=member.memoryObjectId;}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["objectType"];
[&](){[&](){[&](){json_value=member.objectType;}();}();}();
auto& json_value=json["objectHandle"];
[&](){json_value=member.objectHandle;}();
auto& json_value=json["heapIndex"];
[&](){json_value=member.heapIndex;}();
}
void deserialize_struct(object& json, VkDeviceMemoryReportCallbackDataEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkDeviceMemoryReportFlagsEXT temp_SkkZSzk[&](){temp_SkkZSzk=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDeviceMemoryReportFlagsEXT)temp_SkkZSzk;}();}();
auto& json_value=json["type"];
[&](){[&](){VkDeviceMemoryReportEventTypeEXT temp_DoRkPxl[&](){temp_DoRkPxl=static_cast<int>(value_to<int>(json_value));}();member.type=(VkDeviceMemoryReportEventTypeEXT)temp_DoRkPxl;}();}();
auto& json_value=json["memoryObjectId"];
[&](){member.memoryObjectId=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["objectType"];
[&](){[&](){VkObjectType temp_AYuLSBj[&](){temp_AYuLSBj=static_cast<int>(value_to<int>(json_value));}();member.objectType=(VkObjectType)temp_AYuLSBj;}();}();
auto& json_value=json["objectHandle"];
[&](){member.objectHandle=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["heapIndex"];
[&](){member.heapIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDeviceMemoryReportCallbackDataEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceMemoryReportCallbackDataEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImportMemoryHostPointerInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
auto& json_value=json["pHostPointer"];
[&](){
            if (member.pHostPointer==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pHostPointer)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int XfuwLTM=0; XfuwLTM < strlen((char*)(member.pHostPointer))+1; XfuwLTM++){
            [&](){json_value[XfuwLTM]=(char*)(member.pHostPointer)[XfuwLTM];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkImportMemoryHostPointerInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalMemoryHandleTypeFlagBits temp_lYNzwhd[&](){temp_lYNzwhd=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalMemoryHandleTypeFlagBits)temp_lYNzwhd;}();}();
auto& json_value=json["pHostPointer"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pHostPointer=NULL;
            return; }char* temp_qNVTKQy;[&](){
            if (!json_value.as_array().size()==0){
                member.pHostPointer=NULL;
            return; }member.pHostPointer=(char*)malloc(member.pHostPointer.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int XfuwLTM=0; XfuwLTM < member.pHostPointer.as_array().size();; XfuwLTM++){
            [&](){member.pHostPointer[XfuwLTM]=static_cast<char>(value_to<int>(json_value[XfuwLTM]));}();
        }
        }();member.pHostPointer=temp_qNVTKQy;}();
}

    void serialize_pUserData(object& json, VkImportMemoryHostPointerInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImportMemoryHostPointerInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryHostPointerPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryTypeBits"];
[&](){json_value=member.memoryTypeBits;}();
}
void deserialize_struct(object& json, VkMemoryHostPointerPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryTypeBits"];
[&](){member.memoryTypeBits=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryHostPointerPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryHostPointerPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExternalMemoryHostPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minImportedHostPointerAlignment"];
[&](){[&](){json_value=member.minImportedHostPointerAlignment;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExternalMemoryHostPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["minImportedHostPointerAlignment"];
[&](){[&](){member.minImportedHostPointerAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExternalMemoryHostPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExternalMemoryHostPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceConservativeRasterizationPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["primitiveOverestimationSize"];
[&](){json_value=member.primitiveOverestimationSize;}();
auto& json_value=json["maxExtraPrimitiveOverestimationSize"];
[&](){json_value=member.maxExtraPrimitiveOverestimationSize;}();
auto& json_value=json["extraPrimitiveOverestimationSizeGranularity"];
[&](){json_value=member.extraPrimitiveOverestimationSizeGranularity;}();
auto& json_value=json["primitiveUnderestimation"];
[&](){[&](){json_value=member.primitiveUnderestimation;}();}();
auto& json_value=json["conservativePointAndLineRasterization"];
[&](){[&](){json_value=member.conservativePointAndLineRasterization;}();}();
auto& json_value=json["degenerateTrianglesRasterized"];
[&](){[&](){json_value=member.degenerateTrianglesRasterized;}();}();
auto& json_value=json["degenerateLinesRasterized"];
[&](){[&](){json_value=member.degenerateLinesRasterized;}();}();
auto& json_value=json["fullyCoveredFragmentShaderInputVariable"];
[&](){[&](){json_value=member.fullyCoveredFragmentShaderInputVariable;}();}();
auto& json_value=json["conservativeRasterizationPostDepthCoverage"];
[&](){[&](){json_value=member.conservativeRasterizationPostDepthCoverage;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceConservativeRasterizationPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["primitiveOverestimationSize"];
[&](){member.primitiveOverestimationSize=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxExtraPrimitiveOverestimationSize"];
[&](){member.maxExtraPrimitiveOverestimationSize=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["extraPrimitiveOverestimationSizeGranularity"];
[&](){member.extraPrimitiveOverestimationSizeGranularity=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["primitiveUnderestimation"];
[&](){[&](){member.primitiveUnderestimation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["conservativePointAndLineRasterization"];
[&](){[&](){member.conservativePointAndLineRasterization=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["degenerateTrianglesRasterized"];
[&](){[&](){member.degenerateTrianglesRasterized=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["degenerateLinesRasterized"];
[&](){[&](){member.degenerateLinesRasterized=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fullyCoveredFragmentShaderInputVariable"];
[&](){[&](){member.fullyCoveredFragmentShaderInputVariable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["conservativeRasterizationPostDepthCoverage"];
[&](){[&](){member.conservativeRasterizationPostDepthCoverage=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceConservativeRasterizationPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceConservativeRasterizationPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCalibratedTimestampInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["timeDomain"];
[&](){[&](){[&](){json_value=member.timeDomain;}();}();}();
}
void deserialize_struct(object& json, VkCalibratedTimestampInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["timeDomain"];
[&](){[&](){VkTimeDomainEXT temp_PXXYaAU[&](){temp_PXXYaAU=static_cast<int>(value_to<int>(json_value));}();member.timeDomain=(VkTimeDomainEXT)temp_PXXYaAU;}();}();
}

    void serialize_pUserData(object& json, VkCalibratedTimestampInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCalibratedTimestampInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderCorePropertiesAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderEngineCount"];
[&](){json_value=member.shaderEngineCount;}();
auto& json_value=json["shaderArraysPerEngineCount"];
[&](){json_value=member.shaderArraysPerEngineCount;}();
auto& json_value=json["computeUnitsPerShaderArray"];
[&](){json_value=member.computeUnitsPerShaderArray;}();
auto& json_value=json["simdPerComputeUnit"];
[&](){json_value=member.simdPerComputeUnit;}();
auto& json_value=json["wavefrontsPerSimd"];
[&](){json_value=member.wavefrontsPerSimd;}();
auto& json_value=json["wavefrontSize"];
[&](){json_value=member.wavefrontSize;}();
auto& json_value=json["sgprsPerSimd"];
[&](){json_value=member.sgprsPerSimd;}();
auto& json_value=json["minSgprAllocation"];
[&](){json_value=member.minSgprAllocation;}();
auto& json_value=json["maxSgprAllocation"];
[&](){json_value=member.maxSgprAllocation;}();
auto& json_value=json["sgprAllocationGranularity"];
[&](){json_value=member.sgprAllocationGranularity;}();
auto& json_value=json["vgprsPerSimd"];
[&](){json_value=member.vgprsPerSimd;}();
auto& json_value=json["minVgprAllocation"];
[&](){json_value=member.minVgprAllocation;}();
auto& json_value=json["maxVgprAllocation"];
[&](){json_value=member.maxVgprAllocation;}();
auto& json_value=json["vgprAllocationGranularity"];
[&](){json_value=member.vgprAllocationGranularity;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderCorePropertiesAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderEngineCount"];
[&](){member.shaderEngineCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderArraysPerEngineCount"];
[&](){member.shaderArraysPerEngineCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["computeUnitsPerShaderArray"];
[&](){member.computeUnitsPerShaderArray=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["simdPerComputeUnit"];
[&](){member.simdPerComputeUnit=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["wavefrontsPerSimd"];
[&](){member.wavefrontsPerSimd=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["wavefrontSize"];
[&](){member.wavefrontSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sgprsPerSimd"];
[&](){member.sgprsPerSimd=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minSgprAllocation"];
[&](){member.minSgprAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxSgprAllocation"];
[&](){member.maxSgprAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sgprAllocationGranularity"];
[&](){member.sgprAllocationGranularity=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vgprsPerSimd"];
[&](){member.vgprsPerSimd=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minVgprAllocation"];
[&](){member.minVgprAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxVgprAllocation"];
[&](){member.maxVgprAllocation=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vgprAllocationGranularity"];
[&](){member.vgprAllocationGranularity=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderCorePropertiesAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderCorePropertiesAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderCoreProperties2AMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderCoreFeatures"];
[&](){[&](){[&](){json_value=member.shaderCoreFeatures;}();}();}();
auto& json_value=json["activeComputeUnitCount"];
[&](){json_value=member.activeComputeUnitCount;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderCoreProperties2AMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderCoreFeatures"];
[&](){[&](){VkShaderCorePropertiesFlagsAMD temp_ShYCgvk[&](){temp_ShYCgvk=static_cast<int>(value_to<int>(json_value));}();member.shaderCoreFeatures=(VkShaderCorePropertiesFlagsAMD)temp_ShYCgvk;}();}();
auto& json_value=json["activeComputeUnitCount"];
[&](){member.activeComputeUnitCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderCoreProperties2AMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderCoreProperties2AMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRasterizationConservativeStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["conservativeRasterizationMode"];
[&](){[&](){[&](){json_value=member.conservativeRasterizationMode;}();}();}();
auto& json_value=json["extraPrimitiveOverestimationSize"];
[&](){json_value=member.extraPrimitiveOverestimationSize;}();
}
void deserialize_struct(object& json, VkPipelineRasterizationConservativeStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineRasterizationConservativeStateCreateFlagsEXT temp_wlNfBwz[&](){temp_wlNfBwz=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineRasterizationConservativeStateCreateFlagsEXT)temp_wlNfBwz;}();}();
auto& json_value=json["conservativeRasterizationMode"];
[&](){[&](){VkConservativeRasterizationModeEXT temp_eDOtrNM[&](){temp_eDOtrNM=static_cast<int>(value_to<int>(json_value));}();member.conservativeRasterizationMode=(VkConservativeRasterizationModeEXT)temp_eDOtrNM;}();}();
auto& json_value=json["extraPrimitiveOverestimationSize"];
[&](){member.extraPrimitiveOverestimationSize=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineRasterizationConservativeStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRasterizationConservativeStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDescriptorIndexingFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderInputAttachmentArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderInputAttachmentArrayDynamicIndexing;}();}();
auto& json_value=json["shaderUniformTexelBufferArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderUniformTexelBufferArrayDynamicIndexing;}();}();
auto& json_value=json["shaderStorageTexelBufferArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderStorageTexelBufferArrayDynamicIndexing;}();}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderUniformBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderSampledImageArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderStorageBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderStorageImageArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderInputAttachmentArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderUniformTexelBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderUniformTexelBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderStorageTexelBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderStorageTexelBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["descriptorBindingUniformBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingUniformBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingSampledImageUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingSampledImageUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingStorageImageUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingStorageImageUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingStorageBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingStorageBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingUniformTexelBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingUniformTexelBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingStorageTexelBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingStorageTexelBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingUpdateUnusedWhilePending"];
[&](){[&](){json_value=member.descriptorBindingUpdateUnusedWhilePending;}();}();
auto& json_value=json["descriptorBindingPartiallyBound"];
[&](){[&](){json_value=member.descriptorBindingPartiallyBound;}();}();
auto& json_value=json["descriptorBindingVariableDescriptorCount"];
[&](){[&](){json_value=member.descriptorBindingVariableDescriptorCount;}();}();
auto& json_value=json["runtimeDescriptorArray"];
[&](){[&](){json_value=member.runtimeDescriptorArray;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDescriptorIndexingFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderInputAttachmentArrayDynamicIndexing"];
[&](){[&](){member.shaderInputAttachmentArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderUniformTexelBufferArrayDynamicIndexing"];
[&](){[&](){member.shaderUniformTexelBufferArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageTexelBufferArrayDynamicIndexing"];
[&](){[&](){member.shaderStorageTexelBufferArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderUniformBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexing"];
[&](){[&](){member.shaderSampledImageArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderStorageBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexing"];
[&](){[&](){member.shaderStorageImageArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexing"];
[&](){[&](){member.shaderInputAttachmentArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderUniformTexelBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderUniformTexelBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageTexelBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderStorageTexelBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingUniformBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingUniformBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingSampledImageUpdateAfterBind"];
[&](){[&](){member.descriptorBindingSampledImageUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingStorageImageUpdateAfterBind"];
[&](){[&](){member.descriptorBindingStorageImageUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingStorageBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingStorageBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingUniformTexelBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingUniformTexelBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingStorageTexelBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingStorageTexelBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingUpdateUnusedWhilePending"];
[&](){[&](){member.descriptorBindingUpdateUnusedWhilePending=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingPartiallyBound"];
[&](){[&](){member.descriptorBindingPartiallyBound=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingVariableDescriptorCount"];
[&](){[&](){member.descriptorBindingVariableDescriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["runtimeDescriptorArray"];
[&](){[&](){member.runtimeDescriptorArray=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDescriptorIndexingFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDescriptorIndexingFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDescriptorIndexingProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxUpdateAfterBindDescriptorsInAllPools"];
[&](){json_value=member.maxUpdateAfterBindDescriptorsInAllPools;}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderUniformBufferArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderSampledImageArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderStorageBufferArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderStorageImageArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderInputAttachmentArrayNonUniformIndexingNative;}();}();
auto& json_value=json["robustBufferAccessUpdateAfterBind"];
[&](){[&](){json_value=member.robustBufferAccessUpdateAfterBind;}();}();
auto& json_value=json["quadDivergentImplicitLod"];
[&](){[&](){json_value=member.quadDivergentImplicitLod;}();}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSamplers"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindSamplers;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindUniformBuffers"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindUniformBuffers;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageBuffers"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindStorageBuffers;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSampledImages"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindSampledImages;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageImages"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindStorageImages;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInputAttachments"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindInputAttachments;}();
auto& json_value=json["maxPerStageUpdateAfterBindResources"];
[&](){json_value=member.maxPerStageUpdateAfterBindResources;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSamplers"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindSamplers;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffers"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindUniformBuffers;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffers"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindStorageBuffers;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSampledImages"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindSampledImages;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageImages"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindStorageImages;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInputAttachments"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindInputAttachments;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDescriptorIndexingProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxUpdateAfterBindDescriptorsInAllPools"];
[&](){member.maxUpdateAfterBindDescriptorsInAllPools=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderUniformBufferArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderSampledImageArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderStorageBufferArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderStorageImageArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderInputAttachmentArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["robustBufferAccessUpdateAfterBind"];
[&](){[&](){member.robustBufferAccessUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["quadDivergentImplicitLod"];
[&](){[&](){member.quadDivergentImplicitLod=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSamplers"];
[&](){member.maxPerStageDescriptorUpdateAfterBindSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindUniformBuffers"];
[&](){member.maxPerStageDescriptorUpdateAfterBindUniformBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageBuffers"];
[&](){member.maxPerStageDescriptorUpdateAfterBindStorageBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSampledImages"];
[&](){member.maxPerStageDescriptorUpdateAfterBindSampledImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageImages"];
[&](){member.maxPerStageDescriptorUpdateAfterBindStorageImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInputAttachments"];
[&](){member.maxPerStageDescriptorUpdateAfterBindInputAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageUpdateAfterBindResources"];
[&](){member.maxPerStageUpdateAfterBindResources=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSamplers"];
[&](){member.maxDescriptorSetUpdateAfterBindSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffers"];
[&](){member.maxDescriptorSetUpdateAfterBindUniformBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"];
[&](){member.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffers"];
[&](){member.maxDescriptorSetUpdateAfterBindStorageBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"];
[&](){member.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSampledImages"];
[&](){member.maxDescriptorSetUpdateAfterBindSampledImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageImages"];
[&](){member.maxDescriptorSetUpdateAfterBindStorageImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInputAttachments"];
[&](){member.maxDescriptorSetUpdateAfterBindInputAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDescriptorIndexingProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDescriptorIndexingProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetLayoutBindingFlagsCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["bindingCount"];
[&](){json_value=member.bindingCount;}();
auto& json_value=json["pBindingFlags"];
[&](){
            if (member.pBindingFlags==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int vPSYsQW=0; vPSYsQW < member.bindingCount; vPSYsQW++){
            [&](){[&](){[&](){json_value[vPSYsQW]=member.pBindingFlags[vPSYsQW];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkDescriptorSetLayoutBindingFlagsCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["bindingCount"];
[&](){member.bindingCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBindingFlags"];
[&](){ VkDescriptorBindingFlags* temp_ZGDnSdR[&](){
            if (!json_value.as_array().size()==0){
                temp_ZGDnSdR=NULL;
            return; }temp_ZGDnSdR=(VkDescriptorBindingFlags*)malloc(member.bindingCount*sizeof(VkDescriptorBindingFlags));
        auto& arr=json_value.as_array();
        for(int ROiQLcN=0; ROiQLcN < member.bindingCount; ROiQLcN++){
            [&](){[&](){const VkDescriptorBindingFlags* temp_YFjtcRa[&](){temp_YFjtcRa=static_cast<int>(value_to<int>(json_value[ROiQLcN]));}();temp_ZGDnSdR[ROiQLcN]=(VkDescriptorBindingFlags)temp_YFjtcRa;}();}();
        }
        }();member.pBindingFlags=temp_ZGDnSdR;}();
}

    void serialize_pUserData(object& json, VkDescriptorSetLayoutBindingFlagsCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetLayoutBindingFlagsCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetVariableDescriptorCountAllocateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["descriptorSetCount"];
[&](){json_value=member.descriptorSetCount;}();
auto& json_value=json["pDescriptorCounts"];
[&](){
            if (member.pDescriptorCounts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ryLDzzp=0; ryLDzzp < member.descriptorSetCount; ryLDzzp++){
            [&](){json_value[ryLDzzp]=member.pDescriptorCounts[ryLDzzp];}();
        }
        }();
}
void deserialize_struct(object& json, VkDescriptorSetVariableDescriptorCountAllocateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["descriptorSetCount"];
[&](){member.descriptorSetCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDescriptorCounts"];
[&](){ uint32_t* temp_SuvKoBg[&](){
            if (!json_value.as_array().size()==0){
                temp_SuvKoBg=NULL;
            return; }temp_SuvKoBg=(uint32_t*)malloc(member.descriptorSetCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int VbFXKxf=0; VbFXKxf < member.descriptorSetCount; VbFXKxf++){
            [&](){temp_SuvKoBg[VbFXKxf]=static_cast<uint32_t>(value_to<int>(json_value[VbFXKxf]));}();
        }
        }();member.pDescriptorCounts=temp_SuvKoBg;}();
}

    void serialize_pUserData(object& json, VkDescriptorSetVariableDescriptorCountAllocateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetVariableDescriptorCountAllocateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetVariableDescriptorCountLayoutSupport& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxVariableDescriptorCount"];
[&](){json_value=member.maxVariableDescriptorCount;}();
}
void deserialize_struct(object& json, VkDescriptorSetVariableDescriptorCountLayoutSupport& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxVariableDescriptorCount"];
[&](){member.maxVariableDescriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDescriptorSetVariableDescriptorCountLayoutSupport& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetVariableDescriptorCountLayoutSupport& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentDescription2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["samples"];
[&](){[&](){[&](){json_value=member.samples;}();}();}();
auto& json_value=json["loadOp"];
[&](){[&](){[&](){json_value=member.loadOp;}();}();}();
auto& json_value=json["storeOp"];
[&](){[&](){[&](){json_value=member.storeOp;}();}();}();
auto& json_value=json["stencilLoadOp"];
[&](){[&](){[&](){json_value=member.stencilLoadOp;}();}();}();
auto& json_value=json["stencilStoreOp"];
[&](){[&](){[&](){json_value=member.stencilStoreOp;}();}();}();
auto& json_value=json["initialLayout"];
[&](){[&](){[&](){json_value=member.initialLayout;}();}();}();
auto& json_value=json["finalLayout"];
[&](){[&](){[&](){json_value=member.finalLayout;}();}();}();
}
void deserialize_struct(object& json, VkAttachmentDescription2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkAttachmentDescriptionFlags temp_CYMEsuB[&](){temp_CYMEsuB=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkAttachmentDescriptionFlags)temp_CYMEsuB;}();}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["samples"];
[&](){[&](){VkSampleCountFlagBits temp_sbydRzr[&](){temp_sbydRzr=static_cast<int>(value_to<int>(json_value));}();member.samples=(VkSampleCountFlagBits)temp_sbydRzr;}();}();
auto& json_value=json["loadOp"];
[&](){[&](){VkAttachmentLoadOp temp_TtemVoJ[&](){temp_TtemVoJ=static_cast<int>(value_to<int>(json_value));}();member.loadOp=(VkAttachmentLoadOp)temp_TtemVoJ;}();}();
auto& json_value=json["storeOp"];
[&](){[&](){VkAttachmentStoreOp temp_xPHHoES[&](){temp_xPHHoES=static_cast<int>(value_to<int>(json_value));}();member.storeOp=(VkAttachmentStoreOp)temp_xPHHoES;}();}();
auto& json_value=json["stencilLoadOp"];
[&](){[&](){VkAttachmentLoadOp temp_KsCgdHP[&](){temp_KsCgdHP=static_cast<int>(value_to<int>(json_value));}();member.stencilLoadOp=(VkAttachmentLoadOp)temp_KsCgdHP;}();}();
auto& json_value=json["stencilStoreOp"];
[&](){[&](){VkAttachmentStoreOp temp_xiINqWK[&](){temp_xiINqWK=static_cast<int>(value_to<int>(json_value));}();member.stencilStoreOp=(VkAttachmentStoreOp)temp_xiINqWK;}();}();
auto& json_value=json["initialLayout"];
[&](){[&](){VkImageLayout temp_FbubONM[&](){temp_FbubONM=static_cast<int>(value_to<int>(json_value));}();member.initialLayout=(VkImageLayout)temp_FbubONM;}();}();
auto& json_value=json["finalLayout"];
[&](){[&](){VkImageLayout temp_msqBOhB[&](){temp_msqBOhB=static_cast<int>(value_to<int>(json_value));}();member.finalLayout=(VkImageLayout)temp_msqBOhB;}();}();
}

    void serialize_pUserData(object& json, VkAttachmentDescription2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentDescription2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentReference2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["attachment"];
[&](){json_value=member.attachment;}();
auto& json_value=json["layout"];
[&](){[&](){[&](){json_value=member.layout;}();}();}();
auto& json_value=json["aspectMask"];
[&](){[&](){[&](){json_value=member.aspectMask;}();}();}();
}
void deserialize_struct(object& json, VkAttachmentReference2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["attachment"];
[&](){member.attachment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layout"];
[&](){[&](){VkImageLayout temp_UhZVkLY[&](){temp_UhZVkLY=static_cast<int>(value_to<int>(json_value));}();member.layout=(VkImageLayout)temp_UhZVkLY;}();}();
auto& json_value=json["aspectMask"];
[&](){[&](){VkImageAspectFlags temp_JsnReia[&](){temp_JsnReia=static_cast<int>(value_to<int>(json_value));}();member.aspectMask=(VkImageAspectFlags)temp_JsnReia;}();}();
}

    void serialize_pUserData(object& json, VkAttachmentReference2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentReference2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassDescription2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){[&](){json_value=member.pipelineBindPoint;}();}();}();
auto& json_value=json["viewMask"];
[&](){json_value=member.viewMask;}();
auto& json_value=json["inputAttachmentCount"];
[&](){json_value=member.inputAttachmentCount;}();
auto& json_value=json["pInputAttachments"];
[&](){
            if (member.pInputAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NsTMCqB=0; NsTMCqB < member.inputAttachmentCount; NsTMCqB++){
            [&](){
            auto& temp=json_value[NsTMCqB].emplace_object();
            return serialize_struct(temp, member.pInputAttachments[NsTMCqB]);
            }();
        }
        }();
auto& json_value=json["colorAttachmentCount"];
[&](){json_value=member.colorAttachmentCount;}();
auto& json_value=json["pColorAttachments"];
[&](){
            if (member.pColorAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int nAcellO=0; nAcellO < member.colorAttachmentCount; nAcellO++){
            [&](){
            auto& temp=json_value[nAcellO].emplace_object();
            return serialize_struct(temp, member.pColorAttachments[nAcellO]);
            }();
        }
        }();
auto& json_value=json["pResolveAttachments"];
[&](){
            if (member.pResolveAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int asCGjsj=0; asCGjsj < member.colorAttachmentCount; asCGjsj++){
            [&](){
            auto& temp=json_value[asCGjsj].emplace_object();
            return serialize_struct(temp, member.pResolveAttachments[asCGjsj]);
            }();
        }
        }();
auto& json_value=json["pDepthStencilAttachment"];
[&](){
            if (member.pDepthStencilAttachment==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KprxYqO=0; KprxYqO < 1; KprxYqO++){
            [&](){
            auto& temp=json_value[KprxYqO].emplace_object();
            return serialize_struct(temp, member.pDepthStencilAttachment[KprxYqO]);
            }();
        }
        }();
auto& json_value=json["preserveAttachmentCount"];
[&](){json_value=member.preserveAttachmentCount;}();
auto& json_value=json["pPreserveAttachments"];
[&](){
            if (member.pPreserveAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int OunTLoO=0; OunTLoO < member.preserveAttachmentCount; OunTLoO++){
            [&](){json_value[OunTLoO]=member.pPreserveAttachments[OunTLoO];}();
        }
        }();
}
void deserialize_struct(object& json, VkSubpassDescription2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkSubpassDescriptionFlags temp_dJMRWUT[&](){temp_dJMRWUT=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSubpassDescriptionFlags)temp_dJMRWUT;}();}();
auto& json_value=json["pipelineBindPoint"];
[&](){[&](){VkPipelineBindPoint temp_fyjKPoR[&](){temp_fyjKPoR=static_cast<int>(value_to<int>(json_value));}();member.pipelineBindPoint=(VkPipelineBindPoint)temp_fyjKPoR;}();}();
auto& json_value=json["viewMask"];
[&](){member.viewMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["inputAttachmentCount"];
[&](){member.inputAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pInputAttachments"];
[&](){ VkAttachmentReference2* temp_YLlyOKV[&](){
            if (!json_value.as_array().size()==0){
                temp_YLlyOKV=NULL;
            return; }temp_YLlyOKV=(VkAttachmentReference2*)malloc(member.inputAttachmentCount*sizeof(VkAttachmentReference2));
        auto& arr=json_value.as_array();
        for(int iiiKhHa=0; iiiKhHa < member.inputAttachmentCount; iiiKhHa++){
            [&](){
            auto& temp=json_value[iiiKhHa].as_object();
            deserialize_struct(temp,temp_YLlyOKV[iiiKhHa]);
            }();
        }
        }();member.pInputAttachments=temp_YLlyOKV;}();
auto& json_value=json["colorAttachmentCount"];
[&](){member.colorAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorAttachments"];
[&](){ VkAttachmentReference2* temp_PPEOoxd[&](){
            if (!json_value.as_array().size()==0){
                temp_PPEOoxd=NULL;
            return; }temp_PPEOoxd=(VkAttachmentReference2*)malloc(member.colorAttachmentCount*sizeof(VkAttachmentReference2));
        auto& arr=json_value.as_array();
        for(int loPpvff=0; loPpvff < member.colorAttachmentCount; loPpvff++){
            [&](){
            auto& temp=json_value[loPpvff].as_object();
            deserialize_struct(temp,temp_PPEOoxd[loPpvff]);
            }();
        }
        }();member.pColorAttachments=temp_PPEOoxd;}();
auto& json_value=json["pResolveAttachments"];
[&](){ VkAttachmentReference2* temp_qcsWPed[&](){
            if (!json_value.as_array().size()==0){
                temp_qcsWPed=NULL;
            return; }temp_qcsWPed=(VkAttachmentReference2*)malloc(member.colorAttachmentCount*sizeof(VkAttachmentReference2));
        auto& arr=json_value.as_array();
        for(int Ydlzhcl=0; Ydlzhcl < member.colorAttachmentCount; Ydlzhcl++){
            [&](){
            auto& temp=json_value[Ydlzhcl].as_object();
            deserialize_struct(temp,temp_qcsWPed[Ydlzhcl]);
            }();
        }
        }();member.pResolveAttachments=temp_qcsWPed;}();
auto& json_value=json["pDepthStencilAttachment"];
[&](){ VkAttachmentReference2* temp_NFxxVEH[&](){
            if (!json_value.as_array().size()==0){
                temp_NFxxVEH=NULL;
            return; }temp_NFxxVEH=(VkAttachmentReference2*)malloc(1*sizeof(VkAttachmentReference2));
        auto& arr=json_value.as_array();
        for(int DhYpQMM=0; DhYpQMM < 1; DhYpQMM++){
            [&](){
            auto& temp=json_value[DhYpQMM].as_object();
            deserialize_struct(temp,temp_NFxxVEH[DhYpQMM]);
            }();
        }
        }();member.pDepthStencilAttachment=temp_NFxxVEH;}();
auto& json_value=json["preserveAttachmentCount"];
[&](){member.preserveAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPreserveAttachments"];
[&](){ uint32_t* temp_joOyYDL[&](){
            if (!json_value.as_array().size()==0){
                temp_joOyYDL=NULL;
            return; }temp_joOyYDL=(uint32_t*)malloc(member.preserveAttachmentCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int Ucaahng=0; Ucaahng < member.preserveAttachmentCount; Ucaahng++){
            [&](){temp_joOyYDL[Ucaahng]=static_cast<uint32_t>(value_to<int>(json_value[Ucaahng]));}();
        }
        }();member.pPreserveAttachments=temp_joOyYDL;}();
}

    void serialize_pUserData(object& json, VkSubpassDescription2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassDescription2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassDependency2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcSubpass"];
[&](){json_value=member.srcSubpass;}();
auto& json_value=json["dstSubpass"];
[&](){json_value=member.dstSubpass;}();
auto& json_value=json["srcStageMask"];
[&](){[&](){[&](){json_value=member.srcStageMask;}();}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){[&](){json_value=member.dstStageMask;}();}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
auto& json_value=json["dependencyFlags"];
[&](){[&](){[&](){json_value=member.dependencyFlags;}();}();}();
auto& json_value=json["viewOffset"];
[&](){json_value=member.viewOffset;}();
}
void deserialize_struct(object& json, VkSubpassDependency2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcSubpass"];
[&](){member.srcSubpass=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstSubpass"];
[&](){member.dstSubpass=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["srcStageMask"];
[&](){[&](){VkPipelineStageFlags temp_twQjTZU[&](){temp_twQjTZU=static_cast<int>(value_to<int>(json_value));}();member.srcStageMask=(VkPipelineStageFlags)temp_twQjTZU;}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){VkPipelineStageFlags temp_zApvRtM[&](){temp_zApvRtM=static_cast<int>(value_to<int>(json_value));}();member.dstStageMask=(VkPipelineStageFlags)temp_zApvRtM;}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags temp_iFaYQjj[&](){temp_iFaYQjj=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags)temp_iFaYQjj;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags temp_miAPAJe[&](){temp_miAPAJe=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags)temp_miAPAJe;}();}();
auto& json_value=json["dependencyFlags"];
[&](){[&](){VkDependencyFlags temp_SXdBMBy[&](){temp_SXdBMBy=static_cast<int>(value_to<int>(json_value));}();member.dependencyFlags=(VkDependencyFlags)temp_SXdBMBy;}();}();
auto& json_value=json["viewOffset"];
[&](){member.viewOffset=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSubpassDependency2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassDependency2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassCreateInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["attachmentCount"];
[&](){json_value=member.attachmentCount;}();
auto& json_value=json["pAttachments"];
[&](){
            if (member.pAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ZWLUmNY=0; ZWLUmNY < member.attachmentCount; ZWLUmNY++){
            [&](){
            auto& temp=json_value[ZWLUmNY].emplace_object();
            return serialize_struct(temp, member.pAttachments[ZWLUmNY]);
            }();
        }
        }();
auto& json_value=json["subpassCount"];
[&](){json_value=member.subpassCount;}();
auto& json_value=json["pSubpasses"];
[&](){
            if (member.pSubpasses==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int eUPzEKF=0; eUPzEKF < member.subpassCount; eUPzEKF++){
            [&](){
            auto& temp=json_value[eUPzEKF].emplace_object();
            return serialize_struct(temp, member.pSubpasses[eUPzEKF]);
            }();
        }
        }();
auto& json_value=json["dependencyCount"];
[&](){json_value=member.dependencyCount;}();
auto& json_value=json["pDependencies"];
[&](){
            if (member.pDependencies==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NRheNuA=0; NRheNuA < member.dependencyCount; NRheNuA++){
            [&](){
            auto& temp=json_value[NRheNuA].emplace_object();
            return serialize_struct(temp, member.pDependencies[NRheNuA]);
            }();
        }
        }();
auto& json_value=json["correlatedViewMaskCount"];
[&](){json_value=member.correlatedViewMaskCount;}();
auto& json_value=json["pCorrelatedViewMasks"];
[&](){
            if (member.pCorrelatedViewMasks==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int yFHkrOi=0; yFHkrOi < member.correlatedViewMaskCount; yFHkrOi++){
            [&](){json_value[yFHkrOi]=member.pCorrelatedViewMasks[yFHkrOi];}();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassCreateInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkRenderPassCreateFlags temp_KylrGkp[&](){temp_KylrGkp=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkRenderPassCreateFlags)temp_KylrGkp;}();}();
auto& json_value=json["attachmentCount"];
[&](){member.attachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAttachments"];
[&](){ VkAttachmentDescription2* temp_jjULlGD[&](){
            if (!json_value.as_array().size()==0){
                temp_jjULlGD=NULL;
            return; }temp_jjULlGD=(VkAttachmentDescription2*)malloc(member.attachmentCount*sizeof(VkAttachmentDescription2));
        auto& arr=json_value.as_array();
        for(int aUCdCNG=0; aUCdCNG < member.attachmentCount; aUCdCNG++){
            [&](){
            auto& temp=json_value[aUCdCNG].as_object();
            deserialize_struct(temp,temp_jjULlGD[aUCdCNG]);
            }();
        }
        }();member.pAttachments=temp_jjULlGD;}();
auto& json_value=json["subpassCount"];
[&](){member.subpassCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSubpasses"];
[&](){ VkSubpassDescription2* temp_PeAeupd[&](){
            if (!json_value.as_array().size()==0){
                temp_PeAeupd=NULL;
            return; }temp_PeAeupd=(VkSubpassDescription2*)malloc(member.subpassCount*sizeof(VkSubpassDescription2));
        auto& arr=json_value.as_array();
        for(int MGKKGXF=0; MGKKGXF < member.subpassCount; MGKKGXF++){
            [&](){
            auto& temp=json_value[MGKKGXF].as_object();
            deserialize_struct(temp,temp_PeAeupd[MGKKGXF]);
            }();
        }
        }();member.pSubpasses=temp_PeAeupd;}();
auto& json_value=json["dependencyCount"];
[&](){member.dependencyCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDependencies"];
[&](){ VkSubpassDependency2* temp_WBPLMMj[&](){
            if (!json_value.as_array().size()==0){
                temp_WBPLMMj=NULL;
            return; }temp_WBPLMMj=(VkSubpassDependency2*)malloc(member.dependencyCount*sizeof(VkSubpassDependency2));
        auto& arr=json_value.as_array();
        for(int CPOdCsX=0; CPOdCsX < member.dependencyCount; CPOdCsX++){
            [&](){
            auto& temp=json_value[CPOdCsX].as_object();
            deserialize_struct(temp,temp_WBPLMMj[CPOdCsX]);
            }();
        }
        }();member.pDependencies=temp_WBPLMMj;}();
auto& json_value=json["correlatedViewMaskCount"];
[&](){member.correlatedViewMaskCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCorrelatedViewMasks"];
[&](){ uint32_t* temp_uhtPlnj[&](){
            if (!json_value.as_array().size()==0){
                temp_uhtPlnj=NULL;
            return; }temp_uhtPlnj=(uint32_t*)malloc(member.correlatedViewMaskCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int RuvRSDs=0; RuvRSDs < member.correlatedViewMaskCount; RuvRSDs++){
            [&](){temp_uhtPlnj[RuvRSDs]=static_cast<uint32_t>(value_to<int>(json_value[RuvRSDs]));}();
        }
        }();member.pCorrelatedViewMasks=temp_uhtPlnj;}();
}

    void serialize_pUserData(object& json, VkRenderPassCreateInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassCreateInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassBeginInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["contents"];
[&](){[&](){[&](){json_value=member.contents;}();}();}();
}
void deserialize_struct(object& json, VkSubpassBeginInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["contents"];
[&](){[&](){VkSubpassContents temp_FZBbdAb[&](){temp_FZBbdAb=static_cast<int>(value_to<int>(json_value));}();member.contents=(VkSubpassContents)temp_FZBbdAb;}();}();
}

    void serialize_pUserData(object& json, VkSubpassBeginInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassBeginInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassEndInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
}
void deserialize_struct(object& json, VkSubpassEndInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
}

    void serialize_pUserData(object& json, VkSubpassEndInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassEndInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTimelineSemaphoreFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["timelineSemaphore"];
[&](){[&](){json_value=member.timelineSemaphore;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTimelineSemaphoreFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["timelineSemaphore"];
[&](){[&](){member.timelineSemaphore=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTimelineSemaphoreFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTimelineSemaphoreFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTimelineSemaphoreProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxTimelineSemaphoreValueDifference"];
[&](){json_value=member.maxTimelineSemaphoreValueDifference;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTimelineSemaphoreProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxTimelineSemaphoreValueDifference"];
[&](){member.maxTimelineSemaphoreValueDifference=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTimelineSemaphoreProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTimelineSemaphoreProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSemaphoreTypeCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["semaphoreType"];
[&](){[&](){[&](){json_value=member.semaphoreType;}();}();}();
auto& json_value=json["initialValue"];
[&](){json_value=member.initialValue;}();
}
void deserialize_struct(object& json, VkSemaphoreTypeCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["semaphoreType"];
[&](){[&](){VkSemaphoreType temp_iFuiFYP[&](){temp_iFuiFYP=static_cast<int>(value_to<int>(json_value));}();member.semaphoreType=(VkSemaphoreType)temp_iFuiFYP;}();}();
auto& json_value=json["initialValue"];
[&](){member.initialValue=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSemaphoreTypeCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSemaphoreTypeCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkTimelineSemaphoreSubmitInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["waitSemaphoreValueCount"];
[&](){json_value=member.waitSemaphoreValueCount;}();
auto& json_value=json["pWaitSemaphoreValues"];
[&](){
            if (member.pWaitSemaphoreValues==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int QJriFxq=0; QJriFxq < member.waitSemaphoreValueCount; QJriFxq++){
            [&](){json_value[QJriFxq]=member.pWaitSemaphoreValues[QJriFxq];}();
        }
        }();
auto& json_value=json["signalSemaphoreValueCount"];
[&](){json_value=member.signalSemaphoreValueCount;}();
auto& json_value=json["pSignalSemaphoreValues"];
[&](){
            if (member.pSignalSemaphoreValues==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int Rnxwrqr=0; Rnxwrqr < member.signalSemaphoreValueCount; Rnxwrqr++){
            [&](){json_value[Rnxwrqr]=member.pSignalSemaphoreValues[Rnxwrqr];}();
        }
        }();
}
void deserialize_struct(object& json, VkTimelineSemaphoreSubmitInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["waitSemaphoreValueCount"];
[&](){member.waitSemaphoreValueCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pWaitSemaphoreValues"];
[&](){ uint64_t* temp_nhZtnxN[&](){
            if (!json_value.as_array().size()==0){
                temp_nhZtnxN=NULL;
            return; }temp_nhZtnxN=(uint64_t*)malloc(member.waitSemaphoreValueCount*sizeof(uint64_t));
        auto& arr=json_value.as_array();
        for(int gYZiaOt=0; gYZiaOt < member.waitSemaphoreValueCount; gYZiaOt++){
            [&](){temp_nhZtnxN[gYZiaOt]=static_cast<uint64_t>(value_to<int>(json_value[gYZiaOt]));}();
        }
        }();member.pWaitSemaphoreValues=temp_nhZtnxN;}();
auto& json_value=json["signalSemaphoreValueCount"];
[&](){member.signalSemaphoreValueCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSignalSemaphoreValues"];
[&](){ uint64_t* temp_KMprpKh[&](){
            if (!json_value.as_array().size()==0){
                temp_KMprpKh=NULL;
            return; }temp_KMprpKh=(uint64_t*)malloc(member.signalSemaphoreValueCount*sizeof(uint64_t));
        auto& arr=json_value.as_array();
        for(int JRYJxZh=0; JRYJxZh < member.signalSemaphoreValueCount; JRYJxZh++){
            [&](){temp_KMprpKh[JRYJxZh]=static_cast<uint64_t>(value_to<int>(json_value[JRYJxZh]));}();
        }
        }();member.pSignalSemaphoreValues=temp_KMprpKh;}();
}

    void serialize_pUserData(object& json, VkTimelineSemaphoreSubmitInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkTimelineSemaphoreSubmitInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSemaphoreWaitInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["semaphoreCount"];
[&](){json_value=member.semaphoreCount;}();
auto& json_value=json["pSemaphores"];
[&](){
            if (member.pSemaphores==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ZaebsDj=0; ZaebsDj < member.semaphoreCount; ZaebsDj++){
            [&](){serialize_handle(json_value[ZaebsDj],member.pSemaphores[ZaebsDj]);}();
        }
        }();
auto& json_value=json["pValues"];
[&](){
            if (member.pValues==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ioKhjPI=0; ioKhjPI < member.semaphoreCount; ioKhjPI++){
            [&](){json_value[ioKhjPI]=member.pValues[ioKhjPI];}();
        }
        }();
}
void deserialize_struct(object& json, VkSemaphoreWaitInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkSemaphoreWaitFlags temp_BAWQtjs[&](){temp_BAWQtjs=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSemaphoreWaitFlags)temp_BAWQtjs;}();}();
auto& json_value=json["semaphoreCount"];
[&](){member.semaphoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSemaphores"];
[&](){ VkSemaphore* temp_UNPruML[&](){
            if (!json_value.as_array().size()==0){
                temp_UNPruML=NULL;
            return; }temp_UNPruML=(VkSemaphore*)malloc(member.semaphoreCount*sizeof(VkSemaphore));
        auto& arr=json_value.as_array();
        for(int WAEDOAs=0; WAEDOAs < member.semaphoreCount; WAEDOAs++){
            [&](){deserialize_handle(json_value[WAEDOAs], temp_UNPruML[WAEDOAs]);}();
        }
        }();member.pSemaphores=temp_UNPruML;}();
auto& json_value=json["pValues"];
[&](){ uint64_t* temp_XHYVFIY[&](){
            if (!json_value.as_array().size()==0){
                temp_XHYVFIY=NULL;
            return; }temp_XHYVFIY=(uint64_t*)malloc(member.semaphoreCount*sizeof(uint64_t));
        auto& arr=json_value.as_array();
        for(int QDbgVwt=0; QDbgVwt < member.semaphoreCount; QDbgVwt++){
            [&](){temp_XHYVFIY[QDbgVwt]=static_cast<uint64_t>(value_to<int>(json_value[QDbgVwt]));}();
        }
        }();member.pValues=temp_XHYVFIY;}();
}

    void serialize_pUserData(object& json, VkSemaphoreWaitInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSemaphoreWaitInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSemaphoreSignalInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["semaphore"];
[&](){serialize_handle(json_value,member.semaphore);}();
auto& json_value=json["value"];
[&](){json_value=member.value;}();
}
void deserialize_struct(object& json, VkSemaphoreSignalInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["semaphore"];
[&](){deserialize_handle(json_value, member.semaphore);}();
auto& json_value=json["value"];
[&](){member.value=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSemaphoreSignalInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSemaphoreSignalInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVertexInputBindingDivisorDescriptionEXT& member){
        
    
auto& json_value=json["binding"];
[&](){json_value=member.binding;}();
auto& json_value=json["divisor"];
[&](){json_value=member.divisor;}();
}
void deserialize_struct(object& json, VkVertexInputBindingDivisorDescriptionEXT& member){
auto& json_value=json["binding"];
[&](){member.binding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["divisor"];
[&](){member.divisor=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkVertexInputBindingDivisorDescriptionEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVertexInputBindingDivisorDescriptionEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineVertexInputDivisorStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["vertexBindingDivisorCount"];
[&](){json_value=member.vertexBindingDivisorCount;}();
auto& json_value=json["pVertexBindingDivisors"];
[&](){
            if (member.pVertexBindingDivisors==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NyIqyrV=0; NyIqyrV < member.vertexBindingDivisorCount; NyIqyrV++){
            [&](){
            auto& temp=json_value[NyIqyrV].emplace_object();
            return serialize_struct(temp, member.pVertexBindingDivisors[NyIqyrV]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineVertexInputDivisorStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["vertexBindingDivisorCount"];
[&](){member.vertexBindingDivisorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pVertexBindingDivisors"];
[&](){ VkVertexInputBindingDivisorDescriptionEXT* temp_EtQjcSn[&](){
            if (!json_value.as_array().size()==0){
                temp_EtQjcSn=NULL;
            return; }temp_EtQjcSn=(VkVertexInputBindingDivisorDescriptionEXT*)malloc(member.vertexBindingDivisorCount*sizeof(VkVertexInputBindingDivisorDescriptionEXT));
        auto& arr=json_value.as_array();
        for(int WjkvGwK=0; WjkvGwK < member.vertexBindingDivisorCount; WjkvGwK++){
            [&](){
            auto& temp=json_value[WjkvGwK].as_object();
            deserialize_struct(temp,temp_EtQjcSn[WjkvGwK]);
            }();
        }
        }();member.pVertexBindingDivisors=temp_EtQjcSn;}();
}

    void serialize_pUserData(object& json, VkPipelineVertexInputDivisorStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineVertexInputDivisorStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxVertexAttribDivisor"];
[&](){json_value=member.maxVertexAttribDivisor;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxVertexAttribDivisor"];
[&](){member.maxVertexAttribDivisor=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePCIBusInfoPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pciDomain"];
[&](){json_value=member.pciDomain;}();
auto& json_value=json["pciBus"];
[&](){json_value=member.pciBus;}();
auto& json_value=json["pciDevice"];
[&](){json_value=member.pciDevice;}();
auto& json_value=json["pciFunction"];
[&](){json_value=member.pciFunction;}();
}
void deserialize_struct(object& json, VkPhysicalDevicePCIBusInfoPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pciDomain"];
[&](){member.pciDomain=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pciBus"];
[&](){member.pciBus=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pciDevice"];
[&](){member.pciDevice=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pciFunction"];
[&](){member.pciFunction=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePCIBusInfoPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePCIBusInfoPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferInheritanceConditionalRenderingInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["conditionalRenderingEnable"];
[&](){[&](){json_value=member.conditionalRenderingEnable;}();}();
}
void deserialize_struct(object& json, VkCommandBufferInheritanceConditionalRenderingInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["conditionalRenderingEnable"];
[&](){[&](){member.conditionalRenderingEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkCommandBufferInheritanceConditionalRenderingInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferInheritanceConditionalRenderingInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevice8BitStorageFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["storageBuffer8BitAccess"];
[&](){[&](){json_value=member.storageBuffer8BitAccess;}();}();
auto& json_value=json["uniformAndStorageBuffer8BitAccess"];
[&](){[&](){json_value=member.uniformAndStorageBuffer8BitAccess;}();}();
auto& json_value=json["storagePushConstant8"];
[&](){[&](){json_value=member.storagePushConstant8;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevice8BitStorageFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["storageBuffer8BitAccess"];
[&](){[&](){member.storageBuffer8BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformAndStorageBuffer8BitAccess"];
[&](){[&](){member.uniformAndStorageBuffer8BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storagePushConstant8"];
[&](){[&](){member.storagePushConstant8=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevice8BitStorageFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevice8BitStorageFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceConditionalRenderingFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["conditionalRendering"];
[&](){[&](){json_value=member.conditionalRendering;}();}();
auto& json_value=json["inheritedConditionalRendering"];
[&](){[&](){json_value=member.inheritedConditionalRendering;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceConditionalRenderingFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["conditionalRendering"];
[&](){[&](){member.conditionalRendering=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["inheritedConditionalRendering"];
[&](){[&](){member.inheritedConditionalRendering=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceConditionalRenderingFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceConditionalRenderingFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVulkanMemoryModelFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["vulkanMemoryModel"];
[&](){[&](){json_value=member.vulkanMemoryModel;}();}();
auto& json_value=json["vulkanMemoryModelDeviceScope"];
[&](){[&](){json_value=member.vulkanMemoryModelDeviceScope;}();}();
auto& json_value=json["vulkanMemoryModelAvailabilityVisibilityChains"];
[&](){[&](){json_value=member.vulkanMemoryModelAvailabilityVisibilityChains;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVulkanMemoryModelFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["vulkanMemoryModel"];
[&](){[&](){member.vulkanMemoryModel=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vulkanMemoryModelDeviceScope"];
[&](){[&](){member.vulkanMemoryModelDeviceScope=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vulkanMemoryModelAvailabilityVisibilityChains"];
[&](){[&](){member.vulkanMemoryModelAvailabilityVisibilityChains=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVulkanMemoryModelFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVulkanMemoryModelFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderAtomicInt64Features& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderBufferInt64Atomics"];
[&](){[&](){json_value=member.shaderBufferInt64Atomics;}();}();
auto& json_value=json["shaderSharedInt64Atomics"];
[&](){[&](){json_value=member.shaderSharedInt64Atomics;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderAtomicInt64Features& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderBufferInt64Atomics"];
[&](){[&](){member.shaderBufferInt64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedInt64Atomics"];
[&](){[&](){member.shaderSharedInt64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderAtomicInt64Features& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderAtomicInt64Features& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderBufferFloat32Atomics"];
[&](){[&](){json_value=member.shaderBufferFloat32Atomics;}();}();
auto& json_value=json["shaderBufferFloat32AtomicAdd"];
[&](){[&](){json_value=member.shaderBufferFloat32AtomicAdd;}();}();
auto& json_value=json["shaderBufferFloat64Atomics"];
[&](){[&](){json_value=member.shaderBufferFloat64Atomics;}();}();
auto& json_value=json["shaderBufferFloat64AtomicAdd"];
[&](){[&](){json_value=member.shaderBufferFloat64AtomicAdd;}();}();
auto& json_value=json["shaderSharedFloat32Atomics"];
[&](){[&](){json_value=member.shaderSharedFloat32Atomics;}();}();
auto& json_value=json["shaderSharedFloat32AtomicAdd"];
[&](){[&](){json_value=member.shaderSharedFloat32AtomicAdd;}();}();
auto& json_value=json["shaderSharedFloat64Atomics"];
[&](){[&](){json_value=member.shaderSharedFloat64Atomics;}();}();
auto& json_value=json["shaderSharedFloat64AtomicAdd"];
[&](){[&](){json_value=member.shaderSharedFloat64AtomicAdd;}();}();
auto& json_value=json["shaderImageFloat32Atomics"];
[&](){[&](){json_value=member.shaderImageFloat32Atomics;}();}();
auto& json_value=json["shaderImageFloat32AtomicAdd"];
[&](){[&](){json_value=member.shaderImageFloat32AtomicAdd;}();}();
auto& json_value=json["sparseImageFloat32Atomics"];
[&](){[&](){json_value=member.sparseImageFloat32Atomics;}();}();
auto& json_value=json["sparseImageFloat32AtomicAdd"];
[&](){[&](){json_value=member.sparseImageFloat32AtomicAdd;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderBufferFloat32Atomics"];
[&](){[&](){member.shaderBufferFloat32Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferFloat32AtomicAdd"];
[&](){[&](){member.shaderBufferFloat32AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferFloat64Atomics"];
[&](){[&](){member.shaderBufferFloat64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferFloat64AtomicAdd"];
[&](){[&](){member.shaderBufferFloat64AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat32Atomics"];
[&](){[&](){member.shaderSharedFloat32Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat32AtomicAdd"];
[&](){[&](){member.shaderSharedFloat32AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat64Atomics"];
[&](){[&](){member.shaderSharedFloat64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat64AtomicAdd"];
[&](){[&](){member.shaderSharedFloat64AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderImageFloat32Atomics"];
[&](){[&](){member.shaderImageFloat32Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderImageFloat32AtomicAdd"];
[&](){[&](){member.shaderImageFloat32AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseImageFloat32Atomics"];
[&](){[&](){member.sparseImageFloat32Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseImageFloat32AtomicAdd"];
[&](){[&](){member.sparseImageFloat32AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderBufferFloat16Atomics"];
[&](){[&](){json_value=member.shaderBufferFloat16Atomics;}();}();
auto& json_value=json["shaderBufferFloat16AtomicAdd"];
[&](){[&](){json_value=member.shaderBufferFloat16AtomicAdd;}();}();
auto& json_value=json["shaderBufferFloat16AtomicMinMax"];
[&](){[&](){json_value=member.shaderBufferFloat16AtomicMinMax;}();}();
auto& json_value=json["shaderBufferFloat32AtomicMinMax"];
[&](){[&](){json_value=member.shaderBufferFloat32AtomicMinMax;}();}();
auto& json_value=json["shaderBufferFloat64AtomicMinMax"];
[&](){[&](){json_value=member.shaderBufferFloat64AtomicMinMax;}();}();
auto& json_value=json["shaderSharedFloat16Atomics"];
[&](){[&](){json_value=member.shaderSharedFloat16Atomics;}();}();
auto& json_value=json["shaderSharedFloat16AtomicAdd"];
[&](){[&](){json_value=member.shaderSharedFloat16AtomicAdd;}();}();
auto& json_value=json["shaderSharedFloat16AtomicMinMax"];
[&](){[&](){json_value=member.shaderSharedFloat16AtomicMinMax;}();}();
auto& json_value=json["shaderSharedFloat32AtomicMinMax"];
[&](){[&](){json_value=member.shaderSharedFloat32AtomicMinMax;}();}();
auto& json_value=json["shaderSharedFloat64AtomicMinMax"];
[&](){[&](){json_value=member.shaderSharedFloat64AtomicMinMax;}();}();
auto& json_value=json["shaderImageFloat32AtomicMinMax"];
[&](){[&](){json_value=member.shaderImageFloat32AtomicMinMax;}();}();
auto& json_value=json["sparseImageFloat32AtomicMinMax"];
[&](){[&](){json_value=member.sparseImageFloat32AtomicMinMax;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderBufferFloat16Atomics"];
[&](){[&](){member.shaderBufferFloat16Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferFloat16AtomicAdd"];
[&](){[&](){member.shaderBufferFloat16AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferFloat16AtomicMinMax"];
[&](){[&](){member.shaderBufferFloat16AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferFloat32AtomicMinMax"];
[&](){[&](){member.shaderBufferFloat32AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferFloat64AtomicMinMax"];
[&](){[&](){member.shaderBufferFloat64AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat16Atomics"];
[&](){[&](){member.shaderSharedFloat16Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat16AtomicAdd"];
[&](){[&](){member.shaderSharedFloat16AtomicAdd=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat16AtomicMinMax"];
[&](){[&](){member.shaderSharedFloat16AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat32AtomicMinMax"];
[&](){[&](){member.shaderSharedFloat32AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedFloat64AtomicMinMax"];
[&](){[&](){member.shaderSharedFloat64AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderImageFloat32AtomicMinMax"];
[&](){[&](){member.shaderImageFloat32AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseImageFloat32AtomicMinMax"];
[&](){[&](){member.sparseImageFloat32AtomicMinMax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["vertexAttributeInstanceRateDivisor"];
[&](){[&](){json_value=member.vertexAttributeInstanceRateDivisor;}();}();
auto& json_value=json["vertexAttributeInstanceRateZeroDivisor"];
[&](){[&](){json_value=member.vertexAttributeInstanceRateZeroDivisor;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["vertexAttributeInstanceRateDivisor"];
[&](){[&](){member.vertexAttributeInstanceRateDivisor=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vertexAttributeInstanceRateZeroDivisor"];
[&](){[&](){member.vertexAttributeInstanceRateZeroDivisor=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueueFamilyCheckpointPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["checkpointExecutionStageMask"];
[&](){[&](){[&](){json_value=member.checkpointExecutionStageMask;}();}();}();
}
void deserialize_struct(object& json, VkQueueFamilyCheckpointPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["checkpointExecutionStageMask"];
[&](){[&](){VkPipelineStageFlags temp_KyUGfQX[&](){temp_KyUGfQX=static_cast<int>(value_to<int>(json_value));}();member.checkpointExecutionStageMask=(VkPipelineStageFlags)temp_KyUGfQX;}();}();
}

    void serialize_pUserData(object& json, VkQueueFamilyCheckpointPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueueFamilyCheckpointPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCheckpointDataNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stage"];
[&](){[&](){[&](){json_value=member.stage;}();}();}();
auto& json_value=json["pCheckpointMarker"];
[&](){
            if (member.pCheckpointMarker==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pCheckpointMarker)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ROoHiBu=0; ROoHiBu < strlen((char*)(member.pCheckpointMarker))+1; ROoHiBu++){
            [&](){json_value[ROoHiBu]=(char*)(member.pCheckpointMarker)[ROoHiBu];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkCheckpointDataNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["stage"];
[&](){[&](){VkPipelineStageFlagBits temp_mRQoQdL[&](){temp_mRQoQdL=static_cast<int>(value_to<int>(json_value));}();member.stage=(VkPipelineStageFlagBits)temp_mRQoQdL;}();}();
auto& json_value=json["pCheckpointMarker"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pCheckpointMarker=NULL;
            return; }char* temp_yGlpZpD;[&](){
            if (!json_value.as_array().size()==0){
                member.pCheckpointMarker=NULL;
            return; }member.pCheckpointMarker=(char*)malloc(member.pCheckpointMarker.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int ROoHiBu=0; ROoHiBu < member.pCheckpointMarker.as_array().size();; ROoHiBu++){
            [&](){member.pCheckpointMarker[ROoHiBu]=static_cast<char>(value_to<int>(json_value[ROoHiBu]));}();
        }
        }();member.pCheckpointMarker=temp_yGlpZpD;}();
}

    void serialize_pUserData(object& json, VkCheckpointDataNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCheckpointDataNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDepthStencilResolveProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["supportedDepthResolveModes"];
[&](){[&](){[&](){json_value=member.supportedDepthResolveModes;}();}();}();
auto& json_value=json["supportedStencilResolveModes"];
[&](){[&](){[&](){json_value=member.supportedStencilResolveModes;}();}();}();
auto& json_value=json["independentResolveNone"];
[&](){[&](){json_value=member.independentResolveNone;}();}();
auto& json_value=json["independentResolve"];
[&](){[&](){json_value=member.independentResolve;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDepthStencilResolveProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["supportedDepthResolveModes"];
[&](){[&](){VkResolveModeFlags temp_BeDPjhU[&](){temp_BeDPjhU=static_cast<int>(value_to<int>(json_value));}();member.supportedDepthResolveModes=(VkResolveModeFlags)temp_BeDPjhU;}();}();
auto& json_value=json["supportedStencilResolveModes"];
[&](){[&](){VkResolveModeFlags temp_jfujlBO[&](){temp_jfujlBO=static_cast<int>(value_to<int>(json_value));}();member.supportedStencilResolveModes=(VkResolveModeFlags)temp_jfujlBO;}();}();
auto& json_value=json["independentResolveNone"];
[&](){[&](){member.independentResolveNone=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["independentResolve"];
[&](){[&](){member.independentResolve=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDepthStencilResolveProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDepthStencilResolveProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassDescriptionDepthStencilResolve& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["depthResolveMode"];
[&](){[&](){[&](){json_value=member.depthResolveMode;}();}();}();
auto& json_value=json["stencilResolveMode"];
[&](){[&](){[&](){json_value=member.stencilResolveMode;}();}();}();
auto& json_value=json["pDepthStencilResolveAttachment"];
[&](){
            if (member.pDepthStencilResolveAttachment==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int OUyBLoX=0; OUyBLoX < 1; OUyBLoX++){
            [&](){
            auto& temp=json_value[OUyBLoX].emplace_object();
            return serialize_struct(temp, member.pDepthStencilResolveAttachment[OUyBLoX]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkSubpassDescriptionDepthStencilResolve& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["depthResolveMode"];
[&](){[&](){VkResolveModeFlagBits temp_DZJOVuM[&](){temp_DZJOVuM=static_cast<int>(value_to<int>(json_value));}();member.depthResolveMode=(VkResolveModeFlagBits)temp_DZJOVuM;}();}();
auto& json_value=json["stencilResolveMode"];
[&](){[&](){VkResolveModeFlagBits temp_GmIwaez[&](){temp_GmIwaez=static_cast<int>(value_to<int>(json_value));}();member.stencilResolveMode=(VkResolveModeFlagBits)temp_GmIwaez;}();}();
auto& json_value=json["pDepthStencilResolveAttachment"];
[&](){ VkAttachmentReference2* temp_qZRzgVG[&](){
            if (!json_value.as_array().size()==0){
                temp_qZRzgVG=NULL;
            return; }temp_qZRzgVG=(VkAttachmentReference2*)malloc(1*sizeof(VkAttachmentReference2));
        auto& arr=json_value.as_array();
        for(int mhYoNRQ=0; mhYoNRQ < 1; mhYoNRQ++){
            [&](){
            auto& temp=json_value[mhYoNRQ].as_object();
            deserialize_struct(temp,temp_qZRzgVG[mhYoNRQ]);
            }();
        }
        }();member.pDepthStencilResolveAttachment=temp_qZRzgVG;}();
}

    void serialize_pUserData(object& json, VkSubpassDescriptionDepthStencilResolve& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassDescriptionDepthStencilResolve& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewASTCDecodeModeEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["decodeMode"];
[&](){[&](){[&](){json_value=member.decodeMode;}();}();}();
}
void deserialize_struct(object& json, VkImageViewASTCDecodeModeEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["decodeMode"];
[&](){[&](){VkFormat temp_eaAqrcP[&](){temp_eaAqrcP=static_cast<int>(value_to<int>(json_value));}();member.decodeMode=(VkFormat)temp_eaAqrcP;}();}();
}

    void serialize_pUserData(object& json, VkImageViewASTCDecodeModeEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewASTCDecodeModeEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceASTCDecodeFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["decodeModeSharedExponent"];
[&](){[&](){json_value=member.decodeModeSharedExponent;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceASTCDecodeFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["decodeModeSharedExponent"];
[&](){[&](){member.decodeModeSharedExponent=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceASTCDecodeFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceASTCDecodeFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTransformFeedbackFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["transformFeedback"];
[&](){[&](){json_value=member.transformFeedback;}();}();
auto& json_value=json["geometryStreams"];
[&](){[&](){json_value=member.geometryStreams;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTransformFeedbackFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["transformFeedback"];
[&](){[&](){member.transformFeedback=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["geometryStreams"];
[&](){[&](){member.geometryStreams=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTransformFeedbackFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTransformFeedbackFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTransformFeedbackPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxTransformFeedbackStreams"];
[&](){json_value=member.maxTransformFeedbackStreams;}();
auto& json_value=json["maxTransformFeedbackBuffers"];
[&](){json_value=member.maxTransformFeedbackBuffers;}();
auto& json_value=json["maxTransformFeedbackBufferSize"];
[&](){[&](){json_value=member.maxTransformFeedbackBufferSize;}();}();
auto& json_value=json["maxTransformFeedbackStreamDataSize"];
[&](){json_value=member.maxTransformFeedbackStreamDataSize;}();
auto& json_value=json["maxTransformFeedbackBufferDataSize"];
[&](){json_value=member.maxTransformFeedbackBufferDataSize;}();
auto& json_value=json["maxTransformFeedbackBufferDataStride"];
[&](){json_value=member.maxTransformFeedbackBufferDataStride;}();
auto& json_value=json["transformFeedbackQueries"];
[&](){[&](){json_value=member.transformFeedbackQueries;}();}();
auto& json_value=json["transformFeedbackStreamsLinesTriangles"];
[&](){[&](){json_value=member.transformFeedbackStreamsLinesTriangles;}();}();
auto& json_value=json["transformFeedbackRasterizationStreamSelect"];
[&](){[&](){json_value=member.transformFeedbackRasterizationStreamSelect;}();}();
auto& json_value=json["transformFeedbackDraw"];
[&](){[&](){json_value=member.transformFeedbackDraw;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTransformFeedbackPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxTransformFeedbackStreams"];
[&](){member.maxTransformFeedbackStreams=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTransformFeedbackBuffers"];
[&](){member.maxTransformFeedbackBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTransformFeedbackBufferSize"];
[&](){[&](){member.maxTransformFeedbackBufferSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxTransformFeedbackStreamDataSize"];
[&](){member.maxTransformFeedbackStreamDataSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTransformFeedbackBufferDataSize"];
[&](){member.maxTransformFeedbackBufferDataSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTransformFeedbackBufferDataStride"];
[&](){member.maxTransformFeedbackBufferDataStride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["transformFeedbackQueries"];
[&](){[&](){member.transformFeedbackQueries=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["transformFeedbackStreamsLinesTriangles"];
[&](){[&](){member.transformFeedbackStreamsLinesTriangles=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["transformFeedbackRasterizationStreamSelect"];
[&](){[&](){member.transformFeedbackRasterizationStreamSelect=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["transformFeedbackDraw"];
[&](){[&](){member.transformFeedbackDraw=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTransformFeedbackPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTransformFeedbackPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRasterizationStateStreamCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["rasterizationStream"];
[&](){json_value=member.rasterizationStream;}();
}
void deserialize_struct(object& json, VkPipelineRasterizationStateStreamCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineRasterizationStateStreamCreateFlagsEXT temp_NSsJWSZ[&](){temp_NSsJWSZ=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineRasterizationStateStreamCreateFlagsEXT)temp_NSsJWSZ;}();}();
auto& json_value=json["rasterizationStream"];
[&](){member.rasterizationStream=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineRasterizationStateStreamCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRasterizationStateStreamCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["representativeFragmentTest"];
[&](){[&](){json_value=member.representativeFragmentTest;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["representativeFragmentTest"];
[&](){[&](){member.representativeFragmentTest=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRepresentativeFragmentTestStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["representativeFragmentTestEnable"];
[&](){[&](){json_value=member.representativeFragmentTestEnable;}();}();
}
void deserialize_struct(object& json, VkPipelineRepresentativeFragmentTestStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["representativeFragmentTestEnable"];
[&](){[&](){member.representativeFragmentTestEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPipelineRepresentativeFragmentTestStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRepresentativeFragmentTestStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExclusiveScissorFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["exclusiveScissor"];
[&](){[&](){json_value=member.exclusiveScissor;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExclusiveScissorFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["exclusiveScissor"];
[&](){[&](){member.exclusiveScissor=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExclusiveScissorFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExclusiveScissorFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineViewportExclusiveScissorStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["exclusiveScissorCount"];
[&](){json_value=member.exclusiveScissorCount;}();
auto& json_value=json["pExclusiveScissors"];
[&](){
            if (member.pExclusiveScissors==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int hDCzNLp=0; hDCzNLp < member.exclusiveScissorCount; hDCzNLp++){
            [&](){
            auto& temp=json_value[hDCzNLp].emplace_object();
            return serialize_struct(temp, member.pExclusiveScissors[hDCzNLp]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineViewportExclusiveScissorStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["exclusiveScissorCount"];
[&](){member.exclusiveScissorCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pExclusiveScissors"];
[&](){ VkRect2D* temp_sHqzwmb[&](){
            if (!json_value.as_array().size()==0){
                temp_sHqzwmb=NULL;
            return; }temp_sHqzwmb=(VkRect2D*)malloc(member.exclusiveScissorCount*sizeof(VkRect2D));
        auto& arr=json_value.as_array();
        for(int gpvLKLX=0; gpvLKLX < member.exclusiveScissorCount; gpvLKLX++){
            [&](){
            auto& temp=json_value[gpvLKLX].as_object();
            deserialize_struct(temp,temp_sHqzwmb[gpvLKLX]);
            }();
        }
        }();member.pExclusiveScissors=temp_sHqzwmb;}();
}

    void serialize_pUserData(object& json, VkPipelineViewportExclusiveScissorStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineViewportExclusiveScissorStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCornerSampledImageFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cornerSampledImage"];
[&](){[&](){json_value=member.cornerSampledImage;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCornerSampledImageFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["cornerSampledImage"];
[&](){[&](){member.cornerSampledImage=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCornerSampledImageFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCornerSampledImageFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["computeDerivativeGroupQuads"];
[&](){[&](){json_value=member.computeDerivativeGroupQuads;}();}();
auto& json_value=json["computeDerivativeGroupLinear"];
[&](){[&](){json_value=member.computeDerivativeGroupLinear;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["computeDerivativeGroupQuads"];
[&](){[&](){member.computeDerivativeGroupQuads=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["computeDerivativeGroupLinear"];
[&](){[&](){member.computeDerivativeGroupLinear=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderImageFootprintFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageFootprint"];
[&](){[&](){json_value=member.imageFootprint;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderImageFootprintFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageFootprint"];
[&](){[&](){member.imageFootprint=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderImageFootprintFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderImageFootprintFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dedicatedAllocationImageAliasing"];
[&](){[&](){json_value=member.dedicatedAllocationImageAliasing;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["dedicatedAllocationImageAliasing"];
[&](){[&](){member.dedicatedAllocationImageAliasing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["indirectCopy"];
[&](){[&](){json_value=member.indirectCopy;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["indirectCopy"];
[&](){[&](){member.indirectCopy=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCopyMemoryIndirectFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["supportedQueues"];
[&](){[&](){[&](){json_value=member.supportedQueues;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["supportedQueues"];
[&](){[&](){VkQueueFlags temp_jBNWTvE[&](){temp_jBNWTvE=static_cast<int>(value_to<int>(json_value));}();member.supportedQueues=(VkQueueFlags)temp_jBNWTvE;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCopyMemoryIndirectPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMemoryDecompressionFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryDecompression"];
[&](){[&](){json_value=member.memoryDecompression;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMemoryDecompressionFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryDecompression"];
[&](){[&](){member.memoryDecompression=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMemoryDecompressionFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMemoryDecompressionFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMemoryDecompressionPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["decompressionMethods"];
[&](){[&](){[&](){json_value=member.decompressionMethods;}();}();}();
auto& json_value=json["maxDecompressionIndirectCount"];
[&](){json_value=member.maxDecompressionIndirectCount;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMemoryDecompressionPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["decompressionMethods"];
[&](){[&](){VkMemoryDecompressionMethodFlagsNV temp_rDDIcGN[&](){temp_rDDIcGN=static_cast<int>(value_to<int>(json_value));}();member.decompressionMethods=(VkMemoryDecompressionMethodFlagsNV)temp_rDDIcGN;}();}();
auto& json_value=json["maxDecompressionIndirectCount"];
[&](){member.maxDecompressionIndirectCount=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMemoryDecompressionPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMemoryDecompressionPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkShadingRatePaletteNV& member){
        
    
auto& json_value=json["shadingRatePaletteEntryCount"];
[&](){json_value=member.shadingRatePaletteEntryCount;}();
auto& json_value=json["pShadingRatePaletteEntries"];
[&](){
            if (member.pShadingRatePaletteEntries==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int yMnmzQx=0; yMnmzQx < member.shadingRatePaletteEntryCount; yMnmzQx++){
            [&](){[&](){[&](){json_value[yMnmzQx]=member.pShadingRatePaletteEntries[yMnmzQx];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkShadingRatePaletteNV& member){
auto& json_value=json["shadingRatePaletteEntryCount"];
[&](){member.shadingRatePaletteEntryCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pShadingRatePaletteEntries"];
[&](){ VkShadingRatePaletteEntryNV* temp_YblEbcU[&](){
            if (!json_value.as_array().size()==0){
                temp_YblEbcU=NULL;
            return; }temp_YblEbcU=(VkShadingRatePaletteEntryNV*)malloc(member.shadingRatePaletteEntryCount*sizeof(VkShadingRatePaletteEntryNV));
        auto& arr=json_value.as_array();
        for(int qHFlNbq=0; qHFlNbq < member.shadingRatePaletteEntryCount; qHFlNbq++){
            [&](){[&](){const VkShadingRatePaletteEntryNV* temp_JRGXQmb[&](){temp_JRGXQmb=static_cast<int>(value_to<int>(json_value[qHFlNbq]));}();temp_YblEbcU[qHFlNbq]=(VkShadingRatePaletteEntryNV)temp_JRGXQmb;}();}();
        }
        }();member.pShadingRatePaletteEntries=temp_YblEbcU;}();
}

    void serialize_pUserData(object& json, VkShadingRatePaletteNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkShadingRatePaletteNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineViewportShadingRateImageStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shadingRateImageEnable"];
[&](){[&](){json_value=member.shadingRateImageEnable;}();}();
auto& json_value=json["viewportCount"];
[&](){json_value=member.viewportCount;}();
auto& json_value=json["pShadingRatePalettes"];
[&](){
            if (member.pShadingRatePalettes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int CEwDDNk=0; CEwDDNk < member.viewportCount; CEwDDNk++){
            [&](){
            auto& temp=json_value[CEwDDNk].emplace_object();
            return serialize_struct(temp, member.pShadingRatePalettes[CEwDDNk]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineViewportShadingRateImageStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["shadingRateImageEnable"];
[&](){[&](){member.shadingRateImageEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["viewportCount"];
[&](){member.viewportCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pShadingRatePalettes"];
[&](){ VkShadingRatePaletteNV* temp_UEBEVzS[&](){
            if (!json_value.as_array().size()==0){
                temp_UEBEVzS=NULL;
            return; }temp_UEBEVzS=(VkShadingRatePaletteNV*)malloc(member.viewportCount*sizeof(VkShadingRatePaletteNV));
        auto& arr=json_value.as_array();
        for(int YEHriqV=0; YEHriqV < member.viewportCount; YEHriqV++){
            [&](){
            auto& temp=json_value[YEHriqV].as_object();
            deserialize_struct(temp,temp_UEBEVzS[YEHriqV]);
            }();
        }
        }();member.pShadingRatePalettes=temp_UEBEVzS;}();
}

    void serialize_pUserData(object& json, VkPipelineViewportShadingRateImageStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineViewportShadingRateImageStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShadingRateImageFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shadingRateImage"];
[&](){[&](){json_value=member.shadingRateImage;}();}();
auto& json_value=json["shadingRateCoarseSampleOrder"];
[&](){[&](){json_value=member.shadingRateCoarseSampleOrder;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShadingRateImageFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shadingRateImage"];
[&](){[&](){member.shadingRateImage=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shadingRateCoarseSampleOrder"];
[&](){[&](){member.shadingRateCoarseSampleOrder=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShadingRateImageFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShadingRateImageFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShadingRateImagePropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shadingRateTexelSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.shadingRateTexelSize);
            }();
auto& json_value=json["shadingRatePaletteSize"];
[&](){json_value=member.shadingRatePaletteSize;}();
auto& json_value=json["shadingRateMaxCoarseSamples"];
[&](){json_value=member.shadingRateMaxCoarseSamples;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShadingRateImagePropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shadingRateTexelSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.shadingRateTexelSize);
            }();
auto& json_value=json["shadingRatePaletteSize"];
[&](){member.shadingRatePaletteSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shadingRateMaxCoarseSamples"];
[&](){member.shadingRateMaxCoarseSamples=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShadingRateImagePropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShadingRateImagePropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["invocationMask"];
[&](){[&](){json_value=member.invocationMask;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["invocationMask"];
[&](){[&](){member.invocationMask=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceInvocationMaskFeaturesHUAWEI& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCoarseSampleLocationNV& member){
        
    
auto& json_value=json["pixelX"];
[&](){json_value=member.pixelX;}();
auto& json_value=json["pixelY"];
[&](){json_value=member.pixelY;}();
auto& json_value=json["sample"];
[&](){json_value=member.sample;}();
}
void deserialize_struct(object& json, VkCoarseSampleLocationNV& member){
auto& json_value=json["pixelX"];
[&](){member.pixelX=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pixelY"];
[&](){member.pixelY=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sample"];
[&](){member.sample=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkCoarseSampleLocationNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCoarseSampleLocationNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCoarseSampleOrderCustomNV& member){
        
    
auto& json_value=json["shadingRate"];
[&](){[&](){[&](){json_value=member.shadingRate;}();}();}();
auto& json_value=json["sampleCount"];
[&](){json_value=member.sampleCount;}();
auto& json_value=json["sampleLocationCount"];
[&](){json_value=member.sampleLocationCount;}();
auto& json_value=json["pSampleLocations"];
[&](){
            if (member.pSampleLocations==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int zloWrCx=0; zloWrCx < member.sampleLocationCount; zloWrCx++){
            [&](){
            auto& temp=json_value[zloWrCx].emplace_object();
            return serialize_struct(temp, member.pSampleLocations[zloWrCx]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCoarseSampleOrderCustomNV& member){
auto& json_value=json["shadingRate"];
[&](){[&](){VkShadingRatePaletteEntryNV temp_QJxsvaD[&](){temp_QJxsvaD=static_cast<int>(value_to<int>(json_value));}();member.shadingRate=(VkShadingRatePaletteEntryNV)temp_QJxsvaD;}();}();
auto& json_value=json["sampleCount"];
[&](){member.sampleCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sampleLocationCount"];
[&](){member.sampleLocationCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSampleLocations"];
[&](){ VkCoarseSampleLocationNV* temp_VGMpoHH[&](){
            if (!json_value.as_array().size()==0){
                temp_VGMpoHH=NULL;
            return; }temp_VGMpoHH=(VkCoarseSampleLocationNV*)malloc(member.sampleLocationCount*sizeof(VkCoarseSampleLocationNV));
        auto& arr=json_value.as_array();
        for(int nGkqqOa=0; nGkqqOa < member.sampleLocationCount; nGkqqOa++){
            [&](){
            auto& temp=json_value[nGkqqOa].as_object();
            deserialize_struct(temp,temp_VGMpoHH[nGkqqOa]);
            }();
        }
        }();member.pSampleLocations=temp_VGMpoHH;}();
}

    void serialize_pUserData(object& json, VkCoarseSampleOrderCustomNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCoarseSampleOrderCustomNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sampleOrderType"];
[&](){[&](){[&](){json_value=member.sampleOrderType;}();}();}();
auto& json_value=json["customSampleOrderCount"];
[&](){json_value=member.customSampleOrderCount;}();
auto& json_value=json["pCustomSampleOrders"];
[&](){
            if (member.pCustomSampleOrders==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rRLekif=0; rRLekif < member.customSampleOrderCount; rRLekif++){
            [&](){
            auto& temp=json_value[rRLekif].emplace_object();
            return serialize_struct(temp, member.pCustomSampleOrders[rRLekif]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["sampleOrderType"];
[&](){[&](){VkCoarseSampleOrderTypeNV temp_XHeLvgZ[&](){temp_XHeLvgZ=static_cast<int>(value_to<int>(json_value));}();member.sampleOrderType=(VkCoarseSampleOrderTypeNV)temp_XHeLvgZ;}();}();
auto& json_value=json["customSampleOrderCount"];
[&](){member.customSampleOrderCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCustomSampleOrders"];
[&](){ VkCoarseSampleOrderCustomNV* temp_BSXspQA[&](){
            if (!json_value.as_array().size()==0){
                temp_BSXspQA=NULL;
            return; }temp_BSXspQA=(VkCoarseSampleOrderCustomNV*)malloc(member.customSampleOrderCount*sizeof(VkCoarseSampleOrderCustomNV));
        auto& arr=json_value.as_array();
        for(int LhLuItc=0; LhLuItc < member.customSampleOrderCount; LhLuItc++){
            [&](){
            auto& temp=json_value[LhLuItc].as_object();
            deserialize_struct(temp,temp_BSXspQA[LhLuItc]);
            }();
        }
        }();member.pCustomSampleOrders=temp_BSXspQA;}();
}

    void serialize_pUserData(object& json, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMeshShaderFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["taskShader"];
[&](){[&](){json_value=member.taskShader;}();}();
auto& json_value=json["meshShader"];
[&](){[&](){json_value=member.meshShader;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMeshShaderFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["taskShader"];
[&](){[&](){member.taskShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["meshShader"];
[&](){[&](){member.meshShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMeshShaderFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMeshShaderFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMeshShaderPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxDrawMeshTasksCount"];
[&](){json_value=member.maxDrawMeshTasksCount;}();
auto& json_value=json["maxTaskWorkGroupInvocations"];
[&](){json_value=member.maxTaskWorkGroupInvocations;}();
auto& json_value=json["maxTaskWorkGroupSize"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){json_value[FICAZzf]=member.maxTaskWorkGroupSize[FICAZzf];}();
        }
        }();
auto& json_value=json["maxTaskTotalMemorySize"];
[&](){json_value=member.maxTaskTotalMemorySize;}();
auto& json_value=json["maxTaskOutputCount"];
[&](){json_value=member.maxTaskOutputCount;}();
auto& json_value=json["maxMeshWorkGroupInvocations"];
[&](){json_value=member.maxMeshWorkGroupInvocations;}();
auto& json_value=json["maxMeshWorkGroupSize"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){json_value[FHeKNFR]=member.maxMeshWorkGroupSize[FHeKNFR];}();
        }
        }();
auto& json_value=json["maxMeshTotalMemorySize"];
[&](){json_value=member.maxMeshTotalMemorySize;}();
auto& json_value=json["maxMeshOutputVertices"];
[&](){json_value=member.maxMeshOutputVertices;}();
auto& json_value=json["maxMeshOutputPrimitives"];
[&](){json_value=member.maxMeshOutputPrimitives;}();
auto& json_value=json["maxMeshMultiviewViewCount"];
[&](){json_value=member.maxMeshMultiviewViewCount;}();
auto& json_value=json["meshOutputPerVertexGranularity"];
[&](){json_value=member.meshOutputPerVertexGranularity;}();
auto& json_value=json["meshOutputPerPrimitiveGranularity"];
[&](){json_value=member.meshOutputPerPrimitiveGranularity;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMeshShaderPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxDrawMeshTasksCount"];
[&](){member.maxDrawMeshTasksCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTaskWorkGroupInvocations"];
[&](){member.maxTaskWorkGroupInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTaskWorkGroupSize"];
[&](){
        auto& arr=json_value.as_array();
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){member.maxTaskWorkGroupSize[FICAZzf]=static_cast<uint32_t>(value_to<int>(json_value[FICAZzf]));}();
        }
        }();
auto& json_value=json["maxTaskTotalMemorySize"];
[&](){member.maxTaskTotalMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTaskOutputCount"];
[&](){member.maxTaskOutputCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshWorkGroupInvocations"];
[&](){member.maxMeshWorkGroupInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshWorkGroupSize"];
[&](){
        auto& arr=json_value.as_array();
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){member.maxMeshWorkGroupSize[FHeKNFR]=static_cast<uint32_t>(value_to<int>(json_value[FHeKNFR]));}();
        }
        }();
auto& json_value=json["maxMeshTotalMemorySize"];
[&](){member.maxMeshTotalMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshOutputVertices"];
[&](){member.maxMeshOutputVertices=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshOutputPrimitives"];
[&](){member.maxMeshOutputPrimitives=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshMultiviewViewCount"];
[&](){member.maxMeshMultiviewViewCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["meshOutputPerVertexGranularity"];
[&](){member.meshOutputPerVertexGranularity=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["meshOutputPerPrimitiveGranularity"];
[&](){member.meshOutputPerPrimitiveGranularity=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMeshShaderPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMeshShaderPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrawMeshTasksIndirectCommandNV& member){
        
    
auto& json_value=json["taskCount"];
[&](){json_value=member.taskCount;}();
auto& json_value=json["firstTask"];
[&](){json_value=member.firstTask;}();
}
void deserialize_struct(object& json, VkDrawMeshTasksIndirectCommandNV& member){
auto& json_value=json["taskCount"];
[&](){member.taskCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["firstTask"];
[&](){member.firstTask=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDrawMeshTasksIndirectCommandNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrawMeshTasksIndirectCommandNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMeshShaderFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["taskShader"];
[&](){[&](){json_value=member.taskShader;}();}();
auto& json_value=json["meshShader"];
[&](){[&](){json_value=member.meshShader;}();}();
auto& json_value=json["multiviewMeshShader"];
[&](){[&](){json_value=member.multiviewMeshShader;}();}();
auto& json_value=json["primitiveFragmentShadingRateMeshShader"];
[&](){[&](){json_value=member.primitiveFragmentShadingRateMeshShader;}();}();
auto& json_value=json["meshShaderQueries"];
[&](){[&](){json_value=member.meshShaderQueries;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMeshShaderFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["taskShader"];
[&](){[&](){member.taskShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["meshShader"];
[&](){[&](){member.meshShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiviewMeshShader"];
[&](){[&](){member.multiviewMeshShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["primitiveFragmentShadingRateMeshShader"];
[&](){[&](){member.primitiveFragmentShadingRateMeshShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["meshShaderQueries"];
[&](){[&](){member.meshShaderQueries=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMeshShaderFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMeshShaderFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMeshShaderPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxTaskWorkGroupTotalCount"];
[&](){json_value=member.maxTaskWorkGroupTotalCount;}();
auto& json_value=json["maxTaskWorkGroupCount"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int MDHjwFq=0; MDHjwFq < 3; MDHjwFq++){
            [&](){json_value[MDHjwFq]=member.maxTaskWorkGroupCount[MDHjwFq];}();
        }
        }();
auto& json_value=json["maxTaskWorkGroupInvocations"];
[&](){json_value=member.maxTaskWorkGroupInvocations;}();
auto& json_value=json["maxTaskWorkGroupSize"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){json_value[FICAZzf]=member.maxTaskWorkGroupSize[FICAZzf];}();
        }
        }();
auto& json_value=json["maxTaskPayloadSize"];
[&](){json_value=member.maxTaskPayloadSize;}();
auto& json_value=json["maxTaskSharedMemorySize"];
[&](){json_value=member.maxTaskSharedMemorySize;}();
auto& json_value=json["maxTaskPayloadAndSharedMemorySize"];
[&](){json_value=member.maxTaskPayloadAndSharedMemorySize;}();
auto& json_value=json["maxMeshWorkGroupTotalCount"];
[&](){json_value=member.maxMeshWorkGroupTotalCount;}();
auto& json_value=json["maxMeshWorkGroupCount"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int ZnMehla=0; ZnMehla < 3; ZnMehla++){
            [&](){json_value[ZnMehla]=member.maxMeshWorkGroupCount[ZnMehla];}();
        }
        }();
auto& json_value=json["maxMeshWorkGroupInvocations"];
[&](){json_value=member.maxMeshWorkGroupInvocations;}();
auto& json_value=json["maxMeshWorkGroupSize"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){json_value[FHeKNFR]=member.maxMeshWorkGroupSize[FHeKNFR];}();
        }
        }();
auto& json_value=json["maxMeshSharedMemorySize"];
[&](){json_value=member.maxMeshSharedMemorySize;}();
auto& json_value=json["maxMeshPayloadAndSharedMemorySize"];
[&](){json_value=member.maxMeshPayloadAndSharedMemorySize;}();
auto& json_value=json["maxMeshOutputMemorySize"];
[&](){json_value=member.maxMeshOutputMemorySize;}();
auto& json_value=json["maxMeshPayloadAndOutputMemorySize"];
[&](){json_value=member.maxMeshPayloadAndOutputMemorySize;}();
auto& json_value=json["maxMeshOutputComponents"];
[&](){json_value=member.maxMeshOutputComponents;}();
auto& json_value=json["maxMeshOutputVertices"];
[&](){json_value=member.maxMeshOutputVertices;}();
auto& json_value=json["maxMeshOutputPrimitives"];
[&](){json_value=member.maxMeshOutputPrimitives;}();
auto& json_value=json["maxMeshOutputLayers"];
[&](){json_value=member.maxMeshOutputLayers;}();
auto& json_value=json["maxMeshMultiviewViewCount"];
[&](){json_value=member.maxMeshMultiviewViewCount;}();
auto& json_value=json["meshOutputPerVertexGranularity"];
[&](){json_value=member.meshOutputPerVertexGranularity;}();
auto& json_value=json["meshOutputPerPrimitiveGranularity"];
[&](){json_value=member.meshOutputPerPrimitiveGranularity;}();
auto& json_value=json["maxPreferredTaskWorkGroupInvocations"];
[&](){json_value=member.maxPreferredTaskWorkGroupInvocations;}();
auto& json_value=json["maxPreferredMeshWorkGroupInvocations"];
[&](){json_value=member.maxPreferredMeshWorkGroupInvocations;}();
auto& json_value=json["prefersLocalInvocationVertexOutput"];
[&](){[&](){json_value=member.prefersLocalInvocationVertexOutput;}();}();
auto& json_value=json["prefersLocalInvocationPrimitiveOutput"];
[&](){[&](){json_value=member.prefersLocalInvocationPrimitiveOutput;}();}();
auto& json_value=json["prefersCompactVertexOutput"];
[&](){[&](){json_value=member.prefersCompactVertexOutput;}();}();
auto& json_value=json["prefersCompactPrimitiveOutput"];
[&](){[&](){json_value=member.prefersCompactPrimitiveOutput;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMeshShaderPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxTaskWorkGroupTotalCount"];
[&](){member.maxTaskWorkGroupTotalCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTaskWorkGroupCount"];
[&](){
        auto& arr=json_value.as_array();
        for(int MDHjwFq=0; MDHjwFq < 3; MDHjwFq++){
            [&](){member.maxTaskWorkGroupCount[MDHjwFq]=static_cast<uint32_t>(value_to<int>(json_value[MDHjwFq]));}();
        }
        }();
auto& json_value=json["maxTaskWorkGroupInvocations"];
[&](){member.maxTaskWorkGroupInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTaskWorkGroupSize"];
[&](){
        auto& arr=json_value.as_array();
        for(int FICAZzf=0; FICAZzf < 3; FICAZzf++){
            [&](){member.maxTaskWorkGroupSize[FICAZzf]=static_cast<uint32_t>(value_to<int>(json_value[FICAZzf]));}();
        }
        }();
auto& json_value=json["maxTaskPayloadSize"];
[&](){member.maxTaskPayloadSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTaskSharedMemorySize"];
[&](){member.maxTaskSharedMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTaskPayloadAndSharedMemorySize"];
[&](){member.maxTaskPayloadAndSharedMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshWorkGroupTotalCount"];
[&](){member.maxMeshWorkGroupTotalCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshWorkGroupCount"];
[&](){
        auto& arr=json_value.as_array();
        for(int ZnMehla=0; ZnMehla < 3; ZnMehla++){
            [&](){member.maxMeshWorkGroupCount[ZnMehla]=static_cast<uint32_t>(value_to<int>(json_value[ZnMehla]));}();
        }
        }();
auto& json_value=json["maxMeshWorkGroupInvocations"];
[&](){member.maxMeshWorkGroupInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshWorkGroupSize"];
[&](){
        auto& arr=json_value.as_array();
        for(int FHeKNFR=0; FHeKNFR < 3; FHeKNFR++){
            [&](){member.maxMeshWorkGroupSize[FHeKNFR]=static_cast<uint32_t>(value_to<int>(json_value[FHeKNFR]));}();
        }
        }();
auto& json_value=json["maxMeshSharedMemorySize"];
[&](){member.maxMeshSharedMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshPayloadAndSharedMemorySize"];
[&](){member.maxMeshPayloadAndSharedMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshOutputMemorySize"];
[&](){member.maxMeshOutputMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshPayloadAndOutputMemorySize"];
[&](){member.maxMeshPayloadAndOutputMemorySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshOutputComponents"];
[&](){member.maxMeshOutputComponents=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshOutputVertices"];
[&](){member.maxMeshOutputVertices=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshOutputPrimitives"];
[&](){member.maxMeshOutputPrimitives=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshOutputLayers"];
[&](){member.maxMeshOutputLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMeshMultiviewViewCount"];
[&](){member.maxMeshMultiviewViewCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["meshOutputPerVertexGranularity"];
[&](){member.meshOutputPerVertexGranularity=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["meshOutputPerPrimitiveGranularity"];
[&](){member.meshOutputPerPrimitiveGranularity=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPreferredTaskWorkGroupInvocations"];
[&](){member.maxPreferredTaskWorkGroupInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPreferredMeshWorkGroupInvocations"];
[&](){member.maxPreferredMeshWorkGroupInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["prefersLocalInvocationVertexOutput"];
[&](){[&](){member.prefersLocalInvocationVertexOutput=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["prefersLocalInvocationPrimitiveOutput"];
[&](){[&](){member.prefersLocalInvocationPrimitiveOutput=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["prefersCompactVertexOutput"];
[&](){[&](){member.prefersCompactVertexOutput=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["prefersCompactPrimitiveOutput"];
[&](){[&](){member.prefersCompactPrimitiveOutput=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMeshShaderPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMeshShaderPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrawMeshTasksIndirectCommandEXT& member){
        
    
auto& json_value=json["groupCountX"];
[&](){json_value=member.groupCountX;}();
auto& json_value=json["groupCountY"];
[&](){json_value=member.groupCountY;}();
auto& json_value=json["groupCountZ"];
[&](){json_value=member.groupCountZ;}();
}
void deserialize_struct(object& json, VkDrawMeshTasksIndirectCommandEXT& member){
auto& json_value=json["groupCountX"];
[&](){member.groupCountX=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["groupCountY"];
[&](){member.groupCountY=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["groupCountZ"];
[&](){member.groupCountZ=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDrawMeshTasksIndirectCommandEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrawMeshTasksIndirectCommandEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRayTracingShaderGroupCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["generalShader"];
[&](){json_value=member.generalShader;}();
auto& json_value=json["closestHitShader"];
[&](){json_value=member.closestHitShader;}();
auto& json_value=json["anyHitShader"];
[&](){json_value=member.anyHitShader;}();
auto& json_value=json["intersectionShader"];
[&](){json_value=member.intersectionShader;}();
}
void deserialize_struct(object& json, VkRayTracingShaderGroupCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkRayTracingShaderGroupTypeKHR temp_gYkQVup[&](){temp_gYkQVup=static_cast<int>(value_to<int>(json_value));}();member.type=(VkRayTracingShaderGroupTypeKHR)temp_gYkQVup;}();}();
auto& json_value=json["generalShader"];
[&](){member.generalShader=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["closestHitShader"];
[&](){member.closestHitShader=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["anyHitShader"];
[&](){member.anyHitShader=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["intersectionShader"];
[&](){member.intersectionShader=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRayTracingShaderGroupCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRayTracingShaderGroupCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRayTracingShaderGroupCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["generalShader"];
[&](){json_value=member.generalShader;}();
auto& json_value=json["closestHitShader"];
[&](){json_value=member.closestHitShader;}();
auto& json_value=json["anyHitShader"];
[&](){json_value=member.anyHitShader;}();
auto& json_value=json["intersectionShader"];
[&](){json_value=member.intersectionShader;}();
auto& json_value=json["pShaderGroupCaptureReplayHandle"];
[&](){
            if (member.pShaderGroupCaptureReplayHandle==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pShaderGroupCaptureReplayHandle)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int vaFpFFZ=0; vaFpFFZ < strlen((char*)(member.pShaderGroupCaptureReplayHandle))+1; vaFpFFZ++){
            [&](){json_value[vaFpFFZ]=(char*)(member.pShaderGroupCaptureReplayHandle)[vaFpFFZ];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkRayTracingShaderGroupCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkRayTracingShaderGroupTypeKHR temp_gYkQVup[&](){temp_gYkQVup=static_cast<int>(value_to<int>(json_value));}();member.type=(VkRayTracingShaderGroupTypeKHR)temp_gYkQVup;}();}();
auto& json_value=json["generalShader"];
[&](){member.generalShader=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["closestHitShader"];
[&](){member.closestHitShader=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["anyHitShader"];
[&](){member.anyHitShader=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["intersectionShader"];
[&](){member.intersectionShader=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pShaderGroupCaptureReplayHandle"];
[&](){ void* temp_lEgunrI[&](){
            if (!json_value.as_array().size()==0){
                temp_lEgunrI=NULL;
            return; }char* temp_qcbJDUA;[&](){
            if (!json_value.as_array().size()==0){
                temp_lEgunrI=NULL;
            return; }temp_lEgunrI=(char*)malloc(temp_lEgunrI.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int aGsUsXt=0; aGsUsXt < temp_lEgunrI.as_array().size();; aGsUsXt++){
            [&](){temp_lEgunrI[aGsUsXt]=static_cast<char>(value_to<int>(json_value[aGsUsXt]));}();
        }
        }();temp_lEgunrI=temp_qcbJDUA;}();member.pShaderGroupCaptureReplayHandle=temp_lEgunrI;}();
}

    void serialize_pUserData(object& json, VkRayTracingShaderGroupCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRayTracingShaderGroupCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRayTracingPipelineCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["stageCount"];
[&](){json_value=member.stageCount;}();
auto& json_value=json["pStages"];
[&](){
            if (member.pStages==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto& temp=json_value[jHuRulk].emplace_object();
            return serialize_struct(temp, member.pStages[jHuRulk]);
            }();
        }
        }();
auto& json_value=json["groupCount"];
[&](){json_value=member.groupCount;}();
auto& json_value=json["pGroups"];
[&](){
            if (member.pGroups==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int PfCnxjX=0; PfCnxjX < member.groupCount; PfCnxjX++){
            [&](){
            auto& temp=json_value[PfCnxjX].emplace_object();
            return serialize_struct(temp, member.pGroups[PfCnxjX]);
            }();
        }
        }();
auto& json_value=json["maxRecursionDepth"];
[&](){json_value=member.maxRecursionDepth;}();
auto& json_value=json["layout"];
[&](){serialize_handle(json_value,member.layout);}();
auto& json_value=json["basePipelineHandle"];
[&](){serialize_handle(json_value,member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){json_value=member.basePipelineIndex;}();
}
void deserialize_struct(object& json, VkRayTracingPipelineCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCreateFlags temp_VJehfkc[&](){temp_VJehfkc=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCreateFlags)temp_VJehfkc;}();}();
auto& json_value=json["stageCount"];
[&](){member.stageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStages"];
[&](){ VkPipelineShaderStageCreateInfo* temp_pfZGdpq[&](){
            if (!json_value.as_array().size()==0){
                temp_pfZGdpq=NULL;
            return; }temp_pfZGdpq=(VkPipelineShaderStageCreateInfo*)malloc(member.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto& arr=json_value.as_array();
        for(int XttzcgZ=0; XttzcgZ < member.stageCount; XttzcgZ++){
            [&](){
            auto& temp=json_value[XttzcgZ].as_object();
            deserialize_struct(temp,temp_pfZGdpq[XttzcgZ]);
            }();
        }
        }();member.pStages=temp_pfZGdpq;}();
auto& json_value=json["groupCount"];
[&](){member.groupCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pGroups"];
[&](){ VkRayTracingShaderGroupCreateInfoNV* temp_zHrKGud[&](){
            if (!json_value.as_array().size()==0){
                temp_zHrKGud=NULL;
            return; }temp_zHrKGud=(VkRayTracingShaderGroupCreateInfoNV*)malloc(member.groupCount*sizeof(VkRayTracingShaderGroupCreateInfoNV));
        auto& arr=json_value.as_array();
        for(int gtOdutD=0; gtOdutD < member.groupCount; gtOdutD++){
            [&](){
            auto& temp=json_value[gtOdutD].as_object();
            deserialize_struct(temp,temp_zHrKGud[gtOdutD]);
            }();
        }
        }();member.pGroups=temp_zHrKGud;}();
auto& json_value=json["maxRecursionDepth"];
[&](){member.maxRecursionDepth=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layout"];
[&](){deserialize_handle(json_value, member.layout);}();
auto& json_value=json["basePipelineHandle"];
[&](){deserialize_handle(json_value, member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){member.basePipelineIndex=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRayTracingPipelineCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRayTracingPipelineCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRayTracingPipelineCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["stageCount"];
[&](){json_value=member.stageCount;}();
auto& json_value=json["pStages"];
[&](){
            if (member.pStages==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int jHuRulk=0; jHuRulk < member.stageCount; jHuRulk++){
            [&](){
            auto& temp=json_value[jHuRulk].emplace_object();
            return serialize_struct(temp, member.pStages[jHuRulk]);
            }();
        }
        }();
auto& json_value=json["groupCount"];
[&](){json_value=member.groupCount;}();
auto& json_value=json["pGroups"];
[&](){
            if (member.pGroups==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int zJRUzRJ=0; zJRUzRJ < member.groupCount; zJRUzRJ++){
            [&](){
            auto& temp=json_value[zJRUzRJ].emplace_object();
            return serialize_struct(temp, member.pGroups[zJRUzRJ]);
            }();
        }
        }();
auto& json_value=json["maxPipelineRayRecursionDepth"];
[&](){json_value=member.maxPipelineRayRecursionDepth;}();
auto& json_value=json["pLibraryInfo"];
[&](){
            if (member.pLibraryInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int DdrfJLf=0; DdrfJLf < 1; DdrfJLf++){
            [&](){
            auto& temp=json_value[DdrfJLf].emplace_object();
            return serialize_struct(temp, member.pLibraryInfo[DdrfJLf]);
            }();
        }
        }();
auto& json_value=json["pLibraryInterface"];
[&](){
            if (member.pLibraryInterface==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int mKbYlgK=0; mKbYlgK < 1; mKbYlgK++){
            [&](){
            auto& temp=json_value[mKbYlgK].emplace_object();
            return serialize_struct(temp, member.pLibraryInterface[mKbYlgK]);
            }();
        }
        }();
auto& json_value=json["pDynamicState"];
[&](){
            if (member.pDynamicState==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UhXMcnS=0; UhXMcnS < 1; UhXMcnS++){
            [&](){
            auto& temp=json_value[UhXMcnS].emplace_object();
            return serialize_struct(temp, member.pDynamicState[UhXMcnS]);
            }();
        }
        }();
auto& json_value=json["layout"];
[&](){serialize_handle(json_value,member.layout);}();
auto& json_value=json["basePipelineHandle"];
[&](){serialize_handle(json_value,member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){json_value=member.basePipelineIndex;}();
}
void deserialize_struct(object& json, VkRayTracingPipelineCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCreateFlags temp_VJehfkc[&](){temp_VJehfkc=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCreateFlags)temp_VJehfkc;}();}();
auto& json_value=json["stageCount"];
[&](){member.stageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStages"];
[&](){ VkPipelineShaderStageCreateInfo* temp_pfZGdpq[&](){
            if (!json_value.as_array().size()==0){
                temp_pfZGdpq=NULL;
            return; }temp_pfZGdpq=(VkPipelineShaderStageCreateInfo*)malloc(member.stageCount*sizeof(VkPipelineShaderStageCreateInfo));
        auto& arr=json_value.as_array();
        for(int XttzcgZ=0; XttzcgZ < member.stageCount; XttzcgZ++){
            [&](){
            auto& temp=json_value[XttzcgZ].as_object();
            deserialize_struct(temp,temp_pfZGdpq[XttzcgZ]);
            }();
        }
        }();member.pStages=temp_pfZGdpq;}();
auto& json_value=json["groupCount"];
[&](){member.groupCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pGroups"];
[&](){ VkRayTracingShaderGroupCreateInfoKHR* temp_oUNGsPu[&](){
            if (!json_value.as_array().size()==0){
                temp_oUNGsPu=NULL;
            return; }temp_oUNGsPu=(VkRayTracingShaderGroupCreateInfoKHR*)malloc(member.groupCount*sizeof(VkRayTracingShaderGroupCreateInfoKHR));
        auto& arr=json_value.as_array();
        for(int MsMuUIr=0; MsMuUIr < member.groupCount; MsMuUIr++){
            [&](){
            auto& temp=json_value[MsMuUIr].as_object();
            deserialize_struct(temp,temp_oUNGsPu[MsMuUIr]);
            }();
        }
        }();member.pGroups=temp_oUNGsPu;}();
auto& json_value=json["maxPipelineRayRecursionDepth"];
[&](){member.maxPipelineRayRecursionDepth=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pLibraryInfo"];
[&](){ VkPipelineLibraryCreateInfoKHR* temp_eGVDWeB[&](){
            if (!json_value.as_array().size()==0){
                temp_eGVDWeB=NULL;
            return; }temp_eGVDWeB=(VkPipelineLibraryCreateInfoKHR*)malloc(1*sizeof(VkPipelineLibraryCreateInfoKHR));
        auto& arr=json_value.as_array();
        for(int QEKAhqX=0; QEKAhqX < 1; QEKAhqX++){
            [&](){
            auto& temp=json_value[QEKAhqX].as_object();
            deserialize_struct(temp,temp_eGVDWeB[QEKAhqX]);
            }();
        }
        }();member.pLibraryInfo=temp_eGVDWeB;}();
auto& json_value=json["pLibraryInterface"];
[&](){ VkRayTracingPipelineInterfaceCreateInfoKHR* temp_PFNRuCj[&](){
            if (!json_value.as_array().size()==0){
                temp_PFNRuCj=NULL;
            return; }temp_PFNRuCj=(VkRayTracingPipelineInterfaceCreateInfoKHR*)malloc(1*sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR));
        auto& arr=json_value.as_array();
        for(int NuMUcpj=0; NuMUcpj < 1; NuMUcpj++){
            [&](){
            auto& temp=json_value[NuMUcpj].as_object();
            deserialize_struct(temp,temp_PFNRuCj[NuMUcpj]);
            }();
        }
        }();member.pLibraryInterface=temp_PFNRuCj;}();
auto& json_value=json["pDynamicState"];
[&](){ VkPipelineDynamicStateCreateInfo* temp_aXXcKaH[&](){
            if (!json_value.as_array().size()==0){
                temp_aXXcKaH=NULL;
            return; }temp_aXXcKaH=(VkPipelineDynamicStateCreateInfo*)malloc(1*sizeof(VkPipelineDynamicStateCreateInfo));
        auto& arr=json_value.as_array();
        for(int tTovUVg=0; tTovUVg < 1; tTovUVg++){
            [&](){
            auto& temp=json_value[tTovUVg].as_object();
            deserialize_struct(temp,temp_aXXcKaH[tTovUVg]);
            }();
        }
        }();member.pDynamicState=temp_aXXcKaH;}();
auto& json_value=json["layout"];
[&](){deserialize_handle(json_value, member.layout);}();
auto& json_value=json["basePipelineHandle"];
[&](){deserialize_handle(json_value, member.basePipelineHandle);}();
auto& json_value=json["basePipelineIndex"];
[&](){member.basePipelineIndex=static_cast<int32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRayTracingPipelineCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRayTracingPipelineCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGeometryTrianglesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["vertexData"];
[&](){serialize_handle(json_value,member.vertexData);}();
auto& json_value=json["vertexOffset"];
[&](){[&](){json_value=member.vertexOffset;}();}();
auto& json_value=json["vertexCount"];
[&](){json_value=member.vertexCount;}();
auto& json_value=json["vertexStride"];
[&](){[&](){json_value=member.vertexStride;}();}();
auto& json_value=json["vertexFormat"];
[&](){[&](){[&](){json_value=member.vertexFormat;}();}();}();
auto& json_value=json["indexData"];
[&](){serialize_handle(json_value,member.indexData);}();
auto& json_value=json["indexOffset"];
[&](){[&](){json_value=member.indexOffset;}();}();
auto& json_value=json["indexCount"];
[&](){json_value=member.indexCount;}();
auto& json_value=json["indexType"];
[&](){[&](){[&](){json_value=member.indexType;}();}();}();
auto& json_value=json["transformData"];
[&](){serialize_handle(json_value,member.transformData);}();
auto& json_value=json["transformOffset"];
[&](){[&](){json_value=member.transformOffset;}();}();
}
void deserialize_struct(object& json, VkGeometryTrianglesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["vertexData"];
[&](){deserialize_handle(json_value, member.vertexData);}();
auto& json_value=json["vertexOffset"];
[&](){[&](){member.vertexOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vertexCount"];
[&](){member.vertexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vertexStride"];
[&](){[&](){member.vertexStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vertexFormat"];
[&](){[&](){VkFormat temp_BjrHjGA[&](){temp_BjrHjGA=static_cast<int>(value_to<int>(json_value));}();member.vertexFormat=(VkFormat)temp_BjrHjGA;}();}();
auto& json_value=json["indexData"];
[&](){deserialize_handle(json_value, member.indexData);}();
auto& json_value=json["indexOffset"];
[&](){[&](){member.indexOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["indexCount"];
[&](){member.indexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["indexType"];
[&](){[&](){VkIndexType temp_oHMXYuj[&](){temp_oHMXYuj=static_cast<int>(value_to<int>(json_value));}();member.indexType=(VkIndexType)temp_oHMXYuj;}();}();
auto& json_value=json["transformData"];
[&](){deserialize_handle(json_value, member.transformData);}();
auto& json_value=json["transformOffset"];
[&](){[&](){member.transformOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkGeometryTrianglesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGeometryTrianglesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGeometryAABBNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["aabbData"];
[&](){serialize_handle(json_value,member.aabbData);}();
auto& json_value=json["numAABBs"];
[&](){json_value=member.numAABBs;}();
auto& json_value=json["stride"];
[&](){json_value=member.stride;}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
}
void deserialize_struct(object& json, VkGeometryAABBNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["aabbData"];
[&](){deserialize_handle(json_value, member.aabbData);}();
auto& json_value=json["numAABBs"];
[&](){member.numAABBs=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["stride"];
[&](){member.stride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkGeometryAABBNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGeometryAABBNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGeometryDataNV& member){
        
    
auto& json_value=json["triangles"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.triangles);
            }();
auto& json_value=json["aabbs"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.aabbs);
            }();
}
void deserialize_struct(object& json, VkGeometryDataNV& member){
auto& json_value=json["triangles"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.triangles);
            }();
auto& json_value=json["aabbs"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.aabbs);
            }();
}

    void serialize_pUserData(object& json, VkGeometryDataNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGeometryDataNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGeometryNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["geometryType"];
[&](){[&](){[&](){json_value=member.geometryType;}();}();}();
auto& json_value=json["geometry"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.geometry);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkGeometryNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["geometryType"];
[&](){[&](){VkGeometryTypeKHR temp_SVgXqXU[&](){temp_SVgXqXU=static_cast<int>(value_to<int>(json_value));}();member.geometryType=(VkGeometryTypeKHR)temp_SVgXqXU;}();}();
auto& json_value=json["geometry"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.geometry);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkGeometryFlagsKHR temp_DeoBIwl[&](){temp_DeoBIwl=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkGeometryFlagsKHR)temp_DeoBIwl;}();}();
}

    void serialize_pUserData(object& json, VkGeometryNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGeometryNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["instanceCount"];
[&](){json_value=member.instanceCount;}();
auto& json_value=json["geometryCount"];
[&](){json_value=member.geometryCount;}();
auto& json_value=json["pGeometries"];
[&](){
            if (member.pGeometries==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int qVtknfQ=0; qVtknfQ < member.geometryCount; qVtknfQ++){
            [&](){
            auto& temp=json_value[qVtknfQ].emplace_object();
            return serialize_struct(temp, member.pGeometries[qVtknfQ]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkAccelerationStructureInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkAccelerationStructureTypeNV temp_klWitZq[&](){temp_klWitZq=static_cast<int>(value_to<int>(json_value));}();member.type=(VkAccelerationStructureTypeNV)temp_klWitZq;}();}();
auto& json_value=json["flags"];
[&](){[&](){VkBuildAccelerationStructureFlagsNV temp_nmBogws[&](){temp_nmBogws=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkBuildAccelerationStructureFlagsNV)temp_nmBogws;}();}();
auto& json_value=json["instanceCount"];
[&](){member.instanceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["geometryCount"];
[&](){member.geometryCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pGeometries"];
[&](){ VkGeometryNV* temp_gwVFqRx[&](){
            if (!json_value.as_array().size()==0){
                temp_gwVFqRx=NULL;
            return; }temp_gwVFqRx=(VkGeometryNV*)malloc(member.geometryCount*sizeof(VkGeometryNV));
        auto& arr=json_value.as_array();
        for(int TTzXkkB=0; TTzXkkB < member.geometryCount; TTzXkkB++){
            [&](){
            auto& temp=json_value[TTzXkkB].as_object();
            deserialize_struct(temp,temp_gwVFqRx[TTzXkkB]);
            }();
        }
        }();member.pGeometries=temp_gwVFqRx;}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["compactedSize"];
[&](){[&](){json_value=member.compactedSize;}();}();
auto& json_value=json["info"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.info);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["compactedSize"];
[&](){[&](){member.compactedSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["info"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.info);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindAccelerationStructureMemoryInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["accelerationStructure"];
[&](){serialize_handle(json_value,member.accelerationStructure);}();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){json_value=member.memoryOffset;}();}();
auto& json_value=json["deviceIndexCount"];
[&](){json_value=member.deviceIndexCount;}();
auto& json_value=json["pDeviceIndices"];
[&](){
            if (member.pDeviceIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lNKjpBY=0; lNKjpBY < member.deviceIndexCount; lNKjpBY++){
            [&](){json_value[lNKjpBY]=member.pDeviceIndices[lNKjpBY];}();
        }
        }();
}
void deserialize_struct(object& json, VkBindAccelerationStructureMemoryInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["accelerationStructure"];
[&](){deserialize_handle(json_value, member.accelerationStructure);}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){member.memoryOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["deviceIndexCount"];
[&](){member.deviceIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDeviceIndices"];
[&](){ uint32_t* temp_AdsIqXQ[&](){
            if (!json_value.as_array().size()==0){
                temp_AdsIqXQ=NULL;
            return; }temp_AdsIqXQ=(uint32_t*)malloc(member.deviceIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int CQTEfmn=0; CQTEfmn < member.deviceIndexCount; CQTEfmn++){
            [&](){temp_AdsIqXQ[CQTEfmn]=static_cast<uint32_t>(value_to<int>(json_value[CQTEfmn]));}();
        }
        }();member.pDeviceIndices=temp_AdsIqXQ;}();
}

    void serialize_pUserData(object& json, VkBindAccelerationStructureMemoryInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindAccelerationStructureMemoryInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkWriteDescriptorSetAccelerationStructureKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["accelerationStructureCount"];
[&](){json_value=member.accelerationStructureCount;}();
auto& json_value=json["pAccelerationStructures"];
[&](){
            if (member.pAccelerationStructures==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lMRNMMP=0; lMRNMMP < member.accelerationStructureCount; lMRNMMP++){
            [&](){serialize_handle(json_value[lMRNMMP],member.pAccelerationStructures[lMRNMMP]);}();
        }
        }();
}
void deserialize_struct(object& json, VkWriteDescriptorSetAccelerationStructureKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["accelerationStructureCount"];
[&](){member.accelerationStructureCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAccelerationStructures"];
[&](){ VkAccelerationStructureKHR* temp_mGnsBJS[&](){
            if (!json_value.as_array().size()==0){
                temp_mGnsBJS=NULL;
            return; }temp_mGnsBJS=(VkAccelerationStructureKHR*)malloc(member.accelerationStructureCount*sizeof(VkAccelerationStructureKHR));
        auto& arr=json_value.as_array();
        for(int YTGbDyo=0; YTGbDyo < member.accelerationStructureCount; YTGbDyo++){
            [&](){deserialize_handle(json_value[YTGbDyo], temp_mGnsBJS[YTGbDyo]);}();
        }
        }();member.pAccelerationStructures=temp_mGnsBJS;}();
}

    void serialize_pUserData(object& json, VkWriteDescriptorSetAccelerationStructureKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkWriteDescriptorSetAccelerationStructureKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkWriteDescriptorSetAccelerationStructureNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["accelerationStructureCount"];
[&](){json_value=member.accelerationStructureCount;}();
auto& json_value=json["pAccelerationStructures"];
[&](){
            if (member.pAccelerationStructures==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int BJXIzdF=0; BJXIzdF < member.accelerationStructureCount; BJXIzdF++){
            [&](){serialize_handle(json_value[BJXIzdF],member.pAccelerationStructures[BJXIzdF]);}();
        }
        }();
}
void deserialize_struct(object& json, VkWriteDescriptorSetAccelerationStructureNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["accelerationStructureCount"];
[&](){member.accelerationStructureCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAccelerationStructures"];
[&](){ VkAccelerationStructureNV* temp_IZGvCfH[&](){
            if (!json_value.as_array().size()==0){
                temp_IZGvCfH=NULL;
            return; }temp_IZGvCfH=(VkAccelerationStructureNV*)malloc(member.accelerationStructureCount*sizeof(VkAccelerationStructureNV));
        auto& arr=json_value.as_array();
        for(int AvXgXgJ=0; AvXgXgJ < member.accelerationStructureCount; AvXgXgJ++){
            [&](){deserialize_handle(json_value[AvXgXgJ], temp_IZGvCfH[AvXgXgJ]);}();
        }
        }();member.pAccelerationStructures=temp_IZGvCfH;}();
}

    void serialize_pUserData(object& json, VkWriteDescriptorSetAccelerationStructureNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkWriteDescriptorSetAccelerationStructureNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureMemoryRequirementsInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["accelerationStructure"];
[&](){serialize_handle(json_value,member.accelerationStructure);}();
}
void deserialize_struct(object& json, VkAccelerationStructureMemoryRequirementsInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkAccelerationStructureMemoryRequirementsTypeNV temp_ZSHyxfQ[&](){temp_ZSHyxfQ=static_cast<int>(value_to<int>(json_value));}();member.type=(VkAccelerationStructureMemoryRequirementsTypeNV)temp_ZSHyxfQ;}();}();
auto& json_value=json["accelerationStructure"];
[&](){deserialize_handle(json_value, member.accelerationStructure);}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureMemoryRequirementsInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureMemoryRequirementsInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceAccelerationStructureFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["accelerationStructure"];
[&](){[&](){json_value=member.accelerationStructure;}();}();
auto& json_value=json["accelerationStructureCaptureReplay"];
[&](){[&](){json_value=member.accelerationStructureCaptureReplay;}();}();
auto& json_value=json["accelerationStructureIndirectBuild"];
[&](){[&](){json_value=member.accelerationStructureIndirectBuild;}();}();
auto& json_value=json["accelerationStructureHostCommands"];
[&](){[&](){json_value=member.accelerationStructureHostCommands;}();}();
auto& json_value=json["descriptorBindingAccelerationStructureUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingAccelerationStructureUpdateAfterBind;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceAccelerationStructureFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["accelerationStructure"];
[&](){[&](){member.accelerationStructure=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["accelerationStructureCaptureReplay"];
[&](){[&](){member.accelerationStructureCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["accelerationStructureIndirectBuild"];
[&](){[&](){member.accelerationStructureIndirectBuild=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["accelerationStructureHostCommands"];
[&](){[&](){member.accelerationStructureHostCommands=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingAccelerationStructureUpdateAfterBind"];
[&](){[&](){member.descriptorBindingAccelerationStructureUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceAccelerationStructureFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceAccelerationStructureFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingPipelineFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rayTracingPipeline"];
[&](){[&](){json_value=member.rayTracingPipeline;}();}();
auto& json_value=json["rayTracingPipelineShaderGroupHandleCaptureReplay"];
[&](){[&](){json_value=member.rayTracingPipelineShaderGroupHandleCaptureReplay;}();}();
auto& json_value=json["rayTracingPipelineShaderGroupHandleCaptureReplayMixed"];
[&](){[&](){json_value=member.rayTracingPipelineShaderGroupHandleCaptureReplayMixed;}();}();
auto& json_value=json["rayTracingPipelineTraceRaysIndirect"];
[&](){[&](){json_value=member.rayTracingPipelineTraceRaysIndirect;}();}();
auto& json_value=json["rayTraversalPrimitiveCulling"];
[&](){[&](){json_value=member.rayTraversalPrimitiveCulling;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingPipelineFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rayTracingPipeline"];
[&](){[&](){member.rayTracingPipeline=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rayTracingPipelineShaderGroupHandleCaptureReplay"];
[&](){[&](){member.rayTracingPipelineShaderGroupHandleCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rayTracingPipelineShaderGroupHandleCaptureReplayMixed"];
[&](){[&](){member.rayTracingPipelineShaderGroupHandleCaptureReplayMixed=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rayTracingPipelineTraceRaysIndirect"];
[&](){[&](){member.rayTracingPipelineTraceRaysIndirect=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rayTraversalPrimitiveCulling"];
[&](){[&](){member.rayTraversalPrimitiveCulling=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingPipelineFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingPipelineFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayQueryFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rayQuery"];
[&](){[&](){json_value=member.rayQuery;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayQueryFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rayQuery"];
[&](){[&](){member.rayQuery=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayQueryFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayQueryFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceAccelerationStructurePropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxGeometryCount"];
[&](){json_value=member.maxGeometryCount;}();
auto& json_value=json["maxInstanceCount"];
[&](){json_value=member.maxInstanceCount;}();
auto& json_value=json["maxPrimitiveCount"];
[&](){json_value=member.maxPrimitiveCount;}();
auto& json_value=json["maxPerStageDescriptorAccelerationStructures"];
[&](){json_value=member.maxPerStageDescriptorAccelerationStructures;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindAccelerationStructures"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindAccelerationStructures;}();
auto& json_value=json["maxDescriptorSetAccelerationStructures"];
[&](){json_value=member.maxDescriptorSetAccelerationStructures;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindAccelerationStructures"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindAccelerationStructures;}();
auto& json_value=json["minAccelerationStructureScratchOffsetAlignment"];
[&](){json_value=member.minAccelerationStructureScratchOffsetAlignment;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceAccelerationStructurePropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxGeometryCount"];
[&](){member.maxGeometryCount=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["maxInstanceCount"];
[&](){member.maxInstanceCount=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPrimitiveCount"];
[&](){member.maxPrimitiveCount=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorAccelerationStructures"];
[&](){member.maxPerStageDescriptorAccelerationStructures=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindAccelerationStructures"];
[&](){member.maxPerStageDescriptorUpdateAfterBindAccelerationStructures=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetAccelerationStructures"];
[&](){member.maxDescriptorSetAccelerationStructures=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindAccelerationStructures"];
[&](){member.maxDescriptorSetUpdateAfterBindAccelerationStructures=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minAccelerationStructureScratchOffsetAlignment"];
[&](){member.minAccelerationStructureScratchOffsetAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceAccelerationStructurePropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceAccelerationStructurePropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingPipelinePropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderGroupHandleSize"];
[&](){json_value=member.shaderGroupHandleSize;}();
auto& json_value=json["maxRayRecursionDepth"];
[&](){json_value=member.maxRayRecursionDepth;}();
auto& json_value=json["maxShaderGroupStride"];
[&](){json_value=member.maxShaderGroupStride;}();
auto& json_value=json["shaderGroupBaseAlignment"];
[&](){json_value=member.shaderGroupBaseAlignment;}();
auto& json_value=json["shaderGroupHandleCaptureReplaySize"];
[&](){json_value=member.shaderGroupHandleCaptureReplaySize;}();
auto& json_value=json["maxRayDispatchInvocationCount"];
[&](){json_value=member.maxRayDispatchInvocationCount;}();
auto& json_value=json["shaderGroupHandleAlignment"];
[&](){json_value=member.shaderGroupHandleAlignment;}();
auto& json_value=json["maxRayHitAttributeSize"];
[&](){json_value=member.maxRayHitAttributeSize;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingPipelinePropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderGroupHandleSize"];
[&](){member.shaderGroupHandleSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxRayRecursionDepth"];
[&](){member.maxRayRecursionDepth=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxShaderGroupStride"];
[&](){member.maxShaderGroupStride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderGroupBaseAlignment"];
[&](){member.shaderGroupBaseAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderGroupHandleCaptureReplaySize"];
[&](){member.shaderGroupHandleCaptureReplaySize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxRayDispatchInvocationCount"];
[&](){member.maxRayDispatchInvocationCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderGroupHandleAlignment"];
[&](){member.shaderGroupHandleAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxRayHitAttributeSize"];
[&](){member.maxRayHitAttributeSize=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingPipelinePropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingPipelinePropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderGroupHandleSize"];
[&](){json_value=member.shaderGroupHandleSize;}();
auto& json_value=json["maxRecursionDepth"];
[&](){json_value=member.maxRecursionDepth;}();
auto& json_value=json["maxShaderGroupStride"];
[&](){json_value=member.maxShaderGroupStride;}();
auto& json_value=json["shaderGroupBaseAlignment"];
[&](){json_value=member.shaderGroupBaseAlignment;}();
auto& json_value=json["maxGeometryCount"];
[&](){json_value=member.maxGeometryCount;}();
auto& json_value=json["maxInstanceCount"];
[&](){json_value=member.maxInstanceCount;}();
auto& json_value=json["maxTriangleCount"];
[&](){json_value=member.maxTriangleCount;}();
auto& json_value=json["maxDescriptorSetAccelerationStructures"];
[&](){json_value=member.maxDescriptorSetAccelerationStructures;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderGroupHandleSize"];
[&](){member.shaderGroupHandleSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxRecursionDepth"];
[&](){member.maxRecursionDepth=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxShaderGroupStride"];
[&](){member.maxShaderGroupStride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderGroupBaseAlignment"];
[&](){member.shaderGroupBaseAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxGeometryCount"];
[&](){member.maxGeometryCount=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["maxInstanceCount"];
[&](){member.maxInstanceCount=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["maxTriangleCount"];
[&](){member.maxTriangleCount=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetAccelerationStructures"];
[&](){member.maxDescriptorSetAccelerationStructures=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkStridedDeviceAddressRegionKHR& member){
        
    
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
auto& json_value=json["stride"];
[&](){[&](){json_value=member.stride;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkStridedDeviceAddressRegionKHR& member){
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["stride"];
[&](){[&](){member.stride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkStridedDeviceAddressRegionKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkStridedDeviceAddressRegionKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkTraceRaysIndirectCommandKHR& member){
        
    
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
auto& json_value=json["depth"];
[&](){json_value=member.depth;}();
}
void deserialize_struct(object& json, VkTraceRaysIndirectCommandKHR& member){
auto& json_value=json["width"];
[&](){member.width=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["depth"];
[&](){member.depth=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkTraceRaysIndirectCommandKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkTraceRaysIndirectCommandKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkTraceRaysIndirectCommand2KHR& member){
        
    
auto& json_value=json["raygenShaderRecordAddress"];
[&](){[&](){json_value=member.raygenShaderRecordAddress;}();}();
auto& json_value=json["raygenShaderRecordSize"];
[&](){[&](){json_value=member.raygenShaderRecordSize;}();}();
auto& json_value=json["missShaderBindingTableAddress"];
[&](){[&](){json_value=member.missShaderBindingTableAddress;}();}();
auto& json_value=json["missShaderBindingTableSize"];
[&](){[&](){json_value=member.missShaderBindingTableSize;}();}();
auto& json_value=json["missShaderBindingTableStride"];
[&](){[&](){json_value=member.missShaderBindingTableStride;}();}();
auto& json_value=json["hitShaderBindingTableAddress"];
[&](){[&](){json_value=member.hitShaderBindingTableAddress;}();}();
auto& json_value=json["hitShaderBindingTableSize"];
[&](){[&](){json_value=member.hitShaderBindingTableSize;}();}();
auto& json_value=json["hitShaderBindingTableStride"];
[&](){[&](){json_value=member.hitShaderBindingTableStride;}();}();
auto& json_value=json["callableShaderBindingTableAddress"];
[&](){[&](){json_value=member.callableShaderBindingTableAddress;}();}();
auto& json_value=json["callableShaderBindingTableSize"];
[&](){[&](){json_value=member.callableShaderBindingTableSize;}();}();
auto& json_value=json["callableShaderBindingTableStride"];
[&](){[&](){json_value=member.callableShaderBindingTableStride;}();}();
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
auto& json_value=json["depth"];
[&](){json_value=member.depth;}();
}
void deserialize_struct(object& json, VkTraceRaysIndirectCommand2KHR& member){
auto& json_value=json["raygenShaderRecordAddress"];
[&](){[&](){member.raygenShaderRecordAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["raygenShaderRecordSize"];
[&](){[&](){member.raygenShaderRecordSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["missShaderBindingTableAddress"];
[&](){[&](){member.missShaderBindingTableAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["missShaderBindingTableSize"];
[&](){[&](){member.missShaderBindingTableSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["missShaderBindingTableStride"];
[&](){[&](){member.missShaderBindingTableStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["hitShaderBindingTableAddress"];
[&](){[&](){member.hitShaderBindingTableAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["hitShaderBindingTableSize"];
[&](){[&](){member.hitShaderBindingTableSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["hitShaderBindingTableStride"];
[&](){[&](){member.hitShaderBindingTableStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["callableShaderBindingTableAddress"];
[&](){[&](){member.callableShaderBindingTableAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["callableShaderBindingTableSize"];
[&](){[&](){member.callableShaderBindingTableSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["callableShaderBindingTableStride"];
[&](){[&](){member.callableShaderBindingTableStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["width"];
[&](){member.width=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["depth"];
[&](){member.depth=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkTraceRaysIndirectCommand2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkTraceRaysIndirectCommand2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rayTracingMaintenance1"];
[&](){[&](){json_value=member.rayTracingMaintenance1;}();}();
auto& json_value=json["rayTracingPipelineTraceRaysIndirect2"];
[&](){[&](){json_value=member.rayTracingPipelineTraceRaysIndirect2;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rayTracingMaintenance1"];
[&](){[&](){member.rayTracingMaintenance1=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rayTracingPipelineTraceRaysIndirect2"];
[&](){[&](){member.rayTracingPipelineTraceRaysIndirect2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrmFormatModifierPropertiesListEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["drmFormatModifierCount"];
[&](){json_value=member.drmFormatModifierCount;}();
auto& json_value=json["pDrmFormatModifierProperties"];
[&](){
            if (member.pDrmFormatModifierProperties==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ZzracqV=0; ZzracqV < member.drmFormatModifierCount; ZzracqV++){
            [&](){
            auto& temp=json_value[ZzracqV].emplace_object();
            return serialize_struct(temp, member.pDrmFormatModifierProperties[ZzracqV]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDrmFormatModifierPropertiesListEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["drmFormatModifierCount"];
[&](){member.drmFormatModifierCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDrmFormatModifierProperties"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pDrmFormatModifierProperties=NULL;
            return; }member.pDrmFormatModifierProperties=(VkDrmFormatModifierPropertiesEXT*)malloc(member.drmFormatModifierCount*sizeof(VkDrmFormatModifierPropertiesEXT));
        auto& arr=json_value.as_array();
        for(int ZzracqV=0; ZzracqV < member.drmFormatModifierCount; ZzracqV++){
            [&](){
            auto& temp=json_value[ZzracqV].as_object();
            deserialize_struct(temp,member.pDrmFormatModifierProperties[ZzracqV]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkDrmFormatModifierPropertiesListEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrmFormatModifierPropertiesListEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrmFormatModifierPropertiesEXT& member){
        
    
auto& json_value=json["drmFormatModifier"];
[&](){json_value=member.drmFormatModifier;}();
auto& json_value=json["drmFormatModifierPlaneCount"];
[&](){json_value=member.drmFormatModifierPlaneCount;}();
auto& json_value=json["drmFormatModifierTilingFeatures"];
[&](){[&](){[&](){json_value=member.drmFormatModifierTilingFeatures;}();}();}();
}
void deserialize_struct(object& json, VkDrmFormatModifierPropertiesEXT& member){
auto& json_value=json["drmFormatModifier"];
[&](){member.drmFormatModifier=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["drmFormatModifierPlaneCount"];
[&](){member.drmFormatModifierPlaneCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["drmFormatModifierTilingFeatures"];
[&](){[&](){VkFormatFeatureFlags temp_Ojcwqog[&](){temp_Ojcwqog=static_cast<int>(value_to<int>(json_value));}();member.drmFormatModifierTilingFeatures=(VkFormatFeatureFlags)temp_Ojcwqog;}();}();
}

    void serialize_pUserData(object& json, VkDrmFormatModifierPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrmFormatModifierPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageDrmFormatModifierInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["drmFormatModifier"];
[&](){json_value=member.drmFormatModifier;}();
auto& json_value=json["sharingMode"];
[&](){[&](){[&](){json_value=member.sharingMode;}();}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){json_value=member.queueFamilyIndexCount;}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){
            if (member.pQueueFamilyIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rqZQqua=0; rqZQqua < member.queueFamilyIndexCount; rqZQqua++){
            [&](){json_value[rqZQqua]=member.pQueueFamilyIndices[rqZQqua];}();
        }
        }();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageDrmFormatModifierInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["drmFormatModifier"];
[&](){member.drmFormatModifier=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["sharingMode"];
[&](){[&](){VkSharingMode temp_EIYFEAs[&](){temp_EIYFEAs=static_cast<int>(value_to<int>(json_value));}();member.sharingMode=(VkSharingMode)temp_EIYFEAs;}();}();
auto& json_value=json["queueFamilyIndexCount"];
[&](){member.queueFamilyIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pQueueFamilyIndices"];
[&](){ uint32_t* temp_uPDeaNU[&](){
            if (!json_value.as_array().size()==0){
                temp_uPDeaNU=NULL;
            return; }temp_uPDeaNU=(uint32_t*)malloc(member.queueFamilyIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int JEqKTnG=0; JEqKTnG < member.queueFamilyIndexCount; JEqKTnG++){
            [&](){temp_uPDeaNU[JEqKTnG]=static_cast<uint32_t>(value_to<int>(json_value[JEqKTnG]));}();
        }
        }();member.pQueueFamilyIndices=temp_uPDeaNU;}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageDrmFormatModifierInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageDrmFormatModifierInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageDrmFormatModifierListCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["drmFormatModifierCount"];
[&](){json_value=member.drmFormatModifierCount;}();
auto& json_value=json["pDrmFormatModifiers"];
[&](){
            if (member.pDrmFormatModifiers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int XtcCAFc=0; XtcCAFc < member.drmFormatModifierCount; XtcCAFc++){
            [&](){json_value[XtcCAFc]=member.pDrmFormatModifiers[XtcCAFc];}();
        }
        }();
}
void deserialize_struct(object& json, VkImageDrmFormatModifierListCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["drmFormatModifierCount"];
[&](){member.drmFormatModifierCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDrmFormatModifiers"];
[&](){ uint64_t* temp_gVdJeeD[&](){
            if (!json_value.as_array().size()==0){
                temp_gVdJeeD=NULL;
            return; }temp_gVdJeeD=(uint64_t*)malloc(member.drmFormatModifierCount*sizeof(uint64_t));
        auto& arr=json_value.as_array();
        for(int taWquMu=0; taWquMu < member.drmFormatModifierCount; taWquMu++){
            [&](){temp_gVdJeeD[taWquMu]=static_cast<uint64_t>(value_to<int>(json_value[taWquMu]));}();
        }
        }();member.pDrmFormatModifiers=temp_gVdJeeD;}();
}

    void serialize_pUserData(object& json, VkImageDrmFormatModifierListCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageDrmFormatModifierListCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageDrmFormatModifierExplicitCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["drmFormatModifier"];
[&](){json_value=member.drmFormatModifier;}();
auto& json_value=json["drmFormatModifierPlaneCount"];
[&](){json_value=member.drmFormatModifierPlaneCount;}();
auto& json_value=json["pPlaneLayouts"];
[&](){
            if (member.pPlaneLayouts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rPoQfMt=0; rPoQfMt < member.drmFormatModifierPlaneCount; rPoQfMt++){
            [&](){
            auto& temp=json_value[rPoQfMt].emplace_object();
            return serialize_struct(temp, member.pPlaneLayouts[rPoQfMt]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkImageDrmFormatModifierExplicitCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["drmFormatModifier"];
[&](){member.drmFormatModifier=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["drmFormatModifierPlaneCount"];
[&](){member.drmFormatModifierPlaneCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPlaneLayouts"];
[&](){ VkSubresourceLayout* temp_wQTONBk[&](){
            if (!json_value.as_array().size()==0){
                temp_wQTONBk=NULL;
            return; }temp_wQTONBk=(VkSubresourceLayout*)malloc(member.drmFormatModifierPlaneCount*sizeof(VkSubresourceLayout));
        auto& arr=json_value.as_array();
        for(int sDRKXGQ=0; sDRKXGQ < member.drmFormatModifierPlaneCount; sDRKXGQ++){
            [&](){
            auto& temp=json_value[sDRKXGQ].as_object();
            deserialize_struct(temp,temp_wQTONBk[sDRKXGQ]);
            }();
        }
        }();member.pPlaneLayouts=temp_wQTONBk;}();
}

    void serialize_pUserData(object& json, VkImageDrmFormatModifierExplicitCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageDrmFormatModifierExplicitCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageDrmFormatModifierPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["drmFormatModifier"];
[&](){json_value=member.drmFormatModifier;}();
}
void deserialize_struct(object& json, VkImageDrmFormatModifierPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["drmFormatModifier"];
[&](){member.drmFormatModifier=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImageDrmFormatModifierPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageDrmFormatModifierPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageStencilUsageCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stencilUsage"];
[&](){[&](){[&](){json_value=member.stencilUsage;}();}();}();
}
void deserialize_struct(object& json, VkImageStencilUsageCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["stencilUsage"];
[&](){[&](){VkImageUsageFlags temp_hwDClCR[&](){temp_hwDClCR=static_cast<int>(value_to<int>(json_value));}();member.stencilUsage=(VkImageUsageFlags)temp_hwDClCR;}();}();
}

    void serialize_pUserData(object& json, VkImageStencilUsageCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageStencilUsageCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceMemoryOverallocationCreateInfoAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["overallocationBehavior"];
[&](){[&](){[&](){json_value=member.overallocationBehavior;}();}();}();
}
void deserialize_struct(object& json, VkDeviceMemoryOverallocationCreateInfoAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["overallocationBehavior"];
[&](){[&](){VkMemoryOverallocationBehaviorAMD temp_slbxYTh[&](){temp_slbxYTh=static_cast<int>(value_to<int>(json_value));}();member.overallocationBehavior=(VkMemoryOverallocationBehaviorAMD)temp_slbxYTh;}();}();
}

    void serialize_pUserData(object& json, VkDeviceMemoryOverallocationCreateInfoAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceMemoryOverallocationCreateInfoAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentDensityMap"];
[&](){[&](){json_value=member.fragmentDensityMap;}();}();
auto& json_value=json["fragmentDensityMapDynamic"];
[&](){[&](){json_value=member.fragmentDensityMapDynamic;}();}();
auto& json_value=json["fragmentDensityMapNonSubsampledImages"];
[&](){[&](){json_value=member.fragmentDensityMapNonSubsampledImages;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["fragmentDensityMap"];
[&](){[&](){member.fragmentDensityMap=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentDensityMapDynamic"];
[&](){[&](){member.fragmentDensityMapDynamic=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentDensityMapNonSubsampledImages"];
[&](){[&](){member.fragmentDensityMapNonSubsampledImages=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentDensityMapDeferred"];
[&](){[&](){json_value=member.fragmentDensityMapDeferred;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["fragmentDensityMapDeferred"];
[&](){[&](){member.fragmentDensityMapDeferred=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentDensityMapOffset"];
[&](){[&](){json_value=member.fragmentDensityMapOffset;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["fragmentDensityMapOffset"];
[&](){[&](){member.fragmentDensityMapOffset=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minFragmentDensityTexelSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minFragmentDensityTexelSize);
            }();
auto& json_value=json["maxFragmentDensityTexelSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxFragmentDensityTexelSize);
            }();
auto& json_value=json["fragmentDensityInvocations"];
[&](){[&](){json_value=member.fragmentDensityInvocations;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["minFragmentDensityTexelSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minFragmentDensityTexelSize);
            }();
auto& json_value=json["maxFragmentDensityTexelSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxFragmentDensityTexelSize);
            }();
auto& json_value=json["fragmentDensityInvocations"];
[&](){[&](){member.fragmentDensityInvocations=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["subsampledLoads"];
[&](){[&](){json_value=member.subsampledLoads;}();}();
auto& json_value=json["subsampledCoarseReconstructionEarlyAccess"];
[&](){[&](){json_value=member.subsampledCoarseReconstructionEarlyAccess;}();}();
auto& json_value=json["maxSubsampledArrayLayers"];
[&](){json_value=member.maxSubsampledArrayLayers;}();
auto& json_value=json["maxDescriptorSetSubsampledSamplers"];
[&](){json_value=member.maxDescriptorSetSubsampledSamplers;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["subsampledLoads"];
[&](){[&](){member.subsampledLoads=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["subsampledCoarseReconstructionEarlyAccess"];
[&](){[&](){member.subsampledCoarseReconstructionEarlyAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxSubsampledArrayLayers"];
[&](){member.maxSubsampledArrayLayers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetSubsampledSamplers"];
[&](){member.maxDescriptorSetSubsampledSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentDensityOffsetGranularity"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.fragmentDensityOffsetGranularity);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["fragmentDensityOffsetGranularity"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.fragmentDensityOffsetGranularity);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassFragmentDensityMapCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentDensityMapAttachment"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.fragmentDensityMapAttachment);
            }();
}
void deserialize_struct(object& json, VkRenderPassFragmentDensityMapCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["fragmentDensityMapAttachment"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.fragmentDensityMapAttachment);
            }();
}

    void serialize_pUserData(object& json, VkRenderPassFragmentDensityMapCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassFragmentDensityMapCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassFragmentDensityMapOffsetEndInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentDensityOffsetCount"];
[&](){json_value=member.fragmentDensityOffsetCount;}();
auto& json_value=json["pFragmentDensityOffsets"];
[&](){
            if (member.pFragmentDensityOffsets==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int lmMXhaF=0; lmMXhaF < member.fragmentDensityOffsetCount; lmMXhaF++){
            [&](){
            auto& temp=json_value[lmMXhaF].emplace_object();
            return serialize_struct(temp, member.pFragmentDensityOffsets[lmMXhaF]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkSubpassFragmentDensityMapOffsetEndInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["fragmentDensityOffsetCount"];
[&](){member.fragmentDensityOffsetCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pFragmentDensityOffsets"];
[&](){ VkOffset2D* temp_Sgbdgbq[&](){
            if (!json_value.as_array().size()==0){
                temp_Sgbdgbq=NULL;
            return; }temp_Sgbdgbq=(VkOffset2D*)malloc(member.fragmentDensityOffsetCount*sizeof(VkOffset2D));
        auto& arr=json_value.as_array();
        for(int rVUrFFp=0; rVUrFFp < member.fragmentDensityOffsetCount; rVUrFFp++){
            [&](){
            auto& temp=json_value[rVUrFFp].as_object();
            deserialize_struct(temp,temp_Sgbdgbq[rVUrFFp]);
            }();
        }
        }();member.pFragmentDensityOffsets=temp_Sgbdgbq;}();
}

    void serialize_pUserData(object& json, VkSubpassFragmentDensityMapOffsetEndInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassFragmentDensityMapOffsetEndInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceScalarBlockLayoutFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["scalarBlockLayout"];
[&](){[&](){json_value=member.scalarBlockLayout;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceScalarBlockLayoutFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["scalarBlockLayout"];
[&](){[&](){member.scalarBlockLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceScalarBlockLayoutFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceScalarBlockLayoutFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfaceProtectedCapabilitiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["supportsProtected"];
[&](){[&](){json_value=member.supportsProtected;}();}();
}
void deserialize_struct(object& json, VkSurfaceProtectedCapabilitiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["supportsProtected"];
[&](){[&](){member.supportsProtected=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSurfaceProtectedCapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfaceProtectedCapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceUniformBufferStandardLayoutFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["uniformBufferStandardLayout"];
[&](){[&](){json_value=member.uniformBufferStandardLayout;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceUniformBufferStandardLayoutFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["uniformBufferStandardLayout"];
[&](){[&](){member.uniformBufferStandardLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceUniformBufferStandardLayoutFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceUniformBufferStandardLayoutFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDepthClipEnableFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["depthClipEnable"];
[&](){[&](){json_value=member.depthClipEnable;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDepthClipEnableFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["depthClipEnable"];
[&](){[&](){member.depthClipEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDepthClipEnableFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDepthClipEnableFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRasterizationDepthClipStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["depthClipEnable"];
[&](){[&](){json_value=member.depthClipEnable;}();}();
}
void deserialize_struct(object& json, VkPipelineRasterizationDepthClipStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineRasterizationDepthClipStateCreateFlagsEXT temp_axrGRnB[&](){temp_axrGRnB=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineRasterizationDepthClipStateCreateFlagsEXT)temp_axrGRnB;}();}();
auto& json_value=json["depthClipEnable"];
[&](){[&](){member.depthClipEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPipelineRasterizationDepthClipStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRasterizationDepthClipStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMemoryBudgetPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["heapBudget"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int WasafRQ=0; WasafRQ < VK_MAX_MEMORY_HEAPS; WasafRQ++){
            [&](){[&](){json_value[WasafRQ]=member.heapBudget[WasafRQ];}();}();
        }
        }();
auto& json_value=json["heapUsage"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int KcTGRVa=0; KcTGRVa < VK_MAX_MEMORY_HEAPS; KcTGRVa++){
            [&](){[&](){json_value[KcTGRVa]=member.heapUsage[KcTGRVa];}();}();
        }
        }();
}
void deserialize_struct(object& json, VkPhysicalDeviceMemoryBudgetPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["heapBudget"];
[&](){
        auto& arr=json_value.as_array();
        for(int WasafRQ=0; WasafRQ < VK_MAX_MEMORY_HEAPS; WasafRQ++){
            [&](){[&](){member.heapBudget[WasafRQ]=static_cast<uint64_t>(value_to<int>(json_value[WasafRQ]));}();}();
        }
        }();
auto& json_value=json["heapUsage"];
[&](){
        auto& arr=json_value.as_array();
        for(int KcTGRVa=0; KcTGRVa < VK_MAX_MEMORY_HEAPS; KcTGRVa++){
            [&](){[&](){member.heapUsage[KcTGRVa]=static_cast<uint64_t>(value_to<int>(json_value[KcTGRVa]));}();}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMemoryBudgetPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMemoryBudgetPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMemoryPriorityFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryPriority"];
[&](){[&](){json_value=member.memoryPriority;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMemoryPriorityFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryPriority"];
[&](){[&](){member.memoryPriority=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMemoryPriorityFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMemoryPriorityFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryPriorityAllocateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["priority"];
[&](){json_value=member.priority;}();
}
void deserialize_struct(object& json, VkMemoryPriorityAllocateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["priority"];
[&](){member.priority=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryPriorityAllocateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryPriorityAllocateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pageableDeviceLocalMemory"];
[&](){[&](){json_value=member.pageableDeviceLocalMemory;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pageableDeviceLocalMemory"];
[&](){[&](){member.pageableDeviceLocalMemory=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceBufferDeviceAddressFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["bufferDeviceAddress"];
[&](){[&](){json_value=member.bufferDeviceAddress;}();}();
auto& json_value=json["bufferDeviceAddressCaptureReplay"];
[&](){[&](){json_value=member.bufferDeviceAddressCaptureReplay;}();}();
auto& json_value=json["bufferDeviceAddressMultiDevice"];
[&](){[&](){json_value=member.bufferDeviceAddressMultiDevice;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceBufferDeviceAddressFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["bufferDeviceAddress"];
[&](){[&](){member.bufferDeviceAddress=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferDeviceAddressCaptureReplay"];
[&](){[&](){member.bufferDeviceAddressCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferDeviceAddressMultiDevice"];
[&](){[&](){member.bufferDeviceAddressMultiDevice=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceBufferDeviceAddressFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceBufferDeviceAddressFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["bufferDeviceAddress"];
[&](){[&](){json_value=member.bufferDeviceAddress;}();}();
auto& json_value=json["bufferDeviceAddressCaptureReplay"];
[&](){[&](){json_value=member.bufferDeviceAddressCaptureReplay;}();}();
auto& json_value=json["bufferDeviceAddressMultiDevice"];
[&](){[&](){json_value=member.bufferDeviceAddressMultiDevice;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["bufferDeviceAddress"];
[&](){[&](){member.bufferDeviceAddress=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferDeviceAddressCaptureReplay"];
[&](){[&](){member.bufferDeviceAddressCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferDeviceAddressMultiDevice"];
[&](){[&](){member.bufferDeviceAddressMultiDevice=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferDeviceAddressInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
}
void deserialize_struct(object& json, VkBufferDeviceAddressInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
}

    void serialize_pUserData(object& json, VkBufferDeviceAddressInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferDeviceAddressInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferOpaqueCaptureAddressCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["opaqueCaptureAddress"];
[&](){json_value=member.opaqueCaptureAddress;}();
}
void deserialize_struct(object& json, VkBufferOpaqueCaptureAddressCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["opaqueCaptureAddress"];
[&](){member.opaqueCaptureAddress=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkBufferOpaqueCaptureAddressCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferOpaqueCaptureAddressCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferDeviceAddressCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
}
void deserialize_struct(object& json, VkBufferDeviceAddressCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBufferDeviceAddressCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferDeviceAddressCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageViewImageFormatInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageViewType"];
[&](){[&](){[&](){json_value=member.imageViewType;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageViewImageFormatInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageViewType"];
[&](){[&](){VkImageViewType temp_wIxBcXj[&](){temp_wIxBcXj=static_cast<int>(value_to<int>(json_value));}();member.imageViewType=(VkImageViewType)temp_wIxBcXj;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageViewImageFormatInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageViewImageFormatInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFilterCubicImageViewImageFormatPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["filterCubic"];
[&](){[&](){json_value=member.filterCubic;}();}();
auto& json_value=json["filterCubicMinmax"];
[&](){[&](){json_value=member.filterCubicMinmax;}();}();
}
void deserialize_struct(object& json, VkFilterCubicImageViewImageFormatPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["filterCubic"];
[&](){[&](){member.filterCubic=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["filterCubicMinmax"];
[&](){[&](){member.filterCubicMinmax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkFilterCubicImageViewImageFormatPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFilterCubicImageViewImageFormatPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImagelessFramebufferFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imagelessFramebuffer"];
[&](){[&](){json_value=member.imagelessFramebuffer;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImagelessFramebufferFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imagelessFramebuffer"];
[&](){[&](){member.imagelessFramebuffer=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImagelessFramebufferFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImagelessFramebufferFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFramebufferAttachmentsCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["attachmentImageInfoCount"];
[&](){json_value=member.attachmentImageInfoCount;}();
auto& json_value=json["pAttachmentImageInfos"];
[&](){
            if (member.pAttachmentImageInfos==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int rrcawDd=0; rrcawDd < member.attachmentImageInfoCount; rrcawDd++){
            [&](){
            auto& temp=json_value[rrcawDd].emplace_object();
            return serialize_struct(temp, member.pAttachmentImageInfos[rrcawDd]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkFramebufferAttachmentsCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["attachmentImageInfoCount"];
[&](){member.attachmentImageInfoCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAttachmentImageInfos"];
[&](){ VkFramebufferAttachmentImageInfo* temp_CFgSOiX[&](){
            if (!json_value.as_array().size()==0){
                temp_CFgSOiX=NULL;
            return; }temp_CFgSOiX=(VkFramebufferAttachmentImageInfo*)malloc(member.attachmentImageInfoCount*sizeof(VkFramebufferAttachmentImageInfo));
        auto& arr=json_value.as_array();
        for(int yZGrSaw=0; yZGrSaw < member.attachmentImageInfoCount; yZGrSaw++){
            [&](){
            auto& temp=json_value[yZGrSaw].as_object();
            deserialize_struct(temp,temp_CFgSOiX[yZGrSaw]);
            }();
        }
        }();member.pAttachmentImageInfos=temp_CFgSOiX;}();
}

    void serialize_pUserData(object& json, VkFramebufferAttachmentsCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFramebufferAttachmentsCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFramebufferAttachmentImageInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
auto& json_value=json["layerCount"];
[&](){json_value=member.layerCount;}();
auto& json_value=json["viewFormatCount"];
[&](){json_value=member.viewFormatCount;}();
auto& json_value=json["pViewFormats"];
[&](){
            if (member.pViewFormats==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int JvKPhOq=0; JvKPhOq < member.viewFormatCount; JvKPhOq++){
            [&](){[&](){[&](){json_value[JvKPhOq]=member.pViewFormats[JvKPhOq];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkFramebufferAttachmentImageInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkImageCreateFlags temp_IdOZaju[&](){temp_IdOZaju=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkImageCreateFlags)temp_IdOZaju;}();}();
auto& json_value=json["usage"];
[&](){[&](){VkImageUsageFlags temp_wDutYxX[&](){temp_wDutYxX=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkImageUsageFlags)temp_wDutYxX;}();}();
auto& json_value=json["width"];
[&](){member.width=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["layerCount"];
[&](){member.layerCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["viewFormatCount"];
[&](){member.viewFormatCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewFormats"];
[&](){ VkFormat* temp_kdTEUIK[&](){
            if (!json_value.as_array().size()==0){
                temp_kdTEUIK=NULL;
            return; }temp_kdTEUIK=(VkFormat*)malloc(member.viewFormatCount*sizeof(VkFormat));
        auto& arr=json_value.as_array();
        for(int tWwlFTf=0; tWwlFTf < member.viewFormatCount; tWwlFTf++){
            [&](){[&](){const VkFormat* temp_FxPnjWU[&](){temp_FxPnjWU=static_cast<int>(value_to<int>(json_value[tWwlFTf]));}();temp_kdTEUIK[tWwlFTf]=(VkFormat)temp_FxPnjWU;}();}();
        }
        }();member.pViewFormats=temp_kdTEUIK;}();
}

    void serialize_pUserData(object& json, VkFramebufferAttachmentImageInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFramebufferAttachmentImageInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassAttachmentBeginInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["attachmentCount"];
[&](){json_value=member.attachmentCount;}();
auto& json_value=json["pAttachments"];
[&](){
            if (member.pAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int vjwDzkt=0; vjwDzkt < member.attachmentCount; vjwDzkt++){
            [&](){serialize_handle(json_value[vjwDzkt],member.pAttachments[vjwDzkt]);}();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassAttachmentBeginInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["attachmentCount"];
[&](){member.attachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pAttachments"];
[&](){ VkImageView* temp_YUCPqFy[&](){
            if (!json_value.as_array().size()==0){
                temp_YUCPqFy=NULL;
            return; }temp_YUCPqFy=(VkImageView*)malloc(member.attachmentCount*sizeof(VkImageView));
        auto& arr=json_value.as_array();
        for(int qNVUjmy=0; qNVUjmy < member.attachmentCount; qNVUjmy++){
            [&](){deserialize_handle(json_value[qNVUjmy], temp_YUCPqFy[qNVUjmy]);}();
        }
        }();member.pAttachments=temp_YUCPqFy;}();
}

    void serialize_pUserData(object& json, VkRenderPassAttachmentBeginInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassAttachmentBeginInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTextureCompressionASTCHDRFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["textureCompressionASTC_HDR"];
[&](){[&](){json_value=member.textureCompressionASTC_HDR;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTextureCompressionASTCHDRFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["textureCompressionASTC_HDR"];
[&](){[&](){member.textureCompressionASTC_HDR=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTextureCompressionASTCHDRFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTextureCompressionASTCHDRFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cooperativeMatrix"];
[&](){[&](){json_value=member.cooperativeMatrix;}();}();
auto& json_value=json["cooperativeMatrixRobustBufferAccess"];
[&](){[&](){json_value=member.cooperativeMatrixRobustBufferAccess;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["cooperativeMatrix"];
[&](){[&](){member.cooperativeMatrix=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["cooperativeMatrixRobustBufferAccess"];
[&](){[&](){member.cooperativeMatrixRobustBufferAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cooperativeMatrixSupportedStages"];
[&](){[&](){[&](){json_value=member.cooperativeMatrixSupportedStages;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["cooperativeMatrixSupportedStages"];
[&](){[&](){VkShaderStageFlags temp_fOeQfMa[&](){temp_fOeQfMa=static_cast<int>(value_to<int>(json_value));}();member.cooperativeMatrixSupportedStages=(VkShaderStageFlags)temp_fOeQfMa;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCooperativeMatrixPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["MSize"];
[&](){json_value=member.MSize;}();
auto& json_value=json["NSize"];
[&](){json_value=member.NSize;}();
auto& json_value=json["KSize"];
[&](){json_value=member.KSize;}();
auto& json_value=json["AType"];
[&](){[&](){[&](){json_value=member.AType;}();}();}();
auto& json_value=json["BType"];
[&](){[&](){[&](){json_value=member.BType;}();}();}();
auto& json_value=json["CType"];
[&](){[&](){[&](){json_value=member.CType;}();}();}();
auto& json_value=json["DType"];
[&](){[&](){[&](){json_value=member.DType;}();}();}();
auto& json_value=json["scope"];
[&](){[&](){[&](){json_value=member.scope;}();}();}();
}
void deserialize_struct(object& json, VkCooperativeMatrixPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["MSize"];
[&](){member.MSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["NSize"];
[&](){member.NSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["KSize"];
[&](){member.KSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["AType"];
[&](){[&](){VkComponentTypeNV temp_rNproSt[&](){temp_rNproSt=static_cast<int>(value_to<int>(json_value));}();member.AType=(VkComponentTypeNV)temp_rNproSt;}();}();
auto& json_value=json["BType"];
[&](){[&](){VkComponentTypeNV temp_MeimlaH[&](){temp_MeimlaH=static_cast<int>(value_to<int>(json_value));}();member.BType=(VkComponentTypeNV)temp_MeimlaH;}();}();
auto& json_value=json["CType"];
[&](){[&](){VkComponentTypeNV temp_AgAjqDs[&](){temp_AgAjqDs=static_cast<int>(value_to<int>(json_value));}();member.CType=(VkComponentTypeNV)temp_AgAjqDs;}();}();
auto& json_value=json["DType"];
[&](){[&](){VkComponentTypeNV temp_kZCFaKd[&](){temp_kZCFaKd=static_cast<int>(value_to<int>(json_value));}();member.DType=(VkComponentTypeNV)temp_kZCFaKd;}();}();
auto& json_value=json["scope"];
[&](){[&](){VkScopeNV temp_NFioggb[&](){temp_NFioggb=static_cast<int>(value_to<int>(json_value));}();member.scope=(VkScopeNV)temp_NFioggb;}();}();
}

    void serialize_pUserData(object& json, VkCooperativeMatrixPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCooperativeMatrixPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["ycbcrImageArrays"];
[&](){[&](){json_value=member.ycbcrImageArrays;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["ycbcrImageArrays"];
[&](){[&](){member.ycbcrImageArrays=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewHandleInfoNVX& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageView"];
[&](){serialize_handle(json_value,member.imageView);}();
auto& json_value=json["descriptorType"];
[&](){[&](){[&](){json_value=member.descriptorType;}();}();}();
auto& json_value=json["sampler"];
[&](){serialize_handle(json_value,member.sampler);}();
}
void deserialize_struct(object& json, VkImageViewHandleInfoNVX& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["imageView"];
[&](){deserialize_handle(json_value, member.imageView);}();
auto& json_value=json["descriptorType"];
[&](){[&](){VkDescriptorType temp_xewOskh[&](){temp_xewOskh=static_cast<int>(value_to<int>(json_value));}();member.descriptorType=(VkDescriptorType)temp_xewOskh;}();}();
auto& json_value=json["sampler"];
[&](){deserialize_handle(json_value, member.sampler);}();
}

    void serialize_pUserData(object& json, VkImageViewHandleInfoNVX& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewHandleInfoNVX& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewAddressPropertiesNVX& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkImageViewAddressPropertiesNVX& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkImageViewAddressPropertiesNVX& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewAddressPropertiesNVX& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCreationFeedback& member){
        
    
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["duration"];
[&](){json_value=member.duration;}();
}
void deserialize_struct(object& json, VkPipelineCreationFeedback& member){
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCreationFeedbackFlags temp_UWmcGjb[&](){temp_UWmcGjb=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCreationFeedbackFlags)temp_UWmcGjb;}();}();
auto& json_value=json["duration"];
[&](){member.duration=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineCreationFeedback& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCreationFeedback& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCreationFeedbackCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pPipelineCreationFeedback"];
[&](){
            if (member.pPipelineCreationFeedback==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int tXpPWXb=0; tXpPWXb < 1; tXpPWXb++){
            [&](){
            auto& temp=json_value[tXpPWXb].emplace_object();
            return serialize_struct(temp, member.pPipelineCreationFeedback[tXpPWXb]);
            }();
        }
        }();
auto& json_value=json["pipelineStageCreationFeedbackCount"];
[&](){json_value=member.pipelineStageCreationFeedbackCount;}();
auto& json_value=json["pPipelineStageCreationFeedbacks"];
[&](){
            if (member.pPipelineStageCreationFeedbacks==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int MaEvDCo=0; MaEvDCo < member.pipelineStageCreationFeedbackCount; MaEvDCo++){
            [&](){
            auto& temp=json_value[MaEvDCo].emplace_object();
            return serialize_struct(temp, member.pPipelineStageCreationFeedbacks[MaEvDCo]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineCreationFeedbackCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pPipelineCreationFeedback"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pPipelineCreationFeedback=NULL;
            return; }member.pPipelineCreationFeedback=(VkPipelineCreationFeedback*)malloc(1*sizeof(VkPipelineCreationFeedback));
        auto& arr=json_value.as_array();
        for(int tXpPWXb=0; tXpPWXb < 1; tXpPWXb++){
            [&](){
            auto& temp=json_value[tXpPWXb].as_object();
            deserialize_struct(temp,member.pPipelineCreationFeedback[tXpPWXb]);
            }();
        }
        }();
auto& json_value=json["pipelineStageCreationFeedbackCount"];
[&](){member.pipelineStageCreationFeedbackCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPipelineStageCreationFeedbacks"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pPipelineStageCreationFeedbacks=NULL;
            return; }member.pPipelineStageCreationFeedbacks=(VkPipelineCreationFeedback*)malloc(member.pipelineStageCreationFeedbackCount*sizeof(VkPipelineCreationFeedback));
        auto& arr=json_value.as_array();
        for(int MaEvDCo=0; MaEvDCo < member.pipelineStageCreationFeedbackCount; MaEvDCo++){
            [&](){
            auto& temp=json_value[MaEvDCo].as_object();
            deserialize_struct(temp,member.pPipelineStageCreationFeedbacks[MaEvDCo]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkPipelineCreationFeedbackCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCreationFeedbackCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePresentBarrierFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentBarrier"];
[&](){[&](){json_value=member.presentBarrier;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePresentBarrierFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentBarrier"];
[&](){[&](){member.presentBarrier=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePresentBarrierFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePresentBarrierFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfaceCapabilitiesPresentBarrierNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentBarrierSupported"];
[&](){[&](){json_value=member.presentBarrierSupported;}();}();
}
void deserialize_struct(object& json, VkSurfaceCapabilitiesPresentBarrierNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentBarrierSupported"];
[&](){[&](){member.presentBarrierSupported=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSurfaceCapabilitiesPresentBarrierNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfaceCapabilitiesPresentBarrierNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainPresentBarrierCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentBarrierEnable"];
[&](){[&](){json_value=member.presentBarrierEnable;}();}();
}
void deserialize_struct(object& json, VkSwapchainPresentBarrierCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentBarrierEnable"];
[&](){[&](){member.presentBarrierEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSwapchainPresentBarrierCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainPresentBarrierCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePerformanceQueryFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["performanceCounterQueryPools"];
[&](){[&](){json_value=member.performanceCounterQueryPools;}();}();
auto& json_value=json["performanceCounterMultipleQueryPools"];
[&](){[&](){json_value=member.performanceCounterMultipleQueryPools;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePerformanceQueryFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["performanceCounterQueryPools"];
[&](){[&](){member.performanceCounterQueryPools=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["performanceCounterMultipleQueryPools"];
[&](){[&](){member.performanceCounterMultipleQueryPools=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePerformanceQueryFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePerformanceQueryFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePerformanceQueryPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["allowCommandBufferQueryCopies"];
[&](){[&](){json_value=member.allowCommandBufferQueryCopies;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePerformanceQueryPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["allowCommandBufferQueryCopies"];
[&](){[&](){member.allowCommandBufferQueryCopies=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePerformanceQueryPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePerformanceQueryPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceCounterKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["unit"];
[&](){[&](){[&](){json_value=member.unit;}();}();}();
auto& json_value=json["scope"];
[&](){[&](){[&](){json_value=member.scope;}();}();}();
auto& json_value=json["storage"];
[&](){[&](){[&](){json_value=member.storage;}();}();}();
auto& json_value=json["uuid"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int vzBFmFc=0; vzBFmFc < VK_UUID_SIZE; vzBFmFc++){
            [&](){json_value[vzBFmFc]=member.uuid[vzBFmFc];}();
        }
        }();
}
void deserialize_struct(object& json, VkPerformanceCounterKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["unit"];
[&](){[&](){VkPerformanceCounterUnitKHR temp_FRBwMxY[&](){temp_FRBwMxY=static_cast<int>(value_to<int>(json_value));}();member.unit=(VkPerformanceCounterUnitKHR)temp_FRBwMxY;}();}();
auto& json_value=json["scope"];
[&](){[&](){VkPerformanceCounterScopeKHR temp_qvjMMpG[&](){temp_qvjMMpG=static_cast<int>(value_to<int>(json_value));}();member.scope=(VkPerformanceCounterScopeKHR)temp_qvjMMpG;}();}();
auto& json_value=json["storage"];
[&](){[&](){VkPerformanceCounterStorageKHR temp_NESPoZl[&](){temp_NESPoZl=static_cast<int>(value_to<int>(json_value));}();member.storage=(VkPerformanceCounterStorageKHR)temp_NESPoZl;}();}();
auto& json_value=json["uuid"];
[&](){
        auto& arr=json_value.as_array();
        for(int vzBFmFc=0; vzBFmFc < VK_UUID_SIZE; vzBFmFc++){
            [&](){member.uuid[vzBFmFc]=static_cast<uint8_t>(value_to<int>(json_value[vzBFmFc]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPerformanceCounterKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceCounterKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceCounterDescriptionKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){json_value[hWobsSN]=member.name[hWobsSN];}();
        }
        }();
auto& json_value=json["category"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int nMrMOOK=0; nMrMOOK < VK_MAX_DESCRIPTION_SIZE; nMrMOOK++){
            [&](){json_value[nMrMOOK]=member.category[nMrMOOK];}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
}
void deserialize_struct(object& json, VkPerformanceCounterDescriptionKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkPerformanceCounterDescriptionFlagsKHR temp_nggLVFW[&](){temp_nggLVFW=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPerformanceCounterDescriptionFlagsKHR)temp_nggLVFW;}();}();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.as_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){member.name[hWobsSN]=static_cast<char>(value_to<int>(json_value[hWobsSN]));}();
        }
        }();
auto& json_value=json["category"];
[&](){
        auto& arr=json_value.as_array();
        for(int nMrMOOK=0; nMrMOOK < VK_MAX_DESCRIPTION_SIZE; nMrMOOK++){
            [&](){member.category[nMrMOOK]=static_cast<char>(value_to<int>(json_value[nMrMOOK]));}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPerformanceCounterDescriptionKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceCounterDescriptionKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueryPoolPerformanceCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["queueFamilyIndex"];
[&](){json_value=member.queueFamilyIndex;}();
auto& json_value=json["counterIndexCount"];
[&](){json_value=member.counterIndexCount;}();
auto& json_value=json["pCounterIndices"];
[&](){
            if (member.pCounterIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int JseWCIa=0; JseWCIa < member.counterIndexCount; JseWCIa++){
            [&](){json_value[JseWCIa]=member.pCounterIndices[JseWCIa];}();
        }
        }();
}
void deserialize_struct(object& json, VkQueryPoolPerformanceCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["queueFamilyIndex"];
[&](){member.queueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["counterIndexCount"];
[&](){member.counterIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCounterIndices"];
[&](){ uint32_t* temp_ZmtgUAv[&](){
            if (!json_value.as_array().size()==0){
                temp_ZmtgUAv=NULL;
            return; }temp_ZmtgUAv=(uint32_t*)malloc(member.counterIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int giXouEF=0; giXouEF < member.counterIndexCount; giXouEF++){
            [&](){temp_ZmtgUAv[giXouEF]=static_cast<uint32_t>(value_to<int>(json_value[giXouEF]));}();
        }
        }();member.pCounterIndices=temp_ZmtgUAv;}();
}

    void serialize_pUserData(object& json, VkQueryPoolPerformanceCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueryPoolPerformanceCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceCounterResultKHR& member){
        
    
auto& json_value=json["int32"];
[&](){json_value=member.int32;}();
auto& json_value=json["int64"];
[&](){json_value=member.int64;}();
auto& json_value=json["uint32"];
[&](){json_value=member.uint32;}();
auto& json_value=json["uint64"];
[&](){json_value=member.uint64;}();
auto& json_value=json["float32"];
[&](){json_value=member.float32;}();
auto& json_value=json["float64"];
[&](){json_value=member.float64;}();
}
void deserialize_struct(object& json, VkPerformanceCounterResultKHR& member){
auto& json_value=json["int32"];
[&](){member.int32=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["int64"];
[&](){member.int64=static_cast<int64_t>(value_to<int>(json_value));}();
auto& json_value=json["uint32"];
[&](){member.uint32=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["uint64"];
[&](){member.uint64=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["float32"];
[&](){member.float32=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["float64"];
[&](){member.float64=static_cast<double>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPerformanceCounterResultKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceCounterResultKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAcquireProfilingLockInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["timeout"];
[&](){json_value=member.timeout;}();
}
void deserialize_struct(object& json, VkAcquireProfilingLockInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkAcquireProfilingLockFlagsKHR temp_lAjtzkM[&](){temp_lAjtzkM=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkAcquireProfilingLockFlagsKHR)temp_lAjtzkM;}();}();
auto& json_value=json["timeout"];
[&](){member.timeout=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAcquireProfilingLockInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAcquireProfilingLockInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceQuerySubmitInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["counterPassIndex"];
[&](){json_value=member.counterPassIndex;}();
}
void deserialize_struct(object& json, VkPerformanceQuerySubmitInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["counterPassIndex"];
[&](){member.counterPassIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPerformanceQuerySubmitInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceQuerySubmitInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkHeadlessSurfaceCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkHeadlessSurfaceCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkHeadlessSurfaceCreateFlagsEXT temp_qDMMihJ[&](){temp_qDMMihJ=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkHeadlessSurfaceCreateFlagsEXT)temp_qDMMihJ;}();}();
}

    void serialize_pUserData(object& json, VkHeadlessSurfaceCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkHeadlessSurfaceCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCoverageReductionModeFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["coverageReductionMode"];
[&](){[&](){json_value=member.coverageReductionMode;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCoverageReductionModeFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["coverageReductionMode"];
[&](){[&](){member.coverageReductionMode=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCoverageReductionModeFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCoverageReductionModeFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCoverageReductionStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["coverageReductionMode"];
[&](){[&](){[&](){json_value=member.coverageReductionMode;}();}();}();
}
void deserialize_struct(object& json, VkPipelineCoverageReductionStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkPipelineCoverageReductionStateCreateFlagsNV temp_DAHnAiL[&](){temp_DAHnAiL=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkPipelineCoverageReductionStateCreateFlagsNV)temp_DAHnAiL;}();}();
auto& json_value=json["coverageReductionMode"];
[&](){[&](){VkCoverageReductionModeNV temp_cKDUMQQ[&](){temp_cKDUMQQ=static_cast<int>(value_to<int>(json_value));}();member.coverageReductionMode=(VkCoverageReductionModeNV)temp_cKDUMQQ;}();}();
}

    void serialize_pUserData(object& json, VkPipelineCoverageReductionStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCoverageReductionStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFramebufferMixedSamplesCombinationNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["coverageReductionMode"];
[&](){[&](){[&](){json_value=member.coverageReductionMode;}();}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){[&](){json_value=member.rasterizationSamples;}();}();}();
auto& json_value=json["depthStencilSamples"];
[&](){[&](){[&](){json_value=member.depthStencilSamples;}();}();}();
auto& json_value=json["colorSamples"];
[&](){[&](){[&](){json_value=member.colorSamples;}();}();}();
}
void deserialize_struct(object& json, VkFramebufferMixedSamplesCombinationNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["coverageReductionMode"];
[&](){[&](){VkCoverageReductionModeNV temp_cKDUMQQ[&](){temp_cKDUMQQ=static_cast<int>(value_to<int>(json_value));}();member.coverageReductionMode=(VkCoverageReductionModeNV)temp_cKDUMQQ;}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){VkSampleCountFlagBits temp_poTQNon[&](){temp_poTQNon=static_cast<int>(value_to<int>(json_value));}();member.rasterizationSamples=(VkSampleCountFlagBits)temp_poTQNon;}();}();
auto& json_value=json["depthStencilSamples"];
[&](){[&](){VkSampleCountFlags temp_GDHJxNk[&](){temp_GDHJxNk=static_cast<int>(value_to<int>(json_value));}();member.depthStencilSamples=(VkSampleCountFlags)temp_GDHJxNk;}();}();
auto& json_value=json["colorSamples"];
[&](){[&](){VkSampleCountFlags temp_JIKWHNc[&](){temp_JIKWHNc=static_cast<int>(value_to<int>(json_value));}();member.colorSamples=(VkSampleCountFlags)temp_JIKWHNc;}();}();
}

    void serialize_pUserData(object& json, VkFramebufferMixedSamplesCombinationNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFramebufferMixedSamplesCombinationNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderIntegerFunctions2"];
[&](){[&](){json_value=member.shaderIntegerFunctions2;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderIntegerFunctions2"];
[&](){[&](){member.shaderIntegerFunctions2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceValueDataINTEL& member){
        
    
auto& json_value=json["value32"];
[&](){json_value=member.value32;}();
auto& json_value=json["value64"];
[&](){json_value=member.value64;}();
auto& json_value=json["valueFloat"];
[&](){json_value=member.valueFloat;}();
auto& json_value=json["valueBool"];
[&](){[&](){json_value=member.valueBool;}();}();
auto& json_value=json["valueString"];
[&](){
            if (member.valueString==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RsZQIXp=0; RsZQIXp < strlen(member.valueString)+1; RsZQIXp++){
            [&](){json_value[RsZQIXp]=member.valueString[RsZQIXp];}();
        }
        }();
}
void deserialize_struct(object& json, VkPerformanceValueDataINTEL& member){
auto& json_value=json["value32"];
[&](){member.value32=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["value64"];
[&](){member.value64=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["valueFloat"];
[&](){member.valueFloat=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["valueBool"];
[&](){[&](){member.valueBool=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["valueString"];
[&](){ char* temp_fJvAAoV[&](){
            if (!json_value.as_array().size()==0){
                temp_fJvAAoV=NULL;
            return; }temp_fJvAAoV=(char*)malloc(temp_fJvAAoV.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int oRlonMs=0; oRlonMs < temp_fJvAAoV.as_array().size();; oRlonMs++){
            [&](){temp_fJvAAoV[oRlonMs]=static_cast<char>(value_to<int>(json_value[oRlonMs]));}();
        }
        }();member.valueString=temp_fJvAAoV;}();
}

    void serialize_pUserData(object& json, VkPerformanceValueDataINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceValueDataINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceValueINTEL& member){
        
    
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.data);
            }();
}
void deserialize_struct(object& json, VkPerformanceValueINTEL& member){
auto& json_value=json["type"];
[&](){[&](){VkPerformanceValueTypeINTEL temp_akoOZCP[&](){temp_akoOZCP=static_cast<int>(value_to<int>(json_value));}();member.type=(VkPerformanceValueTypeINTEL)temp_akoOZCP;}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.data);
            }();
}

    void serialize_pUserData(object& json, VkPerformanceValueINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceValueINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkInitializePerformanceApiInfoINTEL& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pUserData"];
serialize_pUserData(json_value, member);
}
void deserialize_struct(object& json, VkInitializePerformanceApiInfoINTEL& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pUserData"];
deserialize_pUserData(json_value, member);
}

    void serialize_pUserData(object& json, VkInitializePerformanceApiInfoINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkInitializePerformanceApiInfoINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueryPoolPerformanceQueryCreateInfoINTEL& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["performanceCountersSampling"];
[&](){[&](){[&](){json_value=member.performanceCountersSampling;}();}();}();
}
void deserialize_struct(object& json, VkQueryPoolPerformanceQueryCreateInfoINTEL& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["performanceCountersSampling"];
[&](){[&](){VkQueryPoolSamplingModeINTEL temp_EkTpZdR[&](){temp_EkTpZdR=static_cast<int>(value_to<int>(json_value));}();member.performanceCountersSampling=(VkQueryPoolSamplingModeINTEL)temp_EkTpZdR;}();}();
}

    void serialize_pUserData(object& json, VkQueryPoolPerformanceQueryCreateInfoINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueryPoolPerformanceQueryCreateInfoINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceMarkerInfoINTEL& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["marker"];
[&](){json_value=member.marker;}();
}
void deserialize_struct(object& json, VkPerformanceMarkerInfoINTEL& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["marker"];
[&](){member.marker=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPerformanceMarkerInfoINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceMarkerInfoINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceStreamMarkerInfoINTEL& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["marker"];
[&](){json_value=member.marker;}();
}
void deserialize_struct(object& json, VkPerformanceStreamMarkerInfoINTEL& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["marker"];
[&](){member.marker=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPerformanceStreamMarkerInfoINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceStreamMarkerInfoINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceOverrideInfoINTEL& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["enable"];
[&](){[&](){json_value=member.enable;}();}();
auto& json_value=json["parameter"];
[&](){json_value=member.parameter;}();
}
void deserialize_struct(object& json, VkPerformanceOverrideInfoINTEL& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkPerformanceOverrideTypeINTEL temp_FTlxWKU[&](){temp_FTlxWKU=static_cast<int>(value_to<int>(json_value));}();member.type=(VkPerformanceOverrideTypeINTEL)temp_FTlxWKU;}();}();
auto& json_value=json["enable"];
[&](){[&](){member.enable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["parameter"];
[&](){member.parameter=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPerformanceOverrideInfoINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceOverrideInfoINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPerformanceConfigurationAcquireInfoINTEL& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
}
void deserialize_struct(object& json, VkPerformanceConfigurationAcquireInfoINTEL& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkPerformanceConfigurationTypeINTEL temp_NRVkmmv[&](){temp_NRVkmmv=static_cast<int>(value_to<int>(json_value));}();member.type=(VkPerformanceConfigurationTypeINTEL)temp_NRVkmmv;}();}();
}

    void serialize_pUserData(object& json, VkPerformanceConfigurationAcquireInfoINTEL& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPerformanceConfigurationAcquireInfoINTEL& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderClockFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderSubgroupClock"];
[&](){[&](){json_value=member.shaderSubgroupClock;}();}();
auto& json_value=json["shaderDeviceClock"];
[&](){[&](){json_value=member.shaderDeviceClock;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderClockFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderSubgroupClock"];
[&](){[&](){member.shaderSubgroupClock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDeviceClock"];
[&](){[&](){member.shaderDeviceClock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderClockFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderClockFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceIndexTypeUint8FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["indexTypeUint8"];
[&](){[&](){json_value=member.indexTypeUint8;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceIndexTypeUint8FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["indexTypeUint8"];
[&](){[&](){member.indexTypeUint8=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceIndexTypeUint8FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceIndexTypeUint8FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderSMCount"];
[&](){json_value=member.shaderSMCount;}();
auto& json_value=json["shaderWarpsPerSM"];
[&](){json_value=member.shaderWarpsPerSM;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderSMCount"];
[&](){member.shaderSMCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderWarpsPerSM"];
[&](){member.shaderWarpsPerSM=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderSMBuiltins"];
[&](){[&](){json_value=member.shaderSMBuiltins;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderSMBuiltins"];
[&](){[&](){member.shaderSMBuiltins=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentShaderSampleInterlock"];
[&](){[&](){json_value=member.fragmentShaderSampleInterlock;}();}();
auto& json_value=json["fragmentShaderPixelInterlock"];
[&](){[&](){json_value=member.fragmentShaderPixelInterlock;}();}();
auto& json_value=json["fragmentShaderShadingRateInterlock"];
[&](){[&](){json_value=member.fragmentShaderShadingRateInterlock;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["fragmentShaderSampleInterlock"];
[&](){[&](){member.fragmentShaderSampleInterlock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShaderPixelInterlock"];
[&](){[&](){member.fragmentShaderPixelInterlock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShaderShadingRateInterlock"];
[&](){[&](){member.fragmentShaderShadingRateInterlock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["separateDepthStencilLayouts"];
[&](){[&](){json_value=member.separateDepthStencilLayouts;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["separateDepthStencilLayouts"];
[&](){[&](){member.separateDepthStencilLayouts=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentReferenceStencilLayout& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stencilLayout"];
[&](){[&](){[&](){json_value=member.stencilLayout;}();}();}();
}
void deserialize_struct(object& json, VkAttachmentReferenceStencilLayout& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["stencilLayout"];
[&](){[&](){VkImageLayout temp_SLAAbVv[&](){temp_SLAAbVv=static_cast<int>(value_to<int>(json_value));}();member.stencilLayout=(VkImageLayout)temp_SLAAbVv;}();}();
}

    void serialize_pUserData(object& json, VkAttachmentReferenceStencilLayout& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentReferenceStencilLayout& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["primitiveTopologyListRestart"];
[&](){[&](){json_value=member.primitiveTopologyListRestart;}();}();
auto& json_value=json["primitiveTopologyPatchListRestart"];
[&](){[&](){json_value=member.primitiveTopologyPatchListRestart;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["primitiveTopologyListRestart"];
[&](){[&](){member.primitiveTopologyListRestart=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["primitiveTopologyPatchListRestart"];
[&](){[&](){member.primitiveTopologyPatchListRestart=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentDescriptionStencilLayout& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stencilInitialLayout"];
[&](){[&](){[&](){json_value=member.stencilInitialLayout;}();}();}();
auto& json_value=json["stencilFinalLayout"];
[&](){[&](){[&](){json_value=member.stencilFinalLayout;}();}();}();
}
void deserialize_struct(object& json, VkAttachmentDescriptionStencilLayout& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["stencilInitialLayout"];
[&](){[&](){VkImageLayout temp_xuhcnVo[&](){temp_xuhcnVo=static_cast<int>(value_to<int>(json_value));}();member.stencilInitialLayout=(VkImageLayout)temp_xuhcnVo;}();}();
auto& json_value=json["stencilFinalLayout"];
[&](){[&](){VkImageLayout temp_PzKFqPe[&](){temp_PzKFqPe=static_cast<int>(value_to<int>(json_value));}();member.stencilFinalLayout=(VkImageLayout)temp_PzKFqPe;}();}();
}

    void serialize_pUserData(object& json, VkAttachmentDescriptionStencilLayout& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentDescriptionStencilLayout& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineExecutableInfo"];
[&](){[&](){json_value=member.pipelineExecutableInfo;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelineExecutableInfo"];
[&](){[&](){member.pipelineExecutableInfo=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipeline"];
[&](){serialize_handle(json_value,member.pipeline);}();
}
void deserialize_struct(object& json, VkPipelineInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pipeline"];
[&](){deserialize_handle(json_value, member.pipeline);}();
}

    void serialize_pUserData(object& json, VkPipelineInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineExecutablePropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stages"];
[&](){[&](){[&](){json_value=member.stages;}();}();}();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){json_value[hWobsSN]=member.name[hWobsSN];}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
auto& json_value=json["subgroupSize"];
[&](){json_value=member.subgroupSize;}();
}
void deserialize_struct(object& json, VkPipelineExecutablePropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["stages"];
[&](){[&](){VkShaderStageFlags temp_SwqGKlS[&](){temp_SwqGKlS=static_cast<int>(value_to<int>(json_value));}();member.stages=(VkShaderStageFlags)temp_SwqGKlS;}();}();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.as_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){member.name[hWobsSN]=static_cast<char>(value_to<int>(json_value[hWobsSN]));}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
auto& json_value=json["subgroupSize"];
[&](){member.subgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineExecutablePropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineExecutablePropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineExecutableInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipeline"];
[&](){serialize_handle(json_value,member.pipeline);}();
auto& json_value=json["executableIndex"];
[&](){json_value=member.executableIndex;}();
}
void deserialize_struct(object& json, VkPipelineExecutableInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pipeline"];
[&](){deserialize_handle(json_value, member.pipeline);}();
auto& json_value=json["executableIndex"];
[&](){member.executableIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineExecutableInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineExecutableInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineExecutableStatisticValueKHR& member){
        
    
auto& json_value=json["b32"];
[&](){[&](){json_value=member.b32;}();}();
auto& json_value=json["i64"];
[&](){json_value=member.i64;}();
auto& json_value=json["u64"];
[&](){json_value=member.u64;}();
auto& json_value=json["f64"];
[&](){json_value=member.f64;}();
}
void deserialize_struct(object& json, VkPipelineExecutableStatisticValueKHR& member){
auto& json_value=json["b32"];
[&](){[&](){member.b32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["i64"];
[&](){member.i64=static_cast<int64_t>(value_to<int>(json_value));}();
auto& json_value=json["u64"];
[&](){member.u64=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["f64"];
[&](){member.f64=static_cast<double>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineExecutableStatisticValueKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineExecutableStatisticValueKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineExecutableStatisticKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){json_value[hWobsSN]=member.name[hWobsSN];}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["value"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.value);
            }();
}
void deserialize_struct(object& json, VkPipelineExecutableStatisticKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.as_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){member.name[hWobsSN]=static_cast<char>(value_to<int>(json_value[hWobsSN]));}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
auto& json_value=json["format"];
[&](){[&](){VkPipelineExecutableStatisticFormatKHR temp_dKEhBsc[&](){temp_dKEhBsc=static_cast<int>(value_to<int>(json_value));}();member.format=(VkPipelineExecutableStatisticFormatKHR)temp_dKEhBsc;}();}();
auto& json_value=json["value"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.value);
            }();
}

    void serialize_pUserData(object& json, VkPipelineExecutableStatisticKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineExecutableStatisticKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineExecutableInternalRepresentationKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){json_value[hWobsSN]=member.name[hWobsSN];}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
auto& json_value=json["isText"];
[&](){[&](){json_value=member.isText;}();}();
auto& json_value=json["dataSize"];
[&](){json_value=member.dataSize;}();
auto& json_value=json["pData"];
[&](){
            if (member.pData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int AJXlqIY=0; AJXlqIY < member.dataSize; AJXlqIY++){
            [&](){json_value[AJXlqIY]=(char*)(member.pData)[AJXlqIY];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkPipelineExecutableInternalRepresentationKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.as_array();
        for(int hWobsSN=0; hWobsSN < VK_MAX_DESCRIPTION_SIZE; hWobsSN++){
            [&](){member.name[hWobsSN]=static_cast<char>(value_to<int>(json_value[hWobsSN]));}();
        }
        }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
auto& json_value=json["isText"];
[&](){[&](){member.isText=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dataSize"];
[&](){member.dataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pData"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pData=NULL;
            return; }char* temp_sGyDunJ;[&](){
            if (!json_value.as_array().size()==0){
                member.pData=NULL;
            return; }member.pData=(char*)malloc(member.dataSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int AJXlqIY=0; AJXlqIY < member.dataSize; AJXlqIY++){
            [&](){member.pData[AJXlqIY]=static_cast<char>(value_to<int>(json_value[AJXlqIY]));}();
        }
        }();member.pData=temp_sGyDunJ;}();
}

    void serialize_pUserData(object& json, VkPipelineExecutableInternalRepresentationKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineExecutableInternalRepresentationKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderDemoteToHelperInvocation"];
[&](){[&](){json_value=member.shaderDemoteToHelperInvocation;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderDemoteToHelperInvocation"];
[&](){[&](){member.shaderDemoteToHelperInvocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["texelBufferAlignment"];
[&](){[&](){json_value=member.texelBufferAlignment;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["texelBufferAlignment"];
[&](){[&](){member.texelBufferAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTexelBufferAlignmentProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["storageTexelBufferOffsetAlignmentBytes"];
[&](){[&](){json_value=member.storageTexelBufferOffsetAlignmentBytes;}();}();
auto& json_value=json["storageTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){json_value=member.storageTexelBufferOffsetSingleTexelAlignment;}();}();
auto& json_value=json["uniformTexelBufferOffsetAlignmentBytes"];
[&](){[&](){json_value=member.uniformTexelBufferOffsetAlignmentBytes;}();}();
auto& json_value=json["uniformTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){json_value=member.uniformTexelBufferOffsetSingleTexelAlignment;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTexelBufferAlignmentProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["storageTexelBufferOffsetAlignmentBytes"];
[&](){[&](){member.storageTexelBufferOffsetAlignmentBytes=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storageTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){member.storageTexelBufferOffsetSingleTexelAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformTexelBufferOffsetAlignmentBytes"];
[&](){[&](){member.uniformTexelBufferOffsetAlignmentBytes=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){member.uniformTexelBufferOffsetSingleTexelAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTexelBufferAlignmentProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTexelBufferAlignmentProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSubgroupSizeControlFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["subgroupSizeControl"];
[&](){[&](){json_value=member.subgroupSizeControl;}();}();
auto& json_value=json["computeFullSubgroups"];
[&](){[&](){json_value=member.computeFullSubgroups;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSubgroupSizeControlFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["subgroupSizeControl"];
[&](){[&](){member.subgroupSizeControl=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["computeFullSubgroups"];
[&](){[&](){member.computeFullSubgroups=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSubgroupSizeControlFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSubgroupSizeControlFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSubgroupSizeControlProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minSubgroupSize"];
[&](){json_value=member.minSubgroupSize;}();
auto& json_value=json["maxSubgroupSize"];
[&](){json_value=member.maxSubgroupSize;}();
auto& json_value=json["maxComputeWorkgroupSubgroups"];
[&](){json_value=member.maxComputeWorkgroupSubgroups;}();
auto& json_value=json["requiredSubgroupSizeStages"];
[&](){[&](){[&](){json_value=member.requiredSubgroupSizeStages;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSubgroupSizeControlProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["minSubgroupSize"];
[&](){member.minSubgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxSubgroupSize"];
[&](){member.maxSubgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxComputeWorkgroupSubgroups"];
[&](){member.maxComputeWorkgroupSubgroups=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["requiredSubgroupSizeStages"];
[&](){[&](){VkShaderStageFlags temp_ICfUaTk[&](){temp_ICfUaTk=static_cast<int>(value_to<int>(json_value));}();member.requiredSubgroupSizeStages=(VkShaderStageFlags)temp_ICfUaTk;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSubgroupSizeControlProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSubgroupSizeControlProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["requiredSubgroupSize"];
[&](){json_value=member.requiredSubgroupSize;}();
}
void deserialize_struct(object& json, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["requiredSubgroupSize"];
[&](){member.requiredSubgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineShaderStageRequiredSubgroupSizeCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassShadingPipelineCreateInfoHUAWEI& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["renderPass"];
[&](){serialize_handle(json_value,member.renderPass);}();
auto& json_value=json["subpass"];
[&](){json_value=member.subpass;}();
}
void deserialize_struct(object& json, VkSubpassShadingPipelineCreateInfoHUAWEI& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["renderPass"];
[&](){deserialize_handle(json_value, member.renderPass);}();
auto& json_value=json["subpass"];
[&](){member.subpass=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSubpassShadingPipelineCreateInfoHUAWEI& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassShadingPipelineCreateInfoHUAWEI& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxSubpassShadingWorkgroupSizeAspectRatio"];
[&](){json_value=member.maxSubpassShadingWorkgroupSizeAspectRatio;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxSubpassShadingWorkgroupSizeAspectRatio"];
[&](){member.maxSubpassShadingWorkgroupSizeAspectRatio=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSubpassShadingPropertiesHUAWEI& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxWorkGroupCount"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int uxSgNpu=0; uxSgNpu < 3; uxSgNpu++){
            [&](){json_value[uxSgNpu]=member.maxWorkGroupCount[uxSgNpu];}();
        }
        }();
auto& json_value=json["maxWorkGroupSize"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int JubkVsI=0; JubkVsI < 3; JubkVsI++){
            [&](){json_value[JubkVsI]=member.maxWorkGroupSize[JubkVsI];}();
        }
        }();
auto& json_value=json["maxOutputClusterCount"];
[&](){json_value=member.maxOutputClusterCount;}();
auto& json_value=json["indirectBufferOffsetAlignment"];
[&](){[&](){json_value=member.indirectBufferOffsetAlignment;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxWorkGroupCount"];
[&](){
        auto& arr=json_value.as_array();
        for(int uxSgNpu=0; uxSgNpu < 3; uxSgNpu++){
            [&](){member.maxWorkGroupCount[uxSgNpu]=static_cast<uint32_t>(value_to<int>(json_value[uxSgNpu]));}();
        }
        }();
auto& json_value=json["maxWorkGroupSize"];
[&](){
        auto& arr=json_value.as_array();
        for(int JubkVsI=0; JubkVsI < 3; JubkVsI++){
            [&](){member.maxWorkGroupSize[JubkVsI]=static_cast<uint32_t>(value_to<int>(json_value[JubkVsI]));}();
        }
        }();
auto& json_value=json["maxOutputClusterCount"];
[&](){member.maxOutputClusterCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["indirectBufferOffsetAlignment"];
[&](){[&](){member.indirectBufferOffsetAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryOpaqueCaptureAddressAllocateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["opaqueCaptureAddress"];
[&](){json_value=member.opaqueCaptureAddress;}();
}
void deserialize_struct(object& json, VkMemoryOpaqueCaptureAddressAllocateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["opaqueCaptureAddress"];
[&](){member.opaqueCaptureAddress=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMemoryOpaqueCaptureAddressAllocateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryOpaqueCaptureAddressAllocateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceMemoryOpaqueCaptureAddressInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
}
void deserialize_struct(object& json, VkDeviceMemoryOpaqueCaptureAddressInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
}

    void serialize_pUserData(object& json, VkDeviceMemoryOpaqueCaptureAddressInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceMemoryOpaqueCaptureAddressInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceLineRasterizationFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rectangularLines"];
[&](){[&](){json_value=member.rectangularLines;}();}();
auto& json_value=json["bresenhamLines"];
[&](){[&](){json_value=member.bresenhamLines;}();}();
auto& json_value=json["smoothLines"];
[&](){[&](){json_value=member.smoothLines;}();}();
auto& json_value=json["stippledRectangularLines"];
[&](){[&](){json_value=member.stippledRectangularLines;}();}();
auto& json_value=json["stippledBresenhamLines"];
[&](){[&](){json_value=member.stippledBresenhamLines;}();}();
auto& json_value=json["stippledSmoothLines"];
[&](){[&](){json_value=member.stippledSmoothLines;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceLineRasterizationFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rectangularLines"];
[&](){[&](){member.rectangularLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bresenhamLines"];
[&](){[&](){member.bresenhamLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["smoothLines"];
[&](){[&](){member.smoothLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["stippledRectangularLines"];
[&](){[&](){member.stippledRectangularLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["stippledBresenhamLines"];
[&](){[&](){member.stippledBresenhamLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["stippledSmoothLines"];
[&](){[&](){member.stippledSmoothLines=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceLineRasterizationFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceLineRasterizationFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceLineRasterizationPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["lineSubPixelPrecisionBits"];
[&](){json_value=member.lineSubPixelPrecisionBits;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceLineRasterizationPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["lineSubPixelPrecisionBits"];
[&](){member.lineSubPixelPrecisionBits=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceLineRasterizationPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceLineRasterizationPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRasterizationLineStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["lineRasterizationMode"];
[&](){[&](){[&](){json_value=member.lineRasterizationMode;}();}();}();
auto& json_value=json["stippledLineEnable"];
[&](){[&](){json_value=member.stippledLineEnable;}();}();
auto& json_value=json["lineStippleFactor"];
[&](){json_value=member.lineStippleFactor;}();
auto& json_value=json["lineStipplePattern"];
[&](){json_value=member.lineStipplePattern;}();
}
void deserialize_struct(object& json, VkPipelineRasterizationLineStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["lineRasterizationMode"];
[&](){[&](){VkLineRasterizationModeEXT temp_fwRHMcq[&](){temp_fwRHMcq=static_cast<int>(value_to<int>(json_value));}();member.lineRasterizationMode=(VkLineRasterizationModeEXT)temp_fwRHMcq;}();}();
auto& json_value=json["stippledLineEnable"];
[&](){[&](){member.stippledLineEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["lineStippleFactor"];
[&](){member.lineStippleFactor=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["lineStipplePattern"];
[&](){member.lineStipplePattern=static_cast<uint16_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPipelineRasterizationLineStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRasterizationLineStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePipelineCreationCacheControlFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineCreationCacheControl"];
[&](){[&](){json_value=member.pipelineCreationCacheControl;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePipelineCreationCacheControlFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelineCreationCacheControl"];
[&](){[&](){member.pipelineCreationCacheControl=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePipelineCreationCacheControlFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePipelineCreationCacheControlFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVulkan11Features& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["storageBuffer16BitAccess"];
[&](){[&](){json_value=member.storageBuffer16BitAccess;}();}();
auto& json_value=json["uniformAndStorageBuffer16BitAccess"];
[&](){[&](){json_value=member.uniformAndStorageBuffer16BitAccess;}();}();
auto& json_value=json["storagePushConstant16"];
[&](){[&](){json_value=member.storagePushConstant16;}();}();
auto& json_value=json["storageInputOutput16"];
[&](){[&](){json_value=member.storageInputOutput16;}();}();
auto& json_value=json["multiview"];
[&](){[&](){json_value=member.multiview;}();}();
auto& json_value=json["multiviewGeometryShader"];
[&](){[&](){json_value=member.multiviewGeometryShader;}();}();
auto& json_value=json["multiviewTessellationShader"];
[&](){[&](){json_value=member.multiviewTessellationShader;}();}();
auto& json_value=json["variablePointersStorageBuffer"];
[&](){[&](){json_value=member.variablePointersStorageBuffer;}();}();
auto& json_value=json["variablePointers"];
[&](){[&](){json_value=member.variablePointers;}();}();
auto& json_value=json["protectedMemory"];
[&](){[&](){json_value=member.protectedMemory;}();}();
auto& json_value=json["samplerYcbcrConversion"];
[&](){[&](){json_value=member.samplerYcbcrConversion;}();}();
auto& json_value=json["shaderDrawParameters"];
[&](){[&](){json_value=member.shaderDrawParameters;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVulkan11Features& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["storageBuffer16BitAccess"];
[&](){[&](){member.storageBuffer16BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformAndStorageBuffer16BitAccess"];
[&](){[&](){member.uniformAndStorageBuffer16BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storagePushConstant16"];
[&](){[&](){member.storagePushConstant16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storageInputOutput16"];
[&](){[&](){member.storageInputOutput16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiview"];
[&](){[&](){member.multiview=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiviewGeometryShader"];
[&](){[&](){member.multiviewGeometryShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiviewTessellationShader"];
[&](){[&](){member.multiviewTessellationShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["variablePointersStorageBuffer"];
[&](){[&](){member.variablePointersStorageBuffer=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["variablePointers"];
[&](){[&](){member.variablePointers=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["protectedMemory"];
[&](){[&](){member.protectedMemory=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["samplerYcbcrConversion"];
[&](){[&](){member.samplerYcbcrConversion=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDrawParameters"];
[&](){[&](){member.shaderDrawParameters=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVulkan11Features& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVulkan11Features& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVulkan11Properties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){json_value[LghVtrk]=member.deviceUUID[LghVtrk];}();
        }
        }();
auto& json_value=json["driverUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){json_value[WbhUlZS]=member.driverUUID[WbhUlZS];}();
        }
        }();
auto& json_value=json["deviceLUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){json_value[kitdKfY]=member.deviceLUID[kitdKfY];}();
        }
        }();
auto& json_value=json["deviceNodeMask"];
[&](){json_value=member.deviceNodeMask;}();
auto& json_value=json["deviceLUIDValid"];
[&](){[&](){json_value=member.deviceLUIDValid;}();}();
auto& json_value=json["subgroupSize"];
[&](){json_value=member.subgroupSize;}();
auto& json_value=json["subgroupSupportedStages"];
[&](){[&](){[&](){json_value=member.subgroupSupportedStages;}();}();}();
auto& json_value=json["subgroupSupportedOperations"];
[&](){[&](){[&](){json_value=member.subgroupSupportedOperations;}();}();}();
auto& json_value=json["subgroupQuadOperationsInAllStages"];
[&](){[&](){json_value=member.subgroupQuadOperationsInAllStages;}();}();
auto& json_value=json["pointClippingBehavior"];
[&](){[&](){[&](){json_value=member.pointClippingBehavior;}();}();}();
auto& json_value=json["maxMultiviewViewCount"];
[&](){json_value=member.maxMultiviewViewCount;}();
auto& json_value=json["maxMultiviewInstanceIndex"];
[&](){json_value=member.maxMultiviewInstanceIndex;}();
auto& json_value=json["protectedNoFault"];
[&](){[&](){json_value=member.protectedNoFault;}();}();
auto& json_value=json["maxPerSetDescriptors"];
[&](){json_value=member.maxPerSetDescriptors;}();
auto& json_value=json["maxMemoryAllocationSize"];
[&](){[&](){json_value=member.maxMemoryAllocationSize;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVulkan11Properties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int LghVtrk=0; LghVtrk < VK_UUID_SIZE; LghVtrk++){
            [&](){member.deviceUUID[LghVtrk]=static_cast<uint8_t>(value_to<int>(json_value[LghVtrk]));}();
        }
        }();
auto& json_value=json["driverUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int WbhUlZS=0; WbhUlZS < VK_UUID_SIZE; WbhUlZS++){
            [&](){member.driverUUID[WbhUlZS]=static_cast<uint8_t>(value_to<int>(json_value[WbhUlZS]));}();
        }
        }();
auto& json_value=json["deviceLUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int kitdKfY=0; kitdKfY < VK_LUID_SIZE; kitdKfY++){
            [&](){member.deviceLUID[kitdKfY]=static_cast<uint8_t>(value_to<int>(json_value[kitdKfY]));}();
        }
        }();
auto& json_value=json["deviceNodeMask"];
[&](){member.deviceNodeMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["deviceLUIDValid"];
[&](){[&](){member.deviceLUIDValid=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["subgroupSize"];
[&](){member.subgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["subgroupSupportedStages"];
[&](){[&](){VkShaderStageFlags temp_dYJKLHK[&](){temp_dYJKLHK=static_cast<int>(value_to<int>(json_value));}();member.subgroupSupportedStages=(VkShaderStageFlags)temp_dYJKLHK;}();}();
auto& json_value=json["subgroupSupportedOperations"];
[&](){[&](){VkSubgroupFeatureFlags temp_ZgQAWPz[&](){temp_ZgQAWPz=static_cast<int>(value_to<int>(json_value));}();member.subgroupSupportedOperations=(VkSubgroupFeatureFlags)temp_ZgQAWPz;}();}();
auto& json_value=json["subgroupQuadOperationsInAllStages"];
[&](){[&](){member.subgroupQuadOperationsInAllStages=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["pointClippingBehavior"];
[&](){[&](){VkPointClippingBehavior temp_kUYPaec[&](){temp_kUYPaec=static_cast<int>(value_to<int>(json_value));}();member.pointClippingBehavior=(VkPointClippingBehavior)temp_kUYPaec;}();}();
auto& json_value=json["maxMultiviewViewCount"];
[&](){member.maxMultiviewViewCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMultiviewInstanceIndex"];
[&](){member.maxMultiviewInstanceIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["protectedNoFault"];
[&](){[&](){member.protectedNoFault=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxPerSetDescriptors"];
[&](){member.maxPerSetDescriptors=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxMemoryAllocationSize"];
[&](){[&](){member.maxMemoryAllocationSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVulkan11Properties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVulkan11Properties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVulkan12Features& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["samplerMirrorClampToEdge"];
[&](){[&](){json_value=member.samplerMirrorClampToEdge;}();}();
auto& json_value=json["drawIndirectCount"];
[&](){[&](){json_value=member.drawIndirectCount;}();}();
auto& json_value=json["storageBuffer8BitAccess"];
[&](){[&](){json_value=member.storageBuffer8BitAccess;}();}();
auto& json_value=json["uniformAndStorageBuffer8BitAccess"];
[&](){[&](){json_value=member.uniformAndStorageBuffer8BitAccess;}();}();
auto& json_value=json["storagePushConstant8"];
[&](){[&](){json_value=member.storagePushConstant8;}();}();
auto& json_value=json["shaderBufferInt64Atomics"];
[&](){[&](){json_value=member.shaderBufferInt64Atomics;}();}();
auto& json_value=json["shaderSharedInt64Atomics"];
[&](){[&](){json_value=member.shaderSharedInt64Atomics;}();}();
auto& json_value=json["shaderFloat16"];
[&](){[&](){json_value=member.shaderFloat16;}();}();
auto& json_value=json["shaderInt8"];
[&](){[&](){json_value=member.shaderInt8;}();}();
auto& json_value=json["descriptorIndexing"];
[&](){[&](){json_value=member.descriptorIndexing;}();}();
auto& json_value=json["shaderInputAttachmentArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderInputAttachmentArrayDynamicIndexing;}();}();
auto& json_value=json["shaderUniformTexelBufferArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderUniformTexelBufferArrayDynamicIndexing;}();}();
auto& json_value=json["shaderStorageTexelBufferArrayDynamicIndexing"];
[&](){[&](){json_value=member.shaderStorageTexelBufferArrayDynamicIndexing;}();}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderUniformBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderSampledImageArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderStorageBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderStorageImageArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderInputAttachmentArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderUniformTexelBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderUniformTexelBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["shaderStorageTexelBufferArrayNonUniformIndexing"];
[&](){[&](){json_value=member.shaderStorageTexelBufferArrayNonUniformIndexing;}();}();
auto& json_value=json["descriptorBindingUniformBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingUniformBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingSampledImageUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingSampledImageUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingStorageImageUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingStorageImageUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingStorageBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingStorageBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingUniformTexelBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingUniformTexelBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingStorageTexelBufferUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingStorageTexelBufferUpdateAfterBind;}();}();
auto& json_value=json["descriptorBindingUpdateUnusedWhilePending"];
[&](){[&](){json_value=member.descriptorBindingUpdateUnusedWhilePending;}();}();
auto& json_value=json["descriptorBindingPartiallyBound"];
[&](){[&](){json_value=member.descriptorBindingPartiallyBound;}();}();
auto& json_value=json["descriptorBindingVariableDescriptorCount"];
[&](){[&](){json_value=member.descriptorBindingVariableDescriptorCount;}();}();
auto& json_value=json["runtimeDescriptorArray"];
[&](){[&](){json_value=member.runtimeDescriptorArray;}();}();
auto& json_value=json["samplerFilterMinmax"];
[&](){[&](){json_value=member.samplerFilterMinmax;}();}();
auto& json_value=json["scalarBlockLayout"];
[&](){[&](){json_value=member.scalarBlockLayout;}();}();
auto& json_value=json["imagelessFramebuffer"];
[&](){[&](){json_value=member.imagelessFramebuffer;}();}();
auto& json_value=json["uniformBufferStandardLayout"];
[&](){[&](){json_value=member.uniformBufferStandardLayout;}();}();
auto& json_value=json["shaderSubgroupExtendedTypes"];
[&](){[&](){json_value=member.shaderSubgroupExtendedTypes;}();}();
auto& json_value=json["separateDepthStencilLayouts"];
[&](){[&](){json_value=member.separateDepthStencilLayouts;}();}();
auto& json_value=json["hostQueryReset"];
[&](){[&](){json_value=member.hostQueryReset;}();}();
auto& json_value=json["timelineSemaphore"];
[&](){[&](){json_value=member.timelineSemaphore;}();}();
auto& json_value=json["bufferDeviceAddress"];
[&](){[&](){json_value=member.bufferDeviceAddress;}();}();
auto& json_value=json["bufferDeviceAddressCaptureReplay"];
[&](){[&](){json_value=member.bufferDeviceAddressCaptureReplay;}();}();
auto& json_value=json["bufferDeviceAddressMultiDevice"];
[&](){[&](){json_value=member.bufferDeviceAddressMultiDevice;}();}();
auto& json_value=json["vulkanMemoryModel"];
[&](){[&](){json_value=member.vulkanMemoryModel;}();}();
auto& json_value=json["vulkanMemoryModelDeviceScope"];
[&](){[&](){json_value=member.vulkanMemoryModelDeviceScope;}();}();
auto& json_value=json["vulkanMemoryModelAvailabilityVisibilityChains"];
[&](){[&](){json_value=member.vulkanMemoryModelAvailabilityVisibilityChains;}();}();
auto& json_value=json["shaderOutputViewportIndex"];
[&](){[&](){json_value=member.shaderOutputViewportIndex;}();}();
auto& json_value=json["shaderOutputLayer"];
[&](){[&](){json_value=member.shaderOutputLayer;}();}();
auto& json_value=json["subgroupBroadcastDynamicId"];
[&](){[&](){json_value=member.subgroupBroadcastDynamicId;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVulkan12Features& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["samplerMirrorClampToEdge"];
[&](){[&](){member.samplerMirrorClampToEdge=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["drawIndirectCount"];
[&](){[&](){member.drawIndirectCount=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storageBuffer8BitAccess"];
[&](){[&](){member.storageBuffer8BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformAndStorageBuffer8BitAccess"];
[&](){[&](){member.uniformAndStorageBuffer8BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storagePushConstant8"];
[&](){[&](){member.storagePushConstant8=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderBufferInt64Atomics"];
[&](){[&](){member.shaderBufferInt64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSharedInt64Atomics"];
[&](){[&](){member.shaderSharedInt64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderFloat16"];
[&](){[&](){member.shaderFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInt8"];
[&](){[&](){member.shaderInt8=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorIndexing"];
[&](){[&](){member.descriptorIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInputAttachmentArrayDynamicIndexing"];
[&](){[&](){member.shaderInputAttachmentArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderUniformTexelBufferArrayDynamicIndexing"];
[&](){[&](){member.shaderUniformTexelBufferArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageTexelBufferArrayDynamicIndexing"];
[&](){[&](){member.shaderStorageTexelBufferArrayDynamicIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderUniformBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexing"];
[&](){[&](){member.shaderSampledImageArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderStorageBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexing"];
[&](){[&](){member.shaderStorageImageArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexing"];
[&](){[&](){member.shaderInputAttachmentArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderUniformTexelBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderUniformTexelBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageTexelBufferArrayNonUniformIndexing"];
[&](){[&](){member.shaderStorageTexelBufferArrayNonUniformIndexing=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingUniformBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingUniformBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingSampledImageUpdateAfterBind"];
[&](){[&](){member.descriptorBindingSampledImageUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingStorageImageUpdateAfterBind"];
[&](){[&](){member.descriptorBindingStorageImageUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingStorageBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingStorageBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingUniformTexelBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingUniformTexelBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingStorageTexelBufferUpdateAfterBind"];
[&](){[&](){member.descriptorBindingStorageTexelBufferUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingUpdateUnusedWhilePending"];
[&](){[&](){member.descriptorBindingUpdateUnusedWhilePending=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingPartiallyBound"];
[&](){[&](){member.descriptorBindingPartiallyBound=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingVariableDescriptorCount"];
[&](){[&](){member.descriptorBindingVariableDescriptorCount=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["runtimeDescriptorArray"];
[&](){[&](){member.runtimeDescriptorArray=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["samplerFilterMinmax"];
[&](){[&](){member.samplerFilterMinmax=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["scalarBlockLayout"];
[&](){[&](){member.scalarBlockLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["imagelessFramebuffer"];
[&](){[&](){member.imagelessFramebuffer=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformBufferStandardLayout"];
[&](){[&](){member.uniformBufferStandardLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSubgroupExtendedTypes"];
[&](){[&](){member.shaderSubgroupExtendedTypes=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["separateDepthStencilLayouts"];
[&](){[&](){member.separateDepthStencilLayouts=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["hostQueryReset"];
[&](){[&](){member.hostQueryReset=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["timelineSemaphore"];
[&](){[&](){member.timelineSemaphore=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferDeviceAddress"];
[&](){[&](){member.bufferDeviceAddress=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferDeviceAddressCaptureReplay"];
[&](){[&](){member.bufferDeviceAddressCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferDeviceAddressMultiDevice"];
[&](){[&](){member.bufferDeviceAddressMultiDevice=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vulkanMemoryModel"];
[&](){[&](){member.vulkanMemoryModel=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vulkanMemoryModelDeviceScope"];
[&](){[&](){member.vulkanMemoryModelDeviceScope=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["vulkanMemoryModelAvailabilityVisibilityChains"];
[&](){[&](){member.vulkanMemoryModelAvailabilityVisibilityChains=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderOutputViewportIndex"];
[&](){[&](){member.shaderOutputViewportIndex=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderOutputLayer"];
[&](){[&](){member.shaderOutputLayer=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["subgroupBroadcastDynamicId"];
[&](){[&](){member.subgroupBroadcastDynamicId=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVulkan12Features& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVulkan12Features& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVulkan12Properties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["driverID"];
[&](){[&](){[&](){json_value=member.driverID;}();}();}();
auto& json_value=json["driverName"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){json_value[eglnjYG]=member.driverName[eglnjYG];}();
        }
        }();
auto& json_value=json["driverInfo"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){json_value[ygBYlpo]=member.driverInfo[ygBYlpo];}();
        }
        }();
auto& json_value=json["conformanceVersion"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.conformanceVersion);
            }();
auto& json_value=json["denormBehaviorIndependence"];
[&](){[&](){[&](){json_value=member.denormBehaviorIndependence;}();}();}();
auto& json_value=json["roundingModeIndependence"];
[&](){[&](){[&](){json_value=member.roundingModeIndependence;}();}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat16"];
[&](){[&](){json_value=member.shaderSignedZeroInfNanPreserveFloat16;}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat32"];
[&](){[&](){json_value=member.shaderSignedZeroInfNanPreserveFloat32;}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat64"];
[&](){[&](){json_value=member.shaderSignedZeroInfNanPreserveFloat64;}();}();
auto& json_value=json["shaderDenormPreserveFloat16"];
[&](){[&](){json_value=member.shaderDenormPreserveFloat16;}();}();
auto& json_value=json["shaderDenormPreserveFloat32"];
[&](){[&](){json_value=member.shaderDenormPreserveFloat32;}();}();
auto& json_value=json["shaderDenormPreserveFloat64"];
[&](){[&](){json_value=member.shaderDenormPreserveFloat64;}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat16"];
[&](){[&](){json_value=member.shaderDenormFlushToZeroFloat16;}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat32"];
[&](){[&](){json_value=member.shaderDenormFlushToZeroFloat32;}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat64"];
[&](){[&](){json_value=member.shaderDenormFlushToZeroFloat64;}();}();
auto& json_value=json["shaderRoundingModeRTEFloat16"];
[&](){[&](){json_value=member.shaderRoundingModeRTEFloat16;}();}();
auto& json_value=json["shaderRoundingModeRTEFloat32"];
[&](){[&](){json_value=member.shaderRoundingModeRTEFloat32;}();}();
auto& json_value=json["shaderRoundingModeRTEFloat64"];
[&](){[&](){json_value=member.shaderRoundingModeRTEFloat64;}();}();
auto& json_value=json["shaderRoundingModeRTZFloat16"];
[&](){[&](){json_value=member.shaderRoundingModeRTZFloat16;}();}();
auto& json_value=json["shaderRoundingModeRTZFloat32"];
[&](){[&](){json_value=member.shaderRoundingModeRTZFloat32;}();}();
auto& json_value=json["shaderRoundingModeRTZFloat64"];
[&](){[&](){json_value=member.shaderRoundingModeRTZFloat64;}();}();
auto& json_value=json["maxUpdateAfterBindDescriptorsInAllPools"];
[&](){json_value=member.maxUpdateAfterBindDescriptorsInAllPools;}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderUniformBufferArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderSampledImageArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderStorageBufferArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderStorageImageArrayNonUniformIndexingNative;}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexingNative"];
[&](){[&](){json_value=member.shaderInputAttachmentArrayNonUniformIndexingNative;}();}();
auto& json_value=json["robustBufferAccessUpdateAfterBind"];
[&](){[&](){json_value=member.robustBufferAccessUpdateAfterBind;}();}();
auto& json_value=json["quadDivergentImplicitLod"];
[&](){[&](){json_value=member.quadDivergentImplicitLod;}();}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSamplers"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindSamplers;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindUniformBuffers"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindUniformBuffers;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageBuffers"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindStorageBuffers;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSampledImages"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindSampledImages;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageImages"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindStorageImages;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInputAttachments"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindInputAttachments;}();
auto& json_value=json["maxPerStageUpdateAfterBindResources"];
[&](){json_value=member.maxPerStageUpdateAfterBindResources;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSamplers"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindSamplers;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffers"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindUniformBuffers;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffers"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindStorageBuffers;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSampledImages"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindSampledImages;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageImages"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindStorageImages;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInputAttachments"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindInputAttachments;}();
auto& json_value=json["supportedDepthResolveModes"];
[&](){[&](){[&](){json_value=member.supportedDepthResolveModes;}();}();}();
auto& json_value=json["supportedStencilResolveModes"];
[&](){[&](){[&](){json_value=member.supportedStencilResolveModes;}();}();}();
auto& json_value=json["independentResolveNone"];
[&](){[&](){json_value=member.independentResolveNone;}();}();
auto& json_value=json["independentResolve"];
[&](){[&](){json_value=member.independentResolve;}();}();
auto& json_value=json["filterMinmaxSingleComponentFormats"];
[&](){[&](){json_value=member.filterMinmaxSingleComponentFormats;}();}();
auto& json_value=json["filterMinmaxImageComponentMapping"];
[&](){[&](){json_value=member.filterMinmaxImageComponentMapping;}();}();
auto& json_value=json["maxTimelineSemaphoreValueDifference"];
[&](){json_value=member.maxTimelineSemaphoreValueDifference;}();
auto& json_value=json["framebufferIntegerColorSampleCounts"];
[&](){[&](){[&](){json_value=member.framebufferIntegerColorSampleCounts;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVulkan12Properties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["driverID"];
[&](){[&](){VkDriverId temp_gEVfXKa[&](){temp_gEVfXKa=static_cast<int>(value_to<int>(json_value));}();member.driverID=(VkDriverId)temp_gEVfXKa;}();}();
auto& json_value=json["driverName"];
[&](){
        auto& arr=json_value.as_array();
        for(int eglnjYG=0; eglnjYG < VK_MAX_DRIVER_NAME_SIZE; eglnjYG++){
            [&](){member.driverName[eglnjYG]=static_cast<char>(value_to<int>(json_value[eglnjYG]));}();
        }
        }();
auto& json_value=json["driverInfo"];
[&](){
        auto& arr=json_value.as_array();
        for(int ygBYlpo=0; ygBYlpo < VK_MAX_DRIVER_INFO_SIZE; ygBYlpo++){
            [&](){member.driverInfo[ygBYlpo]=static_cast<char>(value_to<int>(json_value[ygBYlpo]));}();
        }
        }();
auto& json_value=json["conformanceVersion"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.conformanceVersion);
            }();
auto& json_value=json["denormBehaviorIndependence"];
[&](){[&](){VkShaderFloatControlsIndependence temp_MFkuOJI[&](){temp_MFkuOJI=static_cast<int>(value_to<int>(json_value));}();member.denormBehaviorIndependence=(VkShaderFloatControlsIndependence)temp_MFkuOJI;}();}();
auto& json_value=json["roundingModeIndependence"];
[&](){[&](){VkShaderFloatControlsIndependence temp_QhEkDlD[&](){temp_QhEkDlD=static_cast<int>(value_to<int>(json_value));}();member.roundingModeIndependence=(VkShaderFloatControlsIndependence)temp_QhEkDlD;}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat16"];
[&](){[&](){member.shaderSignedZeroInfNanPreserveFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat32"];
[&](){[&](){member.shaderSignedZeroInfNanPreserveFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSignedZeroInfNanPreserveFloat64"];
[&](){[&](){member.shaderSignedZeroInfNanPreserveFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormPreserveFloat16"];
[&](){[&](){member.shaderDenormPreserveFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormPreserveFloat32"];
[&](){[&](){member.shaderDenormPreserveFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormPreserveFloat64"];
[&](){[&](){member.shaderDenormPreserveFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat16"];
[&](){[&](){member.shaderDenormFlushToZeroFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat32"];
[&](){[&](){member.shaderDenormFlushToZeroFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDenormFlushToZeroFloat64"];
[&](){[&](){member.shaderDenormFlushToZeroFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTEFloat16"];
[&](){[&](){member.shaderRoundingModeRTEFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTEFloat32"];
[&](){[&](){member.shaderRoundingModeRTEFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTEFloat64"];
[&](){[&](){member.shaderRoundingModeRTEFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTZFloat16"];
[&](){[&](){member.shaderRoundingModeRTZFloat16=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTZFloat32"];
[&](){[&](){member.shaderRoundingModeRTZFloat32=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderRoundingModeRTZFloat64"];
[&](){[&](){member.shaderRoundingModeRTZFloat64=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxUpdateAfterBindDescriptorsInAllPools"];
[&](){member.maxUpdateAfterBindDescriptorsInAllPools=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderUniformBufferArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderUniformBufferArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderSampledImageArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderSampledImageArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageBufferArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderStorageBufferArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderStorageImageArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderStorageImageArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderInputAttachmentArrayNonUniformIndexingNative"];
[&](){[&](){member.shaderInputAttachmentArrayNonUniformIndexingNative=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["robustBufferAccessUpdateAfterBind"];
[&](){[&](){member.robustBufferAccessUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["quadDivergentImplicitLod"];
[&](){[&](){member.quadDivergentImplicitLod=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSamplers"];
[&](){member.maxPerStageDescriptorUpdateAfterBindSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindUniformBuffers"];
[&](){member.maxPerStageDescriptorUpdateAfterBindUniformBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageBuffers"];
[&](){member.maxPerStageDescriptorUpdateAfterBindStorageBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindSampledImages"];
[&](){member.maxPerStageDescriptorUpdateAfterBindSampledImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindStorageImages"];
[&](){member.maxPerStageDescriptorUpdateAfterBindStorageImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInputAttachments"];
[&](){member.maxPerStageDescriptorUpdateAfterBindInputAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageUpdateAfterBindResources"];
[&](){member.maxPerStageUpdateAfterBindResources=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSamplers"];
[&](){member.maxDescriptorSetUpdateAfterBindSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffers"];
[&](){member.maxDescriptorSetUpdateAfterBindUniformBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"];
[&](){member.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffers"];
[&](){member.maxDescriptorSetUpdateAfterBindStorageBuffers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"];
[&](){member.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindSampledImages"];
[&](){member.maxDescriptorSetUpdateAfterBindSampledImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindStorageImages"];
[&](){member.maxDescriptorSetUpdateAfterBindStorageImages=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInputAttachments"];
[&](){member.maxDescriptorSetUpdateAfterBindInputAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["supportedDepthResolveModes"];
[&](){[&](){VkResolveModeFlags temp_BeDPjhU[&](){temp_BeDPjhU=static_cast<int>(value_to<int>(json_value));}();member.supportedDepthResolveModes=(VkResolveModeFlags)temp_BeDPjhU;}();}();
auto& json_value=json["supportedStencilResolveModes"];
[&](){[&](){VkResolveModeFlags temp_jfujlBO[&](){temp_jfujlBO=static_cast<int>(value_to<int>(json_value));}();member.supportedStencilResolveModes=(VkResolveModeFlags)temp_jfujlBO;}();}();
auto& json_value=json["independentResolveNone"];
[&](){[&](){member.independentResolveNone=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["independentResolve"];
[&](){[&](){member.independentResolve=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["filterMinmaxSingleComponentFormats"];
[&](){[&](){member.filterMinmaxSingleComponentFormats=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["filterMinmaxImageComponentMapping"];
[&](){[&](){member.filterMinmaxImageComponentMapping=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxTimelineSemaphoreValueDifference"];
[&](){member.maxTimelineSemaphoreValueDifference=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["framebufferIntegerColorSampleCounts"];
[&](){[&](){VkSampleCountFlags temp_xuYrawV[&](){temp_xuYrawV=static_cast<int>(value_to<int>(json_value));}();member.framebufferIntegerColorSampleCounts=(VkSampleCountFlags)temp_xuYrawV;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVulkan12Properties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVulkan12Properties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVulkan13Features& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["robustImageAccess"];
[&](){[&](){json_value=member.robustImageAccess;}();}();
auto& json_value=json["inlineUniformBlock"];
[&](){[&](){json_value=member.inlineUniformBlock;}();}();
auto& json_value=json["descriptorBindingInlineUniformBlockUpdateAfterBind"];
[&](){[&](){json_value=member.descriptorBindingInlineUniformBlockUpdateAfterBind;}();}();
auto& json_value=json["pipelineCreationCacheControl"];
[&](){[&](){json_value=member.pipelineCreationCacheControl;}();}();
auto& json_value=json["privateData"];
[&](){[&](){json_value=member.privateData;}();}();
auto& json_value=json["shaderDemoteToHelperInvocation"];
[&](){[&](){json_value=member.shaderDemoteToHelperInvocation;}();}();
auto& json_value=json["shaderTerminateInvocation"];
[&](){[&](){json_value=member.shaderTerminateInvocation;}();}();
auto& json_value=json["subgroupSizeControl"];
[&](){[&](){json_value=member.subgroupSizeControl;}();}();
auto& json_value=json["computeFullSubgroups"];
[&](){[&](){json_value=member.computeFullSubgroups;}();}();
auto& json_value=json["synchronization2"];
[&](){[&](){json_value=member.synchronization2;}();}();
auto& json_value=json["textureCompressionASTC_HDR"];
[&](){[&](){json_value=member.textureCompressionASTC_HDR;}();}();
auto& json_value=json["shaderZeroInitializeWorkgroupMemory"];
[&](){[&](){json_value=member.shaderZeroInitializeWorkgroupMemory;}();}();
auto& json_value=json["dynamicRendering"];
[&](){[&](){json_value=member.dynamicRendering;}();}();
auto& json_value=json["shaderIntegerDotProduct"];
[&](){[&](){json_value=member.shaderIntegerDotProduct;}();}();
auto& json_value=json["maintenance4"];
[&](){[&](){json_value=member.maintenance4;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVulkan13Features& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["robustImageAccess"];
[&](){[&](){member.robustImageAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["inlineUniformBlock"];
[&](){[&](){member.inlineUniformBlock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBindingInlineUniformBlockUpdateAfterBind"];
[&](){[&](){member.descriptorBindingInlineUniformBlockUpdateAfterBind=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["pipelineCreationCacheControl"];
[&](){[&](){member.pipelineCreationCacheControl=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["privateData"];
[&](){[&](){member.privateData=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderDemoteToHelperInvocation"];
[&](){[&](){member.shaderDemoteToHelperInvocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderTerminateInvocation"];
[&](){[&](){member.shaderTerminateInvocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["subgroupSizeControl"];
[&](){[&](){member.subgroupSizeControl=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["computeFullSubgroups"];
[&](){[&](){member.computeFullSubgroups=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["synchronization2"];
[&](){[&](){member.synchronization2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["textureCompressionASTC_HDR"];
[&](){[&](){member.textureCompressionASTC_HDR=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderZeroInitializeWorkgroupMemory"];
[&](){[&](){member.shaderZeroInitializeWorkgroupMemory=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dynamicRendering"];
[&](){[&](){member.dynamicRendering=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderIntegerDotProduct"];
[&](){[&](){member.shaderIntegerDotProduct=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maintenance4"];
[&](){[&](){member.maintenance4=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVulkan13Features& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVulkan13Features& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVulkan13Properties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minSubgroupSize"];
[&](){json_value=member.minSubgroupSize;}();
auto& json_value=json["maxSubgroupSize"];
[&](){json_value=member.maxSubgroupSize;}();
auto& json_value=json["maxComputeWorkgroupSubgroups"];
[&](){json_value=member.maxComputeWorkgroupSubgroups;}();
auto& json_value=json["requiredSubgroupSizeStages"];
[&](){[&](){[&](){json_value=member.requiredSubgroupSizeStages;}();}();}();
auto& json_value=json["maxInlineUniformBlockSize"];
[&](){json_value=member.maxInlineUniformBlockSize;}();
auto& json_value=json["maxPerStageDescriptorInlineUniformBlocks"];
[&](){json_value=member.maxPerStageDescriptorInlineUniformBlocks;}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"];
[&](){json_value=member.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;}();
auto& json_value=json["maxDescriptorSetInlineUniformBlocks"];
[&](){json_value=member.maxDescriptorSetInlineUniformBlocks;}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInlineUniformBlocks"];
[&](){json_value=member.maxDescriptorSetUpdateAfterBindInlineUniformBlocks;}();
auto& json_value=json["maxInlineUniformTotalSize"];
[&](){json_value=member.maxInlineUniformTotalSize;}();
auto& json_value=json["integerDotProduct8BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct8BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct8BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct8BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct8BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct8BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct4x8BitPackedUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct4x8BitPackedUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct4x8BitPackedSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct4x8BitPackedSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct4x8BitPackedMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct16BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct16BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct16BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct16BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct16BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct16BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct32BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct32BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct32BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct32BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct32BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct32BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct64BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct64BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct64BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct64BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct64BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct64BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating8BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating16BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating32BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating64BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;}();}();
auto& json_value=json["storageTexelBufferOffsetAlignmentBytes"];
[&](){[&](){json_value=member.storageTexelBufferOffsetAlignmentBytes;}();}();
auto& json_value=json["storageTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){json_value=member.storageTexelBufferOffsetSingleTexelAlignment;}();}();
auto& json_value=json["uniformTexelBufferOffsetAlignmentBytes"];
[&](){[&](){json_value=member.uniformTexelBufferOffsetAlignmentBytes;}();}();
auto& json_value=json["uniformTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){json_value=member.uniformTexelBufferOffsetSingleTexelAlignment;}();}();
auto& json_value=json["maxBufferSize"];
[&](){[&](){json_value=member.maxBufferSize;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVulkan13Properties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["minSubgroupSize"];
[&](){member.minSubgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxSubgroupSize"];
[&](){member.maxSubgroupSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxComputeWorkgroupSubgroups"];
[&](){member.maxComputeWorkgroupSubgroups=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["requiredSubgroupSizeStages"];
[&](){[&](){VkShaderStageFlags temp_ICfUaTk[&](){temp_ICfUaTk=static_cast<int>(value_to<int>(json_value));}();member.requiredSubgroupSizeStages=(VkShaderStageFlags)temp_ICfUaTk;}();}();
auto& json_value=json["maxInlineUniformBlockSize"];
[&](){member.maxInlineUniformBlockSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorInlineUniformBlocks"];
[&](){member.maxPerStageDescriptorInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"];
[&](){member.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetInlineUniformBlocks"];
[&](){member.maxDescriptorSetInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxDescriptorSetUpdateAfterBindInlineUniformBlocks"];
[&](){member.maxDescriptorSetUpdateAfterBindInlineUniformBlocks=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxInlineUniformTotalSize"];
[&](){member.maxInlineUniformTotalSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["integerDotProduct8BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct8BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct8BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct8BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct8BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct8BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct4x8BitPackedUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct4x8BitPackedUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct4x8BitPackedSignedAccelerated"];
[&](){[&](){member.integerDotProduct4x8BitPackedSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct4x8BitPackedMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct16BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct16BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct16BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct16BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct16BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct16BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct32BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct32BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct32BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct32BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct32BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct32BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct64BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct64BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct64BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct64BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct64BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct64BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating8BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating16BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating32BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating64BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storageTexelBufferOffsetAlignmentBytes"];
[&](){[&](){member.storageTexelBufferOffsetAlignmentBytes=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["storageTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){member.storageTexelBufferOffsetSingleTexelAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformTexelBufferOffsetAlignmentBytes"];
[&](){[&](){member.uniformTexelBufferOffsetAlignmentBytes=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["uniformTexelBufferOffsetSingleTexelAlignment"];
[&](){[&](){member.uniformTexelBufferOffsetSingleTexelAlignment=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxBufferSize"];
[&](){[&](){member.maxBufferSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVulkan13Properties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVulkan13Properties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineCompilerControlCreateInfoAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["compilerControlFlags"];
[&](){[&](){[&](){json_value=member.compilerControlFlags;}();}();}();
}
void deserialize_struct(object& json, VkPipelineCompilerControlCreateInfoAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["compilerControlFlags"];
[&](){[&](){VkPipelineCompilerControlFlagsAMD temp_ysNxDVH[&](){temp_ysNxDVH=static_cast<int>(value_to<int>(json_value));}();member.compilerControlFlags=(VkPipelineCompilerControlFlagsAMD)temp_ysNxDVH;}();}();
}

    void serialize_pUserData(object& json, VkPipelineCompilerControlCreateInfoAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineCompilerControlCreateInfoAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCoherentMemoryFeaturesAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceCoherentMemory"];
[&](){[&](){json_value=member.deviceCoherentMemory;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCoherentMemoryFeaturesAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceCoherentMemory"];
[&](){[&](){member.deviceCoherentMemory=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCoherentMemoryFeaturesAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCoherentMemoryFeaturesAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceToolProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int acRPAEG=0; acRPAEG < VK_MAX_EXTENSION_NAME_SIZE; acRPAEG++){
            [&](){json_value[acRPAEG]=member.name[acRPAEG];}();
        }
        }();
auto& json_value=json["version"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int IKwHmbc=0; IKwHmbc < VK_MAX_EXTENSION_NAME_SIZE; IKwHmbc++){
            [&](){json_value[IKwHmbc]=member.version[IKwHmbc];}();
        }
        }();
auto& json_value=json["purposes"];
[&](){[&](){[&](){json_value=member.purposes;}();}();}();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
auto& json_value=json["layer"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int UTJjPWd=0; UTJjPWd < VK_MAX_EXTENSION_NAME_SIZE; UTJjPWd++){
            [&](){json_value[UTJjPWd]=member.layer[UTJjPWd];}();
        }
        }();
}
void deserialize_struct(object& json, VkPhysicalDeviceToolProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["name"];
[&](){
        auto& arr=json_value.as_array();
        for(int acRPAEG=0; acRPAEG < VK_MAX_EXTENSION_NAME_SIZE; acRPAEG++){
            [&](){member.name[acRPAEG]=static_cast<char>(value_to<int>(json_value[acRPAEG]));}();
        }
        }();
auto& json_value=json["version"];
[&](){
        auto& arr=json_value.as_array();
        for(int IKwHmbc=0; IKwHmbc < VK_MAX_EXTENSION_NAME_SIZE; IKwHmbc++){
            [&](){member.version[IKwHmbc]=static_cast<char>(value_to<int>(json_value[IKwHmbc]));}();
        }
        }();
auto& json_value=json["purposes"];
[&](){[&](){VkToolPurposeFlags temp_tAFQtUj[&](){temp_tAFQtUj=static_cast<int>(value_to<int>(json_value));}();member.purposes=(VkToolPurposeFlags)temp_tAFQtUj;}();}();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
auto& json_value=json["layer"];
[&](){
        auto& arr=json_value.as_array();
        for(int UTJjPWd=0; UTJjPWd < VK_MAX_EXTENSION_NAME_SIZE; UTJjPWd++){
            [&](){member.layer[UTJjPWd]=static_cast<char>(value_to<int>(json_value[UTJjPWd]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceToolProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceToolProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerCustomBorderColorCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["customBorderColor"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.customBorderColor);
            }();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
}
void deserialize_struct(object& json, VkSamplerCustomBorderColorCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["customBorderColor"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.customBorderColor);
            }();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
}

    void serialize_pUserData(object& json, VkSamplerCustomBorderColorCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerCustomBorderColorCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCustomBorderColorPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxCustomBorderColorSamplers"];
[&](){json_value=member.maxCustomBorderColorSamplers;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCustomBorderColorPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxCustomBorderColorSamplers"];
[&](){member.maxCustomBorderColorSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCustomBorderColorPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCustomBorderColorPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCustomBorderColorFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["customBorderColors"];
[&](){[&](){json_value=member.customBorderColors;}();}();
auto& json_value=json["customBorderColorWithoutFormat"];
[&](){[&](){json_value=member.customBorderColorWithoutFormat;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCustomBorderColorFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["customBorderColors"];
[&](){[&](){member.customBorderColors=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["customBorderColorWithoutFormat"];
[&](){[&](){member.customBorderColorWithoutFormat=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCustomBorderColorFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCustomBorderColorFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerBorderColorComponentMappingCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["components"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.components);
            }();
auto& json_value=json["srgb"];
[&](){[&](){json_value=member.srgb;}();}();
}
void deserialize_struct(object& json, VkSamplerBorderColorComponentMappingCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["components"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.components);
            }();
auto& json_value=json["srgb"];
[&](){[&](){member.srgb=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSamplerBorderColorComponentMappingCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerBorderColorComponentMappingCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["borderColorSwizzle"];
[&](){[&](){json_value=member.borderColorSwizzle;}();}();
auto& json_value=json["borderColorSwizzleFromImage"];
[&](){[&](){json_value=member.borderColorSwizzleFromImage;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["borderColorSwizzle"];
[&](){[&](){member.borderColorSwizzle=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["borderColorSwizzleFromImage"];
[&](){[&](){member.borderColorSwizzleFromImage=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceBorderColorSwizzleFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceOrHostAddressKHR& member){
        
    
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
auto& json_value=json["hostAddress"];
[&](){
            if (member.hostAddress==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.hostAddress)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UYQdwVY=0; UYQdwVY < strlen((char*)(member.hostAddress))+1; UYQdwVY++){
            [&](){json_value[UYQdwVY]=(char*)(member.hostAddress)[UYQdwVY];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkDeviceOrHostAddressKHR& member){
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["hostAddress"];
[&](){
            if (!json_value.as_array().size()==0){
                member.hostAddress=NULL;
            return; }char* temp_PGSyIEh;[&](){
            if (!json_value.as_array().size()==0){
                member.hostAddress=NULL;
            return; }member.hostAddress=(char*)malloc(member.hostAddress.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int UYQdwVY=0; UYQdwVY < member.hostAddress.as_array().size();; UYQdwVY++){
            [&](){member.hostAddress[UYQdwVY]=static_cast<char>(value_to<int>(json_value[UYQdwVY]));}();
        }
        }();member.hostAddress=temp_PGSyIEh;}();
}

    void serialize_pUserData(object& json, VkDeviceOrHostAddressKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceOrHostAddressKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceOrHostAddressConstKHR& member){
        
    
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
auto& json_value=json["hostAddress"];
[&](){
            if (member.hostAddress==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.hostAddress)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int VRRvftU=0; VRRvftU < strlen((char*)(member.hostAddress))+1; VRRvftU++){
            [&](){json_value[VRRvftU]=(char*)(member.hostAddress)[VRRvftU];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkDeviceOrHostAddressConstKHR& member){
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["hostAddress"];
[&](){ void* temp_BaTEZDg[&](){
            if (!json_value.as_array().size()==0){
                temp_BaTEZDg=NULL;
            return; }char* temp_gTvzgdT;[&](){
            if (!json_value.as_array().size()==0){
                temp_BaTEZDg=NULL;
            return; }temp_BaTEZDg=(char*)malloc(temp_BaTEZDg.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int HqoDSMo=0; HqoDSMo < temp_BaTEZDg.as_array().size();; HqoDSMo++){
            [&](){temp_BaTEZDg[HqoDSMo]=static_cast<char>(value_to<int>(json_value[HqoDSMo]));}();
        }
        }();temp_BaTEZDg=temp_gTvzgdT;}();member.hostAddress=temp_BaTEZDg;}();
}

    void serialize_pUserData(object& json, VkDeviceOrHostAddressConstKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceOrHostAddressConstKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureGeometryTrianglesDataKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["vertexFormat"];
[&](){[&](){[&](){json_value=member.vertexFormat;}();}();}();
auto& json_value=json["vertexData"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.vertexData);
            }();
auto& json_value=json["vertexStride"];
[&](){[&](){json_value=member.vertexStride;}();}();
auto& json_value=json["maxVertex"];
[&](){json_value=member.maxVertex;}();
auto& json_value=json["indexType"];
[&](){[&](){[&](){json_value=member.indexType;}();}();}();
auto& json_value=json["indexData"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.indexData);
            }();
auto& json_value=json["transformData"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.transformData);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureGeometryTrianglesDataKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["vertexFormat"];
[&](){[&](){VkFormat temp_BjrHjGA[&](){temp_BjrHjGA=static_cast<int>(value_to<int>(json_value));}();member.vertexFormat=(VkFormat)temp_BjrHjGA;}();}();
auto& json_value=json["vertexData"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.vertexData);
            }();
auto& json_value=json["vertexStride"];
[&](){[&](){member.vertexStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxVertex"];
[&](){member.maxVertex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["indexType"];
[&](){[&](){VkIndexType temp_oHMXYuj[&](){temp_oHMXYuj=static_cast<int>(value_to<int>(json_value));}();member.indexType=(VkIndexType)temp_oHMXYuj;}();}();
auto& json_value=json["indexData"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.indexData);
            }();
auto& json_value=json["transformData"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.transformData);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureGeometryTrianglesDataKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureGeometryTrianglesDataKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureGeometryAabbsDataKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.data);
            }();
auto& json_value=json["stride"];
[&](){[&](){json_value=member.stride;}();}();
}
void deserialize_struct(object& json, VkAccelerationStructureGeometryAabbsDataKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.data);
            }();
auto& json_value=json["stride"];
[&](){[&](){member.stride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureGeometryAabbsDataKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureGeometryAabbsDataKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureGeometryInstancesDataKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["arrayOfPointers"];
[&](){[&](){json_value=member.arrayOfPointers;}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.data);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureGeometryInstancesDataKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["arrayOfPointers"];
[&](){[&](){member.arrayOfPointers=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.data);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureGeometryInstancesDataKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureGeometryInstancesDataKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureGeometryDataKHR& member){
        
    
auto& json_value=json["triangles"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.triangles);
            }();
auto& json_value=json["aabbs"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.aabbs);
            }();
auto& json_value=json["instances"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.instances);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureGeometryDataKHR& member){
auto& json_value=json["triangles"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.triangles);
            }();
auto& json_value=json["aabbs"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.aabbs);
            }();
auto& json_value=json["instances"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.instances);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureGeometryDataKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureGeometryDataKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureGeometryKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["geometryType"];
[&](){[&](){[&](){json_value=member.geometryType;}();}();}();
auto& json_value=json["geometry"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.geometry);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkAccelerationStructureGeometryKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["geometryType"];
[&](){[&](){VkGeometryTypeKHR temp_SVgXqXU[&](){temp_SVgXqXU=static_cast<int>(value_to<int>(json_value));}();member.geometryType=(VkGeometryTypeKHR)temp_SVgXqXU;}();}();
auto& json_value=json["geometry"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.geometry);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkGeometryFlagsKHR temp_DeoBIwl[&](){temp_DeoBIwl=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkGeometryFlagsKHR)temp_DeoBIwl;}();}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureGeometryKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureGeometryKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureBuildGeometryInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
auto& json_value=json["srcAccelerationStructure"];
[&](){serialize_handle(json_value,member.srcAccelerationStructure);}();
auto& json_value=json["dstAccelerationStructure"];
[&](){serialize_handle(json_value,member.dstAccelerationStructure);}();
auto& json_value=json["geometryCount"];
[&](){json_value=member.geometryCount;}();
auto& json_value=json["pGeometries"];
[&](){
            if (member.pGeometries==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int fhUWMAC=0; fhUWMAC < member.geometryCount; fhUWMAC++){
            [&](){
            auto& temp=json_value[fhUWMAC].emplace_object();
            return serialize_struct(temp, member.pGeometries[fhUWMAC]);
            }();
        }
        }();
auto& json_value=json["ppGeometries"];
[&](){
            if (member.ppGeometries==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int TtQPDAY=0; TtQPDAY < member.geometryCount; TtQPDAY++){
            [&](){
            if (member.ppGeometries[TtQPDAY]==NULL){
                json_value[TtQPDAY]=array();
            return; }
        auto& arr=json_value[TtQPDAY].emplace_array();
        for(int HJMKlZa=0; HJMKlZa < 1; HJMKlZa++){
            [&](){
            auto& temp=json_value[TtQPDAY][HJMKlZa].emplace_object();
            return serialize_struct(temp, member.ppGeometries[TtQPDAY][HJMKlZa]);
            }();
        }
        }();
        }
        }();
auto& json_value=json["scratchData"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.scratchData);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureBuildGeometryInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkAccelerationStructureTypeKHR temp_vPpRWAP[&](){temp_vPpRWAP=static_cast<int>(value_to<int>(json_value));}();member.type=(VkAccelerationStructureTypeKHR)temp_vPpRWAP;}();}();
auto& json_value=json["flags"];
[&](){[&](){VkBuildAccelerationStructureFlagsKHR temp_EpukyAh[&](){temp_EpukyAh=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkBuildAccelerationStructureFlagsKHR)temp_EpukyAh;}();}();
auto& json_value=json["mode"];
[&](){[&](){VkBuildAccelerationStructureModeKHR temp_gqyUkdR[&](){temp_gqyUkdR=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkBuildAccelerationStructureModeKHR)temp_gqyUkdR;}();}();
auto& json_value=json["srcAccelerationStructure"];
[&](){deserialize_handle(json_value, member.srcAccelerationStructure);}();
auto& json_value=json["dstAccelerationStructure"];
[&](){deserialize_handle(json_value, member.dstAccelerationStructure);}();
auto& json_value=json["geometryCount"];
[&](){member.geometryCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pGeometries"];
[&](){ VkAccelerationStructureGeometryKHR* temp_ZDJWbAu[&](){
            if (!json_value.as_array().size()==0){
                temp_ZDJWbAu=NULL;
            return; }temp_ZDJWbAu=(VkAccelerationStructureGeometryKHR*)malloc(member.geometryCount*sizeof(VkAccelerationStructureGeometryKHR));
        auto& arr=json_value.as_array();
        for(int OecFmyq=0; OecFmyq < member.geometryCount; OecFmyq++){
            [&](){
            auto& temp=json_value[OecFmyq].as_object();
            deserialize_struct(temp,temp_ZDJWbAu[OecFmyq]);
            }();
        }
        }();member.pGeometries=temp_ZDJWbAu;}();
auto& json_value=json["ppGeometries"];
[&](){ VkAccelerationStructureGeometryKHR* * temp_patmOdE[&](){
            if (!json_value.as_array().size()==0){
                temp_patmOdE=NULL;
            return; }temp_patmOdE=(VkAccelerationStructureGeometryKHR**)malloc(member.geometryCount*sizeof(VkAccelerationStructureGeometryKHR*));
        auto& arr=json_value.as_array();
        for(int EgklKvE=0; EgklKvE < member.geometryCount; EgklKvE++){
            [&](){
            if (!json_value[EgklKvE].as_array().size()==0){
                temp_patmOdE[EgklKvE]=NULL;
            return; }temp_patmOdE[EgklKvE]=(VkAccelerationStructureGeometryKHR*)malloc(1*sizeof(VkAccelerationStructureGeometryKHR));
        auto& arr=json_value[EgklKvE].as_array();
        for(int ZISyXgB=0; ZISyXgB < 1; ZISyXgB++){
            [&](){
            auto& temp=json_value[EgklKvE][ZISyXgB].as_object();
            deserialize_struct(temp,temp_patmOdE[EgklKvE][ZISyXgB]);
            }();
        }
        }();
        }
        }();member.ppGeometries=temp_patmOdE;}();
auto& json_value=json["scratchData"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.scratchData);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureBuildGeometryInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureBuildGeometryInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureBuildRangeInfoKHR& member){
        
    
auto& json_value=json["primitiveCount"];
[&](){json_value=member.primitiveCount;}();
auto& json_value=json["primitiveOffset"];
[&](){json_value=member.primitiveOffset;}();
auto& json_value=json["firstVertex"];
[&](){json_value=member.firstVertex;}();
auto& json_value=json["transformOffset"];
[&](){json_value=member.transformOffset;}();
}
void deserialize_struct(object& json, VkAccelerationStructureBuildRangeInfoKHR& member){
auto& json_value=json["primitiveCount"];
[&](){member.primitiveCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["primitiveOffset"];
[&](){member.primitiveOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["firstVertex"];
[&](){member.firstVertex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["transformOffset"];
[&](){member.transformOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureBuildRangeInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureBuildRangeInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["createFlags"];
[&](){[&](){[&](){json_value=member.createFlags;}();}();}();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
}
void deserialize_struct(object& json, VkAccelerationStructureCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["createFlags"];
[&](){[&](){VkAccelerationStructureCreateFlagsKHR temp_xIgSaLi[&](){temp_xIgSaLi=static_cast<int>(value_to<int>(json_value));}();member.createFlags=(VkAccelerationStructureCreateFlagsKHR)temp_xIgSaLi;}();}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["type"];
[&](){[&](){VkAccelerationStructureTypeKHR temp_vPpRWAP[&](){temp_vPpRWAP=static_cast<int>(value_to<int>(json_value));}();member.type=(VkAccelerationStructureTypeKHR)temp_vPpRWAP;}();}();
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAabbPositionsKHR& member){
        
    
auto& json_value=json["minX"];
[&](){json_value=member.minX;}();
auto& json_value=json["minY"];
[&](){json_value=member.minY;}();
auto& json_value=json["minZ"];
[&](){json_value=member.minZ;}();
auto& json_value=json["maxX"];
[&](){json_value=member.maxX;}();
auto& json_value=json["maxY"];
[&](){json_value=member.maxY;}();
auto& json_value=json["maxZ"];
[&](){json_value=member.maxZ;}();
}
void deserialize_struct(object& json, VkAabbPositionsKHR& member){
auto& json_value=json["minX"];
[&](){member.minX=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["minY"];
[&](){member.minY=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["minZ"];
[&](){member.minZ=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxX"];
[&](){member.maxX=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxY"];
[&](){member.maxY=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["maxZ"];
[&](){member.maxZ=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAabbPositionsKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAabbPositionsKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkTransformMatrixKHR& member){
        
    
auto& json_value=json["matrix"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int HGQDLyT=0; HGQDLyT < 3; HGQDLyT++){
            [&](){
        auto& arr=json_value[HGQDLyT].emplace_array();
        for(int KxyDbYu=0; KxyDbYu < 4; KxyDbYu++){
            [&](){json_value[HGQDLyT][KxyDbYu]=member.matrix[HGQDLyT][KxyDbYu];}();
        }
        }();
        }
        }();
}
void deserialize_struct(object& json, VkTransformMatrixKHR& member){
auto& json_value=json["matrix"];
[&](){
        auto& arr=json_value.as_array();
        for(int HGQDLyT=0; HGQDLyT < 3; HGQDLyT++){
            [&](){
        auto& arr=json_value[HGQDLyT].as_array();
        for(int KxyDbYu=0; KxyDbYu < 4; KxyDbYu++){
            [&](){member.matrix[HGQDLyT][KxyDbYu]=static_cast<float>(value_to<int>(json_value[HGQDLyT][KxyDbYu]));}();
        }
        }();
        }
        }();
}

    void serialize_pUserData(object& json, VkTransformMatrixKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkTransformMatrixKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureInstanceKHR& member){
        
    
auto& json_value=json["transform"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.transform);
            }();
auto& json_value=json["instanceCustomIndex"];
[&](){json_value=member.instanceCustomIndex;}();
auto& json_value=json["mask"];
[&](){json_value=member.mask;}();
auto& json_value=json["instanceShaderBindingTableRecordOffset"];
[&](){json_value=member.instanceShaderBindingTableRecordOffset;}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["accelerationStructureReference"];
[&](){json_value=member.accelerationStructureReference;}();
}
void deserialize_struct(object& json, VkAccelerationStructureInstanceKHR& member){
auto& json_value=json["transform"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.transform);
            }();
auto& json_value=json["instanceCustomIndex"];
[&](){member.instanceCustomIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["mask"];
[&](){member.mask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["instanceShaderBindingTableRecordOffset"];
[&](){member.instanceShaderBindingTableRecordOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["flags"];
[&](){[&](){VkGeometryInstanceFlagsKHR temp_qKxAASg:8[&](){temp_qKxAASg=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkGeometryInstanceFlagsKHR)temp_qKxAASg;}();}();
auto& json_value=json["accelerationStructureReference"];
[&](){member.accelerationStructureReference=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureInstanceKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureInstanceKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureDeviceAddressInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["accelerationStructure"];
[&](){serialize_handle(json_value,member.accelerationStructure);}();
}
void deserialize_struct(object& json, VkAccelerationStructureDeviceAddressInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["accelerationStructure"];
[&](){deserialize_handle(json_value, member.accelerationStructure);}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureDeviceAddressInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureDeviceAddressInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureVersionInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pVersionData"];
[&](){
            if (member.pVersionData==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UXnQvHZ=0; UXnQvHZ < 2*VK_UUID_SIZE; UXnQvHZ++){
            [&](){json_value[UXnQvHZ]=member.pVersionData[UXnQvHZ];}();
        }
        }();
}
void deserialize_struct(object& json, VkAccelerationStructureVersionInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pVersionData"];
[&](){ uint8_t* temp_kcsYiSk[&](){
            if (!json_value.as_array().size()==0){
                temp_kcsYiSk=NULL;
            return; }temp_kcsYiSk=(uint8_t*)malloc(2*VK_UUID_SIZE*sizeof(uint8_t));
        auto& arr=json_value.as_array();
        for(int aPYYtKH=0; aPYYtKH < 2*VK_UUID_SIZE; aPYYtKH++){
            [&](){temp_kcsYiSk[aPYYtKH]=static_cast<uint8_t>(value_to<int>(json_value[aPYYtKH]));}();
        }
        }();member.pVersionData=temp_kcsYiSk;}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureVersionInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureVersionInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyAccelerationStructureInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["src"];
[&](){serialize_handle(json_value,member.src);}();
auto& json_value=json["dst"];
[&](){serialize_handle(json_value,member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
}
void deserialize_struct(object& json, VkCopyAccelerationStructureInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["src"];
[&](){deserialize_handle(json_value, member.src);}();
auto& json_value=json["dst"];
[&](){deserialize_handle(json_value, member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){VkCopyAccelerationStructureModeKHR temp_pivyLHt[&](){temp_pivyLHt=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkCopyAccelerationStructureModeKHR)temp_pivyLHt;}();}();
}

    void serialize_pUserData(object& json, VkCopyAccelerationStructureInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyAccelerationStructureInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyAccelerationStructureToMemoryInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["src"];
[&](){serialize_handle(json_value,member.src);}();
auto& json_value=json["dst"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dst);
            }();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
}
void deserialize_struct(object& json, VkCopyAccelerationStructureToMemoryInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["src"];
[&](){deserialize_handle(json_value, member.src);}();
auto& json_value=json["dst"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dst);
            }();
auto& json_value=json["mode"];
[&](){[&](){VkCopyAccelerationStructureModeKHR temp_pivyLHt[&](){temp_pivyLHt=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkCopyAccelerationStructureModeKHR)temp_pivyLHt;}();}();
}

    void serialize_pUserData(object& json, VkCopyAccelerationStructureToMemoryInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyAccelerationStructureToMemoryInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyMemoryToAccelerationStructureInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["src"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.src);
            }();
auto& json_value=json["dst"];
[&](){serialize_handle(json_value,member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
}
void deserialize_struct(object& json, VkCopyMemoryToAccelerationStructureInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["src"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.src);
            }();
auto& json_value=json["dst"];
[&](){deserialize_handle(json_value, member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){VkCopyAccelerationStructureModeKHR temp_pivyLHt[&](){temp_pivyLHt=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkCopyAccelerationStructureModeKHR)temp_pivyLHt;}();}();
}

    void serialize_pUserData(object& json, VkCopyMemoryToAccelerationStructureInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyMemoryToAccelerationStructureInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRayTracingPipelineInterfaceCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxPipelineRayPayloadSize"];
[&](){json_value=member.maxPipelineRayPayloadSize;}();
auto& json_value=json["maxPipelineRayHitAttributeSize"];
[&](){json_value=member.maxPipelineRayHitAttributeSize;}();
}
void deserialize_struct(object& json, VkRayTracingPipelineInterfaceCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["maxPipelineRayPayloadSize"];
[&](){member.maxPipelineRayPayloadSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxPipelineRayHitAttributeSize"];
[&](){member.maxPipelineRayHitAttributeSize=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRayTracingPipelineInterfaceCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRayTracingPipelineInterfaceCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineLibraryCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["libraryCount"];
[&](){json_value=member.libraryCount;}();
auto& json_value=json["pLibraries"];
[&](){
            if (member.pLibraries==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int nmCoQWf=0; nmCoQWf < member.libraryCount; nmCoQWf++){
            [&](){serialize_handle(json_value[nmCoQWf],member.pLibraries[nmCoQWf]);}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineLibraryCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["libraryCount"];
[&](){member.libraryCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pLibraries"];
[&](){ VkPipeline* temp_MyinYFQ[&](){
            if (!json_value.as_array().size()==0){
                temp_MyinYFQ=NULL;
            return; }temp_MyinYFQ=(VkPipeline*)malloc(member.libraryCount*sizeof(VkPipeline));
        auto& arr=json_value.as_array();
        for(int jSFoMUK=0; jSFoMUK < member.libraryCount; jSFoMUK++){
            [&](){deserialize_handle(json_value[jSFoMUK], temp_MyinYFQ[jSFoMUK]);}();
        }
        }();member.pLibraries=temp_MyinYFQ;}();
}

    void serialize_pUserData(object& json, VkPipelineLibraryCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineLibraryCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["extendedDynamicState"];
[&](){[&](){json_value=member.extendedDynamicState;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["extendedDynamicState"];
[&](){[&](){member.extendedDynamicState=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["extendedDynamicState2"];
[&](){[&](){json_value=member.extendedDynamicState2;}();}();
auto& json_value=json["extendedDynamicState2LogicOp"];
[&](){[&](){json_value=member.extendedDynamicState2LogicOp;}();}();
auto& json_value=json["extendedDynamicState2PatchControlPoints"];
[&](){[&](){json_value=member.extendedDynamicState2PatchControlPoints;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["extendedDynamicState2"];
[&](){[&](){member.extendedDynamicState2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState2LogicOp"];
[&](){[&](){member.extendedDynamicState2LogicOp=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState2PatchControlPoints"];
[&](){[&](){member.extendedDynamicState2PatchControlPoints=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicState2FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["extendedDynamicState3TessellationDomainOrigin"];
[&](){[&](){json_value=member.extendedDynamicState3TessellationDomainOrigin;}();}();
auto& json_value=json["extendedDynamicState3DepthClampEnable"];
[&](){[&](){json_value=member.extendedDynamicState3DepthClampEnable;}();}();
auto& json_value=json["extendedDynamicState3PolygonMode"];
[&](){[&](){json_value=member.extendedDynamicState3PolygonMode;}();}();
auto& json_value=json["extendedDynamicState3RasterizationSamples"];
[&](){[&](){json_value=member.extendedDynamicState3RasterizationSamples;}();}();
auto& json_value=json["extendedDynamicState3SampleMask"];
[&](){[&](){json_value=member.extendedDynamicState3SampleMask;}();}();
auto& json_value=json["extendedDynamicState3AlphaToCoverageEnable"];
[&](){[&](){json_value=member.extendedDynamicState3AlphaToCoverageEnable;}();}();
auto& json_value=json["extendedDynamicState3AlphaToOneEnable"];
[&](){[&](){json_value=member.extendedDynamicState3AlphaToOneEnable;}();}();
auto& json_value=json["extendedDynamicState3LogicOpEnable"];
[&](){[&](){json_value=member.extendedDynamicState3LogicOpEnable;}();}();
auto& json_value=json["extendedDynamicState3ColorBlendEnable"];
[&](){[&](){json_value=member.extendedDynamicState3ColorBlendEnable;}();}();
auto& json_value=json["extendedDynamicState3ColorBlendEquation"];
[&](){[&](){json_value=member.extendedDynamicState3ColorBlendEquation;}();}();
auto& json_value=json["extendedDynamicState3ColorWriteMask"];
[&](){[&](){json_value=member.extendedDynamicState3ColorWriteMask;}();}();
auto& json_value=json["extendedDynamicState3RasterizationStream"];
[&](){[&](){json_value=member.extendedDynamicState3RasterizationStream;}();}();
auto& json_value=json["extendedDynamicState3ConservativeRasterizationMode"];
[&](){[&](){json_value=member.extendedDynamicState3ConservativeRasterizationMode;}();}();
auto& json_value=json["extendedDynamicState3ExtraPrimitiveOverestimationSize"];
[&](){[&](){json_value=member.extendedDynamicState3ExtraPrimitiveOverestimationSize;}();}();
auto& json_value=json["extendedDynamicState3DepthClipEnable"];
[&](){[&](){json_value=member.extendedDynamicState3DepthClipEnable;}();}();
auto& json_value=json["extendedDynamicState3SampleLocationsEnable"];
[&](){[&](){json_value=member.extendedDynamicState3SampleLocationsEnable;}();}();
auto& json_value=json["extendedDynamicState3ColorBlendAdvanced"];
[&](){[&](){json_value=member.extendedDynamicState3ColorBlendAdvanced;}();}();
auto& json_value=json["extendedDynamicState3ProvokingVertexMode"];
[&](){[&](){json_value=member.extendedDynamicState3ProvokingVertexMode;}();}();
auto& json_value=json["extendedDynamicState3LineRasterizationMode"];
[&](){[&](){json_value=member.extendedDynamicState3LineRasterizationMode;}();}();
auto& json_value=json["extendedDynamicState3LineStippleEnable"];
[&](){[&](){json_value=member.extendedDynamicState3LineStippleEnable;}();}();
auto& json_value=json["extendedDynamicState3DepthClipNegativeOneToOne"];
[&](){[&](){json_value=member.extendedDynamicState3DepthClipNegativeOneToOne;}();}();
auto& json_value=json["extendedDynamicState3ViewportWScalingEnable"];
[&](){[&](){json_value=member.extendedDynamicState3ViewportWScalingEnable;}();}();
auto& json_value=json["extendedDynamicState3ViewportSwizzle"];
[&](){[&](){json_value=member.extendedDynamicState3ViewportSwizzle;}();}();
auto& json_value=json["extendedDynamicState3CoverageToColorEnable"];
[&](){[&](){json_value=member.extendedDynamicState3CoverageToColorEnable;}();}();
auto& json_value=json["extendedDynamicState3CoverageToColorLocation"];
[&](){[&](){json_value=member.extendedDynamicState3CoverageToColorLocation;}();}();
auto& json_value=json["extendedDynamicState3CoverageModulationMode"];
[&](){[&](){json_value=member.extendedDynamicState3CoverageModulationMode;}();}();
auto& json_value=json["extendedDynamicState3CoverageModulationTableEnable"];
[&](){[&](){json_value=member.extendedDynamicState3CoverageModulationTableEnable;}();}();
auto& json_value=json["extendedDynamicState3CoverageModulationTable"];
[&](){[&](){json_value=member.extendedDynamicState3CoverageModulationTable;}();}();
auto& json_value=json["extendedDynamicState3CoverageReductionMode"];
[&](){[&](){json_value=member.extendedDynamicState3CoverageReductionMode;}();}();
auto& json_value=json["extendedDynamicState3RepresentativeFragmentTestEnable"];
[&](){[&](){json_value=member.extendedDynamicState3RepresentativeFragmentTestEnable;}();}();
auto& json_value=json["extendedDynamicState3ShadingRateImageEnable"];
[&](){[&](){json_value=member.extendedDynamicState3ShadingRateImageEnable;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["extendedDynamicState3TessellationDomainOrigin"];
[&](){[&](){member.extendedDynamicState3TessellationDomainOrigin=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3DepthClampEnable"];
[&](){[&](){member.extendedDynamicState3DepthClampEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3PolygonMode"];
[&](){[&](){member.extendedDynamicState3PolygonMode=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3RasterizationSamples"];
[&](){[&](){member.extendedDynamicState3RasterizationSamples=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3SampleMask"];
[&](){[&](){member.extendedDynamicState3SampleMask=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3AlphaToCoverageEnable"];
[&](){[&](){member.extendedDynamicState3AlphaToCoverageEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3AlphaToOneEnable"];
[&](){[&](){member.extendedDynamicState3AlphaToOneEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3LogicOpEnable"];
[&](){[&](){member.extendedDynamicState3LogicOpEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ColorBlendEnable"];
[&](){[&](){member.extendedDynamicState3ColorBlendEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ColorBlendEquation"];
[&](){[&](){member.extendedDynamicState3ColorBlendEquation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ColorWriteMask"];
[&](){[&](){member.extendedDynamicState3ColorWriteMask=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3RasterizationStream"];
[&](){[&](){member.extendedDynamicState3RasterizationStream=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ConservativeRasterizationMode"];
[&](){[&](){member.extendedDynamicState3ConservativeRasterizationMode=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ExtraPrimitiveOverestimationSize"];
[&](){[&](){member.extendedDynamicState3ExtraPrimitiveOverestimationSize=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3DepthClipEnable"];
[&](){[&](){member.extendedDynamicState3DepthClipEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3SampleLocationsEnable"];
[&](){[&](){member.extendedDynamicState3SampleLocationsEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ColorBlendAdvanced"];
[&](){[&](){member.extendedDynamicState3ColorBlendAdvanced=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ProvokingVertexMode"];
[&](){[&](){member.extendedDynamicState3ProvokingVertexMode=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3LineRasterizationMode"];
[&](){[&](){member.extendedDynamicState3LineRasterizationMode=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3LineStippleEnable"];
[&](){[&](){member.extendedDynamicState3LineStippleEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3DepthClipNegativeOneToOne"];
[&](){[&](){member.extendedDynamicState3DepthClipNegativeOneToOne=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ViewportWScalingEnable"];
[&](){[&](){member.extendedDynamicState3ViewportWScalingEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ViewportSwizzle"];
[&](){[&](){member.extendedDynamicState3ViewportSwizzle=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3CoverageToColorEnable"];
[&](){[&](){member.extendedDynamicState3CoverageToColorEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3CoverageToColorLocation"];
[&](){[&](){member.extendedDynamicState3CoverageToColorLocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3CoverageModulationMode"];
[&](){[&](){member.extendedDynamicState3CoverageModulationMode=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3CoverageModulationTableEnable"];
[&](){[&](){member.extendedDynamicState3CoverageModulationTableEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3CoverageModulationTable"];
[&](){[&](){member.extendedDynamicState3CoverageModulationTable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3CoverageReductionMode"];
[&](){[&](){member.extendedDynamicState3CoverageReductionMode=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3RepresentativeFragmentTestEnable"];
[&](){[&](){member.extendedDynamicState3RepresentativeFragmentTestEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["extendedDynamicState3ShadingRateImageEnable"];
[&](){[&](){member.extendedDynamicState3ShadingRateImageEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicState3FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dynamicPrimitiveTopologyUnrestricted"];
[&](){[&](){json_value=member.dynamicPrimitiveTopologyUnrestricted;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["dynamicPrimitiveTopologyUnrestricted"];
[&](){[&](){member.dynamicPrimitiveTopologyUnrestricted=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExtendedDynamicState3PropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkColorBlendEquationEXT& member){
        
    
auto& json_value=json["srcColorBlendFactor"];
[&](){[&](){[&](){json_value=member.srcColorBlendFactor;}();}();}();
auto& json_value=json["dstColorBlendFactor"];
[&](){[&](){[&](){json_value=member.dstColorBlendFactor;}();}();}();
auto& json_value=json["colorBlendOp"];
[&](){[&](){[&](){json_value=member.colorBlendOp;}();}();}();
auto& json_value=json["srcAlphaBlendFactor"];
[&](){[&](){[&](){json_value=member.srcAlphaBlendFactor;}();}();}();
auto& json_value=json["dstAlphaBlendFactor"];
[&](){[&](){[&](){json_value=member.dstAlphaBlendFactor;}();}();}();
auto& json_value=json["alphaBlendOp"];
[&](){[&](){[&](){json_value=member.alphaBlendOp;}();}();}();
}
void deserialize_struct(object& json, VkColorBlendEquationEXT& member){
auto& json_value=json["srcColorBlendFactor"];
[&](){[&](){VkBlendFactor temp_VAebMMZ[&](){temp_VAebMMZ=static_cast<int>(value_to<int>(json_value));}();member.srcColorBlendFactor=(VkBlendFactor)temp_VAebMMZ;}();}();
auto& json_value=json["dstColorBlendFactor"];
[&](){[&](){VkBlendFactor temp_vClSLyE[&](){temp_vClSLyE=static_cast<int>(value_to<int>(json_value));}();member.dstColorBlendFactor=(VkBlendFactor)temp_vClSLyE;}();}();
auto& json_value=json["colorBlendOp"];
[&](){[&](){VkBlendOp temp_MEyEuOR[&](){temp_MEyEuOR=static_cast<int>(value_to<int>(json_value));}();member.colorBlendOp=(VkBlendOp)temp_MEyEuOR;}();}();
auto& json_value=json["srcAlphaBlendFactor"];
[&](){[&](){VkBlendFactor temp_RiTtMSZ[&](){temp_RiTtMSZ=static_cast<int>(value_to<int>(json_value));}();member.srcAlphaBlendFactor=(VkBlendFactor)temp_RiTtMSZ;}();}();
auto& json_value=json["dstAlphaBlendFactor"];
[&](){[&](){VkBlendFactor temp_iQEkhrh[&](){temp_iQEkhrh=static_cast<int>(value_to<int>(json_value));}();member.dstAlphaBlendFactor=(VkBlendFactor)temp_iQEkhrh;}();}();
auto& json_value=json["alphaBlendOp"];
[&](){[&](){VkBlendOp temp_wilyQgv[&](){temp_wilyQgv=static_cast<int>(value_to<int>(json_value));}();member.alphaBlendOp=(VkBlendOp)temp_wilyQgv;}();}();
}

    void serialize_pUserData(object& json, VkColorBlendEquationEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkColorBlendEquationEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkColorBlendAdvancedEXT& member){
        
    
auto& json_value=json["advancedBlendOp"];
[&](){[&](){[&](){json_value=member.advancedBlendOp;}();}();}();
auto& json_value=json["srcPremultiplied"];
[&](){[&](){json_value=member.srcPremultiplied;}();}();
auto& json_value=json["dstPremultiplied"];
[&](){[&](){json_value=member.dstPremultiplied;}();}();
auto& json_value=json["blendOverlap"];
[&](){[&](){[&](){json_value=member.blendOverlap;}();}();}();
auto& json_value=json["clampResults"];
[&](){[&](){json_value=member.clampResults;}();}();
}
void deserialize_struct(object& json, VkColorBlendAdvancedEXT& member){
auto& json_value=json["advancedBlendOp"];
[&](){[&](){VkBlendOp temp_vIxJhKO[&](){temp_vIxJhKO=static_cast<int>(value_to<int>(json_value));}();member.advancedBlendOp=(VkBlendOp)temp_vIxJhKO;}();}();
auto& json_value=json["srcPremultiplied"];
[&](){[&](){member.srcPremultiplied=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dstPremultiplied"];
[&](){[&](){member.dstPremultiplied=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["blendOverlap"];
[&](){[&](){VkBlendOverlapEXT temp_XnRYCgG[&](){temp_XnRYCgG=static_cast<int>(value_to<int>(json_value));}();member.blendOverlap=(VkBlendOverlapEXT)temp_XnRYCgG;}();}();
auto& json_value=json["clampResults"];
[&](){[&](){member.clampResults=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkColorBlendAdvancedEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkColorBlendAdvancedEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassTransformBeginInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["transform"];
[&](){[&](){[&](){json_value=member.transform;}();}();}();
}
void deserialize_struct(object& json, VkRenderPassTransformBeginInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["transform"];
[&](){[&](){VkSurfaceTransformFlagBitsKHR temp_MSAmdXT[&](){temp_MSAmdXT=static_cast<int>(value_to<int>(json_value));}();member.transform=(VkSurfaceTransformFlagBitsKHR)temp_MSAmdXT;}();}();
}

    void serialize_pUserData(object& json, VkRenderPassTransformBeginInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassTransformBeginInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyCommandTransformInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["transform"];
[&](){[&](){[&](){json_value=member.transform;}();}();}();
}
void deserialize_struct(object& json, VkCopyCommandTransformInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["transform"];
[&](){[&](){VkSurfaceTransformFlagBitsKHR temp_MSAmdXT[&](){temp_MSAmdXT=static_cast<int>(value_to<int>(json_value));}();member.transform=(VkSurfaceTransformFlagBitsKHR)temp_MSAmdXT;}();}();
}

    void serialize_pUserData(object& json, VkCopyCommandTransformInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyCommandTransformInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferInheritanceRenderPassTransformInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["transform"];
[&](){[&](){[&](){json_value=member.transform;}();}();}();
auto& json_value=json["renderArea"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.renderArea);
            }();
}
void deserialize_struct(object& json, VkCommandBufferInheritanceRenderPassTransformInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["transform"];
[&](){[&](){VkSurfaceTransformFlagBitsKHR temp_MSAmdXT[&](){temp_MSAmdXT=static_cast<int>(value_to<int>(json_value));}();member.transform=(VkSurfaceTransformFlagBitsKHR)temp_MSAmdXT;}();}();
auto& json_value=json["renderArea"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.renderArea);
            }();
}

    void serialize_pUserData(object& json, VkCommandBufferInheritanceRenderPassTransformInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferInheritanceRenderPassTransformInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDiagnosticsConfigFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["diagnosticsConfig"];
[&](){[&](){json_value=member.diagnosticsConfig;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDiagnosticsConfigFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["diagnosticsConfig"];
[&](){[&](){member.diagnosticsConfig=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDiagnosticsConfigFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDiagnosticsConfigFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceDiagnosticsConfigCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkDeviceDiagnosticsConfigCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkDeviceDiagnosticsConfigFlagsNV temp_JLEExOg[&](){temp_JLEExOg=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDeviceDiagnosticsConfigFlagsNV)temp_JLEExOg;}();}();
}

    void serialize_pUserData(object& json, VkDeviceDiagnosticsConfigCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceDiagnosticsConfigCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderZeroInitializeWorkgroupMemory"];
[&](){[&](){json_value=member.shaderZeroInitializeWorkgroupMemory;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderZeroInitializeWorkgroupMemory"];
[&](){[&](){member.shaderZeroInitializeWorkgroupMemory=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderSubgroupUniformControlFlow"];
[&](){[&](){json_value=member.shaderSubgroupUniformControlFlow;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderSubgroupUniformControlFlow"];
[&](){[&](){member.shaderSubgroupUniformControlFlow=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRobustness2FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["robustBufferAccess2"];
[&](){[&](){json_value=member.robustBufferAccess2;}();}();
auto& json_value=json["robustImageAccess2"];
[&](){[&](){json_value=member.robustImageAccess2;}();}();
auto& json_value=json["nullDescriptor"];
[&](){[&](){json_value=member.nullDescriptor;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRobustness2FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["robustBufferAccess2"];
[&](){[&](){member.robustBufferAccess2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["robustImageAccess2"];
[&](){[&](){member.robustImageAccess2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["nullDescriptor"];
[&](){[&](){member.nullDescriptor=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRobustness2FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRobustness2FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRobustness2PropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["robustStorageBufferAccessSizeAlignment"];
[&](){[&](){json_value=member.robustStorageBufferAccessSizeAlignment;}();}();
auto& json_value=json["robustUniformBufferAccessSizeAlignment"];
[&](){[&](){json_value=member.robustUniformBufferAccessSizeAlignment;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRobustness2PropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["robustStorageBufferAccessSizeAlignment"];
[&](){[&](){member.robustStorageBufferAccessSizeAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["robustUniformBufferAccessSizeAlignment"];
[&](){[&](){member.robustUniformBufferAccessSizeAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRobustness2PropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRobustness2PropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageRobustnessFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["robustImageAccess"];
[&](){[&](){json_value=member.robustImageAccess;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageRobustnessFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["robustImageAccess"];
[&](){[&](){member.robustImageAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageRobustnessFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageRobustnessFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["workgroupMemoryExplicitLayout"];
[&](){[&](){json_value=member.workgroupMemoryExplicitLayout;}();}();
auto& json_value=json["workgroupMemoryExplicitLayoutScalarBlockLayout"];
[&](){[&](){json_value=member.workgroupMemoryExplicitLayoutScalarBlockLayout;}();}();
auto& json_value=json["workgroupMemoryExplicitLayout8BitAccess"];
[&](){[&](){json_value=member.workgroupMemoryExplicitLayout8BitAccess;}();}();
auto& json_value=json["workgroupMemoryExplicitLayout16BitAccess"];
[&](){[&](){json_value=member.workgroupMemoryExplicitLayout16BitAccess;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["workgroupMemoryExplicitLayout"];
[&](){[&](){member.workgroupMemoryExplicitLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["workgroupMemoryExplicitLayoutScalarBlockLayout"];
[&](){[&](){member.workgroupMemoryExplicitLayoutScalarBlockLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["workgroupMemoryExplicitLayout8BitAccess"];
[&](){[&](){member.workgroupMemoryExplicitLayout8BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["workgroupMemoryExplicitLayout16BitAccess"];
[&](){[&](){member.workgroupMemoryExplicitLayout16BitAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevice4444FormatsFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["formatA4R4G4B4"];
[&](){[&](){json_value=member.formatA4R4G4B4;}();}();
auto& json_value=json["formatA4B4G4R4"];
[&](){[&](){json_value=member.formatA4B4G4R4;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevice4444FormatsFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["formatA4R4G4B4"];
[&](){[&](){member.formatA4R4G4B4=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["formatA4B4G4R4"];
[&](){[&](){member.formatA4B4G4R4=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevice4444FormatsFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevice4444FormatsFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["subpassShading"];
[&](){[&](){json_value=member.subpassShading;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["subpassShading"];
[&](){[&](){member.subpassShading=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSubpassShadingFeaturesHUAWEI& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["clustercullingShader"];
[&](){[&](){json_value=member.clustercullingShader;}();}();
auto& json_value=json["multiviewClusterCullingShader"];
[&](){[&](){json_value=member.multiviewClusterCullingShader;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["clustercullingShader"];
[&](){[&](){member.clustercullingShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["multiviewClusterCullingShader"];
[&](){[&](){member.multiviewClusterCullingShader=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferCopy2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcOffset"];
[&](){[&](){json_value=member.srcOffset;}();}();
auto& json_value=json["dstOffset"];
[&](){[&](){json_value=member.dstOffset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkBufferCopy2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcOffset"];
[&](){[&](){member.srcOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dstOffset"];
[&](){[&](){member.dstOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBufferCopy2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferCopy2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageCopy2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
}
void deserialize_struct(object& json, VkImageCopy2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
}

    void serialize_pUserData(object& json, VkImageCopy2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageCopy2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageBlit2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcSubresource);
            }();
auto& json_value=json["srcOffsets"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto& temp=json_value[jRYlQCC].emplace_object();
            return serialize_struct(temp, member.srcOffsets[jRYlQCC]);
            }();
        }
        }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstSubresource);
            }();
auto& json_value=json["dstOffsets"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto& temp=json_value[dYmXuSG].emplace_object();
            return serialize_struct(temp, member.dstOffsets[dYmXuSG]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkImageBlit2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcSubresource);
            }();
auto& json_value=json["srcOffsets"];
[&](){
        auto& arr=json_value.as_array();
        for(int jRYlQCC=0; jRYlQCC < 2; jRYlQCC++){
            [&](){
            auto& temp=json_value[jRYlQCC].as_object();
            deserialize_struct(temp,member.srcOffsets[jRYlQCC]);
            }();
        }
        }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstSubresource);
            }();
auto& json_value=json["dstOffsets"];
[&](){
        auto& arr=json_value.as_array();
        for(int dYmXuSG=0; dYmXuSG < 2; dYmXuSG++){
            [&](){
            auto& temp=json_value[dYmXuSG].as_object();
            deserialize_struct(temp,member.dstOffsets[dYmXuSG]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkImageBlit2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageBlit2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferImageCopy2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["bufferOffset"];
[&](){[&](){json_value=member.bufferOffset;}();}();
auto& json_value=json["bufferRowLength"];
[&](){json_value=member.bufferRowLength;}();
auto& json_value=json["bufferImageHeight"];
[&](){json_value=member.bufferImageHeight;}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageExtent);
            }();
}
void deserialize_struct(object& json, VkBufferImageCopy2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["bufferOffset"];
[&](){[&](){member.bufferOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferRowLength"];
[&](){member.bufferRowLength=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["bufferImageHeight"];
[&](){member.bufferImageHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageExtent);
            }();
}

    void serialize_pUserData(object& json, VkBufferImageCopy2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferImageCopy2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageResolve2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.extent);
            }();
}
void deserialize_struct(object& json, VkImageResolve2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcSubresource);
            }();
auto& json_value=json["srcOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srcOffset);
            }();
auto& json_value=json["dstSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstSubresource);
            }();
auto& json_value=json["dstOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstOffset);
            }();
auto& json_value=json["extent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.extent);
            }();
}

    void serialize_pUserData(object& json, VkImageResolve2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageResolve2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyBufferInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcBuffer"];
[&](){serialize_handle(json_value,member.srcBuffer);}();
auto& json_value=json["dstBuffer"];
[&](){serialize_handle(json_value,member.dstBuffer);}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int DGFUXUH=0; DGFUXUH < member.regionCount; DGFUXUH++){
            [&](){
            auto& temp=json_value[DGFUXUH].emplace_object();
            return serialize_struct(temp, member.pRegions[DGFUXUH]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCopyBufferInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcBuffer"];
[&](){deserialize_handle(json_value, member.srcBuffer);}();
auto& json_value=json["dstBuffer"];
[&](){deserialize_handle(json_value, member.dstBuffer);}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkBufferCopy2* temp_MWqyZGq[&](){
            if (!json_value.as_array().size()==0){
                temp_MWqyZGq=NULL;
            return; }temp_MWqyZGq=(VkBufferCopy2*)malloc(member.regionCount*sizeof(VkBufferCopy2));
        auto& arr=json_value.as_array();
        for(int qxtkDyM=0; qxtkDyM < member.regionCount; qxtkDyM++){
            [&](){
            auto& temp=json_value[qxtkDyM].as_object();
            deserialize_struct(temp,temp_MWqyZGq[qxtkDyM]);
            }();
        }
        }();member.pRegions=temp_MWqyZGq;}();
}

    void serialize_pUserData(object& json, VkCopyBufferInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyBufferInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyImageInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcImage"];
[&](){serialize_handle(json_value,member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){[&](){json_value=member.srcImageLayout;}();}();}();
auto& json_value=json["dstImage"];
[&](){serialize_handle(json_value,member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){[&](){json_value=member.dstImageLayout;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UKtqPyM=0; UKtqPyM < member.regionCount; UKtqPyM++){
            [&](){
            auto& temp=json_value[UKtqPyM].emplace_object();
            return serialize_struct(temp, member.pRegions[UKtqPyM]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCopyImageInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcImage"];
[&](){deserialize_handle(json_value, member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){VkImageLayout temp_GZeiZIU[&](){temp_GZeiZIU=static_cast<int>(value_to<int>(json_value));}();member.srcImageLayout=(VkImageLayout)temp_GZeiZIU;}();}();
auto& json_value=json["dstImage"];
[&](){deserialize_handle(json_value, member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){VkImageLayout temp_eFmuuIn[&](){temp_eFmuuIn=static_cast<int>(value_to<int>(json_value));}();member.dstImageLayout=(VkImageLayout)temp_eFmuuIn;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkImageCopy2* temp_drUIGDO[&](){
            if (!json_value.as_array().size()==0){
                temp_drUIGDO=NULL;
            return; }temp_drUIGDO=(VkImageCopy2*)malloc(member.regionCount*sizeof(VkImageCopy2));
        auto& arr=json_value.as_array();
        for(int RcpKxBk=0; RcpKxBk < member.regionCount; RcpKxBk++){
            [&](){
            auto& temp=json_value[RcpKxBk].as_object();
            deserialize_struct(temp,temp_drUIGDO[RcpKxBk]);
            }();
        }
        }();member.pRegions=temp_drUIGDO;}();
}

    void serialize_pUserData(object& json, VkCopyImageInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyImageInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBlitImageInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcImage"];
[&](){serialize_handle(json_value,member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){[&](){json_value=member.srcImageLayout;}();}();}();
auto& json_value=json["dstImage"];
[&](){serialize_handle(json_value,member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){[&](){json_value=member.dstImageLayout;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int eyuNqxm=0; eyuNqxm < member.regionCount; eyuNqxm++){
            [&](){
            auto& temp=json_value[eyuNqxm].emplace_object();
            return serialize_struct(temp, member.pRegions[eyuNqxm]);
            }();
        }
        }();
auto& json_value=json["filter"];
[&](){[&](){[&](){json_value=member.filter;}();}();}();
}
void deserialize_struct(object& json, VkBlitImageInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcImage"];
[&](){deserialize_handle(json_value, member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){VkImageLayout temp_GZeiZIU[&](){temp_GZeiZIU=static_cast<int>(value_to<int>(json_value));}();member.srcImageLayout=(VkImageLayout)temp_GZeiZIU;}();}();
auto& json_value=json["dstImage"];
[&](){deserialize_handle(json_value, member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){VkImageLayout temp_eFmuuIn[&](){temp_eFmuuIn=static_cast<int>(value_to<int>(json_value));}();member.dstImageLayout=(VkImageLayout)temp_eFmuuIn;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkImageBlit2* temp_KzrBmIv[&](){
            if (!json_value.as_array().size()==0){
                temp_KzrBmIv=NULL;
            return; }temp_KzrBmIv=(VkImageBlit2*)malloc(member.regionCount*sizeof(VkImageBlit2));
        auto& arr=json_value.as_array();
        for(int vAwDVQE=0; vAwDVQE < member.regionCount; vAwDVQE++){
            [&](){
            auto& temp=json_value[vAwDVQE].as_object();
            deserialize_struct(temp,temp_KzrBmIv[vAwDVQE]);
            }();
        }
        }();member.pRegions=temp_KzrBmIv;}();
auto& json_value=json["filter"];
[&](){[&](){VkFilter temp_qiRrtSM[&](){temp_qiRrtSM=static_cast<int>(value_to<int>(json_value));}();member.filter=(VkFilter)temp_qiRrtSM;}();}();
}

    void serialize_pUserData(object& json, VkBlitImageInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBlitImageInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyBufferToImageInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcBuffer"];
[&](){serialize_handle(json_value,member.srcBuffer);}();
auto& json_value=json["dstImage"];
[&](){serialize_handle(json_value,member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){[&](){json_value=member.dstImageLayout;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NlBTicW=0; NlBTicW < member.regionCount; NlBTicW++){
            [&](){
            auto& temp=json_value[NlBTicW].emplace_object();
            return serialize_struct(temp, member.pRegions[NlBTicW]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCopyBufferToImageInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcBuffer"];
[&](){deserialize_handle(json_value, member.srcBuffer);}();
auto& json_value=json["dstImage"];
[&](){deserialize_handle(json_value, member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){VkImageLayout temp_eFmuuIn[&](){temp_eFmuuIn=static_cast<int>(value_to<int>(json_value));}();member.dstImageLayout=(VkImageLayout)temp_eFmuuIn;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkBufferImageCopy2* temp_FeFboBQ[&](){
            if (!json_value.as_array().size()==0){
                temp_FeFboBQ=NULL;
            return; }temp_FeFboBQ=(VkBufferImageCopy2*)malloc(member.regionCount*sizeof(VkBufferImageCopy2));
        auto& arr=json_value.as_array();
        for(int YLeVual=0; YLeVual < member.regionCount; YLeVual++){
            [&](){
            auto& temp=json_value[YLeVual].as_object();
            deserialize_struct(temp,temp_FeFboBQ[YLeVual]);
            }();
        }
        }();member.pRegions=temp_FeFboBQ;}();
}

    void serialize_pUserData(object& json, VkCopyBufferToImageInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyBufferToImageInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyImageToBufferInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcImage"];
[&](){serialize_handle(json_value,member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){[&](){json_value=member.srcImageLayout;}();}();}();
auto& json_value=json["dstBuffer"];
[&](){serialize_handle(json_value,member.dstBuffer);}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int NlBTicW=0; NlBTicW < member.regionCount; NlBTicW++){
            [&](){
            auto& temp=json_value[NlBTicW].emplace_object();
            return serialize_struct(temp, member.pRegions[NlBTicW]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCopyImageToBufferInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcImage"];
[&](){deserialize_handle(json_value, member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){VkImageLayout temp_GZeiZIU[&](){temp_GZeiZIU=static_cast<int>(value_to<int>(json_value));}();member.srcImageLayout=(VkImageLayout)temp_GZeiZIU;}();}();
auto& json_value=json["dstBuffer"];
[&](){deserialize_handle(json_value, member.dstBuffer);}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkBufferImageCopy2* temp_FeFboBQ[&](){
            if (!json_value.as_array().size()==0){
                temp_FeFboBQ=NULL;
            return; }temp_FeFboBQ=(VkBufferImageCopy2*)malloc(member.regionCount*sizeof(VkBufferImageCopy2));
        auto& arr=json_value.as_array();
        for(int YLeVual=0; YLeVual < member.regionCount; YLeVual++){
            [&](){
            auto& temp=json_value[YLeVual].as_object();
            deserialize_struct(temp,temp_FeFboBQ[YLeVual]);
            }();
        }
        }();member.pRegions=temp_FeFboBQ;}();
}

    void serialize_pUserData(object& json, VkCopyImageToBufferInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyImageToBufferInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkResolveImageInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcImage"];
[&](){serialize_handle(json_value,member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){[&](){json_value=member.srcImageLayout;}();}();}();
auto& json_value=json["dstImage"];
[&](){serialize_handle(json_value,member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){[&](){json_value=member.dstImageLayout;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int YWPZXmz=0; YWPZXmz < member.regionCount; YWPZXmz++){
            [&](){
            auto& temp=json_value[YWPZXmz].emplace_object();
            return serialize_struct(temp, member.pRegions[YWPZXmz]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkResolveImageInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcImage"];
[&](){deserialize_handle(json_value, member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){VkImageLayout temp_GZeiZIU[&](){temp_GZeiZIU=static_cast<int>(value_to<int>(json_value));}();member.srcImageLayout=(VkImageLayout)temp_GZeiZIU;}();}();
auto& json_value=json["dstImage"];
[&](){deserialize_handle(json_value, member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){VkImageLayout temp_eFmuuIn[&](){temp_eFmuuIn=static_cast<int>(value_to<int>(json_value));}();member.dstImageLayout=(VkImageLayout)temp_eFmuuIn;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkImageResolve2* temp_DijIisF[&](){
            if (!json_value.as_array().size()==0){
                temp_DijIisF=NULL;
            return; }temp_DijIisF=(VkImageResolve2*)malloc(member.regionCount*sizeof(VkImageResolve2));
        auto& arr=json_value.as_array();
        for(int cQwfEVG=0; cQwfEVG < member.regionCount; cQwfEVG++){
            [&](){
            auto& temp=json_value[cQwfEVG].as_object();
            deserialize_struct(temp,temp_DijIisF[cQwfEVG]);
            }();
        }
        }();member.pRegions=temp_DijIisF;}();
}

    void serialize_pUserData(object& json, VkResolveImageInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkResolveImageInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderImageInt64Atomics"];
[&](){[&](){json_value=member.shaderImageInt64Atomics;}();}();
auto& json_value=json["sparseImageInt64Atomics"];
[&](){[&](){json_value=member.sparseImageInt64Atomics;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderImageInt64Atomics"];
[&](){[&](){member.shaderImageInt64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sparseImageInt64Atomics"];
[&](){[&](){member.sparseImageInt64Atomics=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFragmentShadingRateAttachmentInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pFragmentShadingRateAttachment"];
[&](){
            if (member.pFragmentShadingRateAttachment==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int eUKVzmp=0; eUKVzmp < 1; eUKVzmp++){
            [&](){
            auto& temp=json_value[eUKVzmp].emplace_object();
            return serialize_struct(temp, member.pFragmentShadingRateAttachment[eUKVzmp]);
            }();
        }
        }();
auto& json_value=json["shadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.shadingRateAttachmentTexelSize);
            }();
}
void deserialize_struct(object& json, VkFragmentShadingRateAttachmentInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pFragmentShadingRateAttachment"];
[&](){ VkAttachmentReference2* temp_zmCwYqJ[&](){
            if (!json_value.as_array().size()==0){
                temp_zmCwYqJ=NULL;
            return; }temp_zmCwYqJ=(VkAttachmentReference2*)malloc(1*sizeof(VkAttachmentReference2));
        auto& arr=json_value.as_array();
        for(int CJUwLOb=0; CJUwLOb < 1; CJUwLOb++){
            [&](){
            auto& temp=json_value[CJUwLOb].as_object();
            deserialize_struct(temp,temp_zmCwYqJ[CJUwLOb]);
            }();
        }
        }();member.pFragmentShadingRateAttachment=temp_zmCwYqJ;}();
auto& json_value=json["shadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.shadingRateAttachmentTexelSize);
            }();
}

    void serialize_pUserData(object& json, VkFragmentShadingRateAttachmentInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFragmentShadingRateAttachmentInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineFragmentShadingRateStateCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.fragmentSize);
            }();
auto& json_value=json["combinerOps"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){[&](){json_value[FpqnVre]=member.combinerOps[FpqnVre];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineFragmentShadingRateStateCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["fragmentSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.fragmentSize);
            }();
auto& json_value=json["combinerOps"];
[&](){
        auto& arr=json_value.as_array();
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){VkFragmentShadingRateCombinerOpKHR temp_zudGUIF[2][&](){temp_zudGUIF=static_cast<int>(value_to<int>(json_value[FpqnVre]));}();member.combinerOps[FpqnVre]=(VkFragmentShadingRateCombinerOpKHR)temp_zudGUIF;}();}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPipelineFragmentShadingRateStateCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineFragmentShadingRateStateCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineFragmentShadingRate"];
[&](){[&](){json_value=member.pipelineFragmentShadingRate;}();}();
auto& json_value=json["primitiveFragmentShadingRate"];
[&](){[&](){json_value=member.primitiveFragmentShadingRate;}();}();
auto& json_value=json["attachmentFragmentShadingRate"];
[&](){[&](){json_value=member.attachmentFragmentShadingRate;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelineFragmentShadingRate"];
[&](){[&](){member.pipelineFragmentShadingRate=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["primitiveFragmentShadingRate"];
[&](){[&](){member.primitiveFragmentShadingRate=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["attachmentFragmentShadingRate"];
[&](){[&](){member.attachmentFragmentShadingRate=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShadingRatePropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minFragmentShadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minFragmentShadingRateAttachmentTexelSize);
            }();
auto& json_value=json["maxFragmentShadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxFragmentShadingRateAttachmentTexelSize);
            }();
auto& json_value=json["maxFragmentShadingRateAttachmentTexelSizeAspectRatio"];
[&](){json_value=member.maxFragmentShadingRateAttachmentTexelSizeAspectRatio;}();
auto& json_value=json["primitiveFragmentShadingRateWithMultipleViewports"];
[&](){[&](){json_value=member.primitiveFragmentShadingRateWithMultipleViewports;}();}();
auto& json_value=json["layeredShadingRateAttachments"];
[&](){[&](){json_value=member.layeredShadingRateAttachments;}();}();
auto& json_value=json["fragmentShadingRateNonTrivialCombinerOps"];
[&](){[&](){json_value=member.fragmentShadingRateNonTrivialCombinerOps;}();}();
auto& json_value=json["maxFragmentSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxFragmentSize);
            }();
auto& json_value=json["maxFragmentSizeAspectRatio"];
[&](){json_value=member.maxFragmentSizeAspectRatio;}();
auto& json_value=json["maxFragmentShadingRateCoverageSamples"];
[&](){json_value=member.maxFragmentShadingRateCoverageSamples;}();
auto& json_value=json["maxFragmentShadingRateRasterizationSamples"];
[&](){[&](){[&](){json_value=member.maxFragmentShadingRateRasterizationSamples;}();}();}();
auto& json_value=json["fragmentShadingRateWithShaderDepthStencilWrites"];
[&](){[&](){json_value=member.fragmentShadingRateWithShaderDepthStencilWrites;}();}();
auto& json_value=json["fragmentShadingRateWithSampleMask"];
[&](){[&](){json_value=member.fragmentShadingRateWithSampleMask;}();}();
auto& json_value=json["fragmentShadingRateWithShaderSampleMask"];
[&](){[&](){json_value=member.fragmentShadingRateWithShaderSampleMask;}();}();
auto& json_value=json["fragmentShadingRateWithConservativeRasterization"];
[&](){[&](){json_value=member.fragmentShadingRateWithConservativeRasterization;}();}();
auto& json_value=json["fragmentShadingRateWithFragmentShaderInterlock"];
[&](){[&](){json_value=member.fragmentShadingRateWithFragmentShaderInterlock;}();}();
auto& json_value=json["fragmentShadingRateWithCustomSampleLocations"];
[&](){[&](){json_value=member.fragmentShadingRateWithCustomSampleLocations;}();}();
auto& json_value=json["fragmentShadingRateStrictMultiplyCombiner"];
[&](){[&](){json_value=member.fragmentShadingRateStrictMultiplyCombiner;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShadingRatePropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["minFragmentShadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minFragmentShadingRateAttachmentTexelSize);
            }();
auto& json_value=json["maxFragmentShadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxFragmentShadingRateAttachmentTexelSize);
            }();
auto& json_value=json["maxFragmentShadingRateAttachmentTexelSizeAspectRatio"];
[&](){member.maxFragmentShadingRateAttachmentTexelSizeAspectRatio=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["primitiveFragmentShadingRateWithMultipleViewports"];
[&](){[&](){member.primitiveFragmentShadingRateWithMultipleViewports=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["layeredShadingRateAttachments"];
[&](){[&](){member.layeredShadingRateAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShadingRateNonTrivialCombinerOps"];
[&](){[&](){member.fragmentShadingRateNonTrivialCombinerOps=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxFragmentSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxFragmentSize);
            }();
auto& json_value=json["maxFragmentSizeAspectRatio"];
[&](){member.maxFragmentSizeAspectRatio=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFragmentShadingRateCoverageSamples"];
[&](){member.maxFragmentShadingRateCoverageSamples=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxFragmentShadingRateRasterizationSamples"];
[&](){[&](){VkSampleCountFlagBits temp_lpDqPSz[&](){temp_lpDqPSz=static_cast<int>(value_to<int>(json_value));}();member.maxFragmentShadingRateRasterizationSamples=(VkSampleCountFlagBits)temp_lpDqPSz;}();}();
auto& json_value=json["fragmentShadingRateWithShaderDepthStencilWrites"];
[&](){[&](){member.fragmentShadingRateWithShaderDepthStencilWrites=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShadingRateWithSampleMask"];
[&](){[&](){member.fragmentShadingRateWithSampleMask=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShadingRateWithShaderSampleMask"];
[&](){[&](){member.fragmentShadingRateWithShaderSampleMask=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShadingRateWithConservativeRasterization"];
[&](){[&](){member.fragmentShadingRateWithConservativeRasterization=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShadingRateWithFragmentShaderInterlock"];
[&](){[&](){member.fragmentShadingRateWithFragmentShaderInterlock=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShadingRateWithCustomSampleLocations"];
[&](){[&](){member.fragmentShadingRateWithCustomSampleLocations=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["fragmentShadingRateStrictMultiplyCombiner"];
[&](){[&](){member.fragmentShadingRateStrictMultiplyCombiner=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRatePropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRatePropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sampleCounts"];
[&](){[&](){[&](){json_value=member.sampleCounts;}();}();}();
auto& json_value=json["fragmentSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.fragmentSize);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["sampleCounts"];
[&](){[&](){VkSampleCountFlags temp_NdjRKKA[&](){temp_NdjRKKA=static_cast<int>(value_to<int>(json_value));}();member.sampleCounts=(VkSampleCountFlags)temp_NdjRKKA;}();}();
auto& json_value=json["fragmentSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.fragmentSize);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderTerminateInvocationFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderTerminateInvocation"];
[&](){[&](){json_value=member.shaderTerminateInvocation;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderTerminateInvocationFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderTerminateInvocation"];
[&](){[&](){member.shaderTerminateInvocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderTerminateInvocationFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderTerminateInvocationFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentShadingRateEnums"];
[&](){[&](){json_value=member.fragmentShadingRateEnums;}();}();
auto& json_value=json["supersampleFragmentShadingRates"];
[&](){[&](){json_value=member.supersampleFragmentShadingRates;}();}();
auto& json_value=json["noInvocationFragmentShadingRates"];
[&](){[&](){json_value=member.noInvocationFragmentShadingRates;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["fragmentShadingRateEnums"];
[&](){[&](){member.fragmentShadingRateEnums=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["supersampleFragmentShadingRates"];
[&](){[&](){member.supersampleFragmentShadingRates=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["noInvocationFragmentShadingRates"];
[&](){[&](){member.noInvocationFragmentShadingRates=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxFragmentShadingRateInvocationCount"];
[&](){[&](){[&](){json_value=member.maxFragmentShadingRateInvocationCount;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxFragmentShadingRateInvocationCount"];
[&](){[&](){VkSampleCountFlagBits temp_UhJIpIM[&](){temp_UhJIpIM=static_cast<int>(value_to<int>(json_value));}();member.maxFragmentShadingRateInvocationCount=(VkSampleCountFlagBits)temp_UhJIpIM;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineFragmentShadingRateEnumStateCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shadingRateType"];
[&](){[&](){[&](){json_value=member.shadingRateType;}();}();}();
auto& json_value=json["shadingRate"];
[&](){[&](){[&](){json_value=member.shadingRate;}();}();}();
auto& json_value=json["combinerOps"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){[&](){json_value[FpqnVre]=member.combinerOps[FpqnVre];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineFragmentShadingRateEnumStateCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["shadingRateType"];
[&](){[&](){VkFragmentShadingRateTypeNV temp_PULcRss[&](){temp_PULcRss=static_cast<int>(value_to<int>(json_value));}();member.shadingRateType=(VkFragmentShadingRateTypeNV)temp_PULcRss;}();}();
auto& json_value=json["shadingRate"];
[&](){[&](){VkFragmentShadingRateNV temp_JMFtlMn[&](){temp_JMFtlMn=static_cast<int>(value_to<int>(json_value));}();member.shadingRate=(VkFragmentShadingRateNV)temp_JMFtlMn;}();}();
auto& json_value=json["combinerOps"];
[&](){
        auto& arr=json_value.as_array();
        for(int FpqnVre=0; FpqnVre < 2; FpqnVre++){
            [&](){[&](){VkFragmentShadingRateCombinerOpKHR temp_zudGUIF[2][&](){temp_zudGUIF=static_cast<int>(value_to<int>(json_value[FpqnVre]));}();member.combinerOps[FpqnVre]=(VkFragmentShadingRateCombinerOpKHR)temp_zudGUIF;}();}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPipelineFragmentShadingRateEnumStateCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineFragmentShadingRateEnumStateCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureBuildSizesInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["accelerationStructureSize"];
[&](){[&](){json_value=member.accelerationStructureSize;}();}();
auto& json_value=json["updateScratchSize"];
[&](){[&](){json_value=member.updateScratchSize;}();}();
auto& json_value=json["buildScratchSize"];
[&](){[&](){json_value=member.buildScratchSize;}();}();
}
void deserialize_struct(object& json, VkAccelerationStructureBuildSizesInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["accelerationStructureSize"];
[&](){[&](){member.accelerationStructureSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["updateScratchSize"];
[&](){[&](){member.updateScratchSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["buildScratchSize"];
[&](){[&](){member.buildScratchSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureBuildSizesInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureBuildSizesInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image2DViewOf3D"];
[&](){[&](){json_value=member.image2DViewOf3D;}();}();
auto& json_value=json["sampler2DViewOf3D"];
[&](){[&](){json_value=member.sampler2DViewOf3D;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["image2DViewOf3D"];
[&](){[&](){member.image2DViewOf3D=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["sampler2DViewOf3D"];
[&](){[&](){member.sampler2DViewOf3D=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImage2DViewOf3DFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageSlicedViewOf3D"];
[&](){[&](){json_value=member.imageSlicedViewOf3D;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageSlicedViewOf3D"];
[&](){[&](){member.imageSlicedViewOf3D=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["attachmentFeedbackLoopDynamicState"];
[&](){[&](){json_value=member.attachmentFeedbackLoopDynamicState;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["attachmentFeedbackLoopDynamicState"];
[&](){[&](){member.attachmentFeedbackLoopDynamicState=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["mutableDescriptorType"];
[&](){[&](){json_value=member.mutableDescriptorType;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["mutableDescriptorType"];
[&](){[&](){member.mutableDescriptorType=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMutableDescriptorTypeListEXT& member){
        
    
auto& json_value=json["descriptorTypeCount"];
[&](){json_value=member.descriptorTypeCount;}();
auto& json_value=json["pDescriptorTypes"];
[&](){
            if (member.pDescriptorTypes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int mMCdMcl=0; mMCdMcl < member.descriptorTypeCount; mMCdMcl++){
            [&](){[&](){[&](){json_value[mMCdMcl]=member.pDescriptorTypes[mMCdMcl];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkMutableDescriptorTypeListEXT& member){
auto& json_value=json["descriptorTypeCount"];
[&](){member.descriptorTypeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDescriptorTypes"];
[&](){ VkDescriptorType* temp_ZyhCFqO[&](){
            if (!json_value.as_array().size()==0){
                temp_ZyhCFqO=NULL;
            return; }temp_ZyhCFqO=(VkDescriptorType*)malloc(member.descriptorTypeCount*sizeof(VkDescriptorType));
        auto& arr=json_value.as_array();
        for(int hFwMthy=0; hFwMthy < member.descriptorTypeCount; hFwMthy++){
            [&](){[&](){const VkDescriptorType* temp_qWxMiRy[&](){temp_qWxMiRy=static_cast<int>(value_to<int>(json_value[hFwMthy]));}();temp_ZyhCFqO[hFwMthy]=(VkDescriptorType)temp_qWxMiRy;}();}();
        }
        }();member.pDescriptorTypes=temp_ZyhCFqO;}();
}

    void serialize_pUserData(object& json, VkMutableDescriptorTypeListEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMutableDescriptorTypeListEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMutableDescriptorTypeCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["mutableDescriptorTypeListCount"];
[&](){json_value=member.mutableDescriptorTypeListCount;}();
auto& json_value=json["pMutableDescriptorTypeLists"];
[&](){
            if (member.pMutableDescriptorTypeLists==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int aVFhYgk=0; aVFhYgk < member.mutableDescriptorTypeListCount; aVFhYgk++){
            [&](){
            auto& temp=json_value[aVFhYgk].emplace_object();
            return serialize_struct(temp, member.pMutableDescriptorTypeLists[aVFhYgk]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkMutableDescriptorTypeCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["mutableDescriptorTypeListCount"];
[&](){member.mutableDescriptorTypeListCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pMutableDescriptorTypeLists"];
[&](){ VkMutableDescriptorTypeListEXT* temp_xQhaBqR[&](){
            if (!json_value.as_array().size()==0){
                temp_xQhaBqR=NULL;
            return; }temp_xQhaBqR=(VkMutableDescriptorTypeListEXT*)malloc(member.mutableDescriptorTypeListCount*sizeof(VkMutableDescriptorTypeListEXT));
        auto& arr=json_value.as_array();
        for(int LfvNpBl=0; LfvNpBl < member.mutableDescriptorTypeListCount; LfvNpBl++){
            [&](){
            auto& temp=json_value[LfvNpBl].as_object();
            deserialize_struct(temp,temp_xQhaBqR[LfvNpBl]);
            }();
        }
        }();member.pMutableDescriptorTypeLists=temp_xQhaBqR;}();
}

    void serialize_pUserData(object& json, VkMutableDescriptorTypeCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMutableDescriptorTypeCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDepthClipControlFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["depthClipControl"];
[&](){[&](){json_value=member.depthClipControl;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDepthClipControlFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["depthClipControl"];
[&](){[&](){member.depthClipControl=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDepthClipControlFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDepthClipControlFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineViewportDepthClipControlCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["negativeOneToOne"];
[&](){[&](){json_value=member.negativeOneToOne;}();}();
}
void deserialize_struct(object& json, VkPipelineViewportDepthClipControlCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["negativeOneToOne"];
[&](){[&](){member.negativeOneToOne=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPipelineViewportDepthClipControlCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineViewportDepthClipControlCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["vertexInputDynamicState"];
[&](){[&](){json_value=member.vertexInputDynamicState;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["vertexInputDynamicState"];
[&](){[&](){member.vertexInputDynamicState=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["externalMemoryRDMA"];
[&](){[&](){json_value=member.externalMemoryRDMA;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["externalMemoryRDMA"];
[&](){[&](){member.externalMemoryRDMA=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceExternalMemoryRDMAFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVertexInputBindingDescription2EXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["binding"];
[&](){json_value=member.binding;}();
auto& json_value=json["stride"];
[&](){json_value=member.stride;}();
auto& json_value=json["inputRate"];
[&](){[&](){[&](){json_value=member.inputRate;}();}();}();
auto& json_value=json["divisor"];
[&](){json_value=member.divisor;}();
}
void deserialize_struct(object& json, VkVertexInputBindingDescription2EXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["binding"];
[&](){member.binding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["stride"];
[&](){member.stride=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["inputRate"];
[&](){[&](){VkVertexInputRate temp_RLbOnBW[&](){temp_RLbOnBW=static_cast<int>(value_to<int>(json_value));}();member.inputRate=(VkVertexInputRate)temp_RLbOnBW;}();}();
auto& json_value=json["divisor"];
[&](){member.divisor=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkVertexInputBindingDescription2EXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVertexInputBindingDescription2EXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVertexInputAttributeDescription2EXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["location"];
[&](){json_value=member.location;}();
auto& json_value=json["binding"];
[&](){json_value=member.binding;}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["offset"];
[&](){json_value=member.offset;}();
}
void deserialize_struct(object& json, VkVertexInputAttributeDescription2EXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["location"];
[&](){member.location=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["binding"];
[&](){member.binding=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["offset"];
[&](){member.offset=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkVertexInputAttributeDescription2EXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVertexInputAttributeDescription2EXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceColorWriteEnableFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["colorWriteEnable"];
[&](){[&](){json_value=member.colorWriteEnable;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceColorWriteEnableFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["colorWriteEnable"];
[&](){[&](){member.colorWriteEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceColorWriteEnableFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceColorWriteEnableFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineColorWriteCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["attachmentCount"];
[&](){json_value=member.attachmentCount;}();
auto& json_value=json["pColorWriteEnables"];
[&](){
            if (member.pColorWriteEnables==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int yIAOqhJ=0; yIAOqhJ < member.attachmentCount; yIAOqhJ++){
            [&](){[&](){json_value[yIAOqhJ]=member.pColorWriteEnables[yIAOqhJ];}();}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineColorWriteCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["attachmentCount"];
[&](){member.attachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorWriteEnables"];
[&](){ VkBool32* temp_eQWYBjn[&](){
            if (!json_value.as_array().size()==0){
                temp_eQWYBjn=NULL;
            return; }temp_eQWYBjn=(VkBool32*)malloc(member.attachmentCount*sizeof(VkBool32));
        auto& arr=json_value.as_array();
        for(int DHTXFpH=0; DHTXFpH < member.attachmentCount; DHTXFpH++){
            [&](){[&](){temp_eQWYBjn[DHTXFpH]=static_cast<uint32_t>(value_to<int>(json_value[DHTXFpH]));}();}();
        }
        }();member.pColorWriteEnables=temp_eQWYBjn;}();
}

    void serialize_pUserData(object& json, VkPipelineColorWriteCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineColorWriteCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryBarrier2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcStageMask"];
[&](){[&](){[&](){json_value=member.srcStageMask;}();}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){[&](){json_value=member.dstStageMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
}
void deserialize_struct(object& json, VkMemoryBarrier2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcStageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_jSJgqjG[&](){temp_jSJgqjG=static_cast<int>(value_to<int>(json_value));}();member.srcStageMask=(VkPipelineStageFlags2)temp_jSJgqjG;}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags2 temp_dTOSObi[&](){temp_dTOSObi=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags2)temp_dTOSObi;}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_zqJeZOG[&](){temp_zqJeZOG=static_cast<int>(value_to<int>(json_value));}();member.dstStageMask=(VkPipelineStageFlags2)temp_zqJeZOG;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags2 temp_uEAqlqO[&](){temp_uEAqlqO=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags2)temp_uEAqlqO;}();}();
}

    void serialize_pUserData(object& json, VkMemoryBarrier2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryBarrier2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageMemoryBarrier2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcStageMask"];
[&](){[&](){[&](){json_value=member.srcStageMask;}();}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){[&](){json_value=member.dstStageMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
auto& json_value=json["oldLayout"];
[&](){[&](){[&](){json_value=member.oldLayout;}();}();}();
auto& json_value=json["newLayout"];
[&](){[&](){[&](){json_value=member.newLayout;}();}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){json_value=member.srcQueueFamilyIndex;}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){json_value=member.dstQueueFamilyIndex;}();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.subresourceRange);
            }();
}
void deserialize_struct(object& json, VkImageMemoryBarrier2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcStageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_jSJgqjG[&](){temp_jSJgqjG=static_cast<int>(value_to<int>(json_value));}();member.srcStageMask=(VkPipelineStageFlags2)temp_jSJgqjG;}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags2 temp_dTOSObi[&](){temp_dTOSObi=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags2)temp_dTOSObi;}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_zqJeZOG[&](){temp_zqJeZOG=static_cast<int>(value_to<int>(json_value));}();member.dstStageMask=(VkPipelineStageFlags2)temp_zqJeZOG;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags2 temp_uEAqlqO[&](){temp_uEAqlqO=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags2)temp_uEAqlqO;}();}();
auto& json_value=json["oldLayout"];
[&](){[&](){VkImageLayout temp_IGNsBlw[&](){temp_IGNsBlw=static_cast<int>(value_to<int>(json_value));}();member.oldLayout=(VkImageLayout)temp_IGNsBlw;}();}();
auto& json_value=json["newLayout"];
[&](){[&](){VkImageLayout temp_MiDuiqN[&](){temp_MiDuiqN=static_cast<int>(value_to<int>(json_value));}();member.newLayout=(VkImageLayout)temp_MiDuiqN;}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){member.srcQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){member.dstQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.subresourceRange);
            }();
}

    void serialize_pUserData(object& json, VkImageMemoryBarrier2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageMemoryBarrier2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferMemoryBarrier2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["srcStageMask"];
[&](){[&](){[&](){json_value=member.srcStageMask;}();}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){[&](){json_value=member.srcAccessMask;}();}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){[&](){json_value=member.dstStageMask;}();}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){[&](){json_value=member.dstAccessMask;}();}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){json_value=member.srcQueueFamilyIndex;}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){json_value=member.dstQueueFamilyIndex;}();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkBufferMemoryBarrier2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["srcStageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_jSJgqjG[&](){temp_jSJgqjG=static_cast<int>(value_to<int>(json_value));}();member.srcStageMask=(VkPipelineStageFlags2)temp_jSJgqjG;}();}();
auto& json_value=json["srcAccessMask"];
[&](){[&](){VkAccessFlags2 temp_dTOSObi[&](){temp_dTOSObi=static_cast<int>(value_to<int>(json_value));}();member.srcAccessMask=(VkAccessFlags2)temp_dTOSObi;}();}();
auto& json_value=json["dstStageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_zqJeZOG[&](){temp_zqJeZOG=static_cast<int>(value_to<int>(json_value));}();member.dstStageMask=(VkPipelineStageFlags2)temp_zqJeZOG;}();}();
auto& json_value=json["dstAccessMask"];
[&](){[&](){VkAccessFlags2 temp_uEAqlqO[&](){temp_uEAqlqO=static_cast<int>(value_to<int>(json_value));}();member.dstAccessMask=(VkAccessFlags2)temp_uEAqlqO;}();}();
auto& json_value=json["srcQueueFamilyIndex"];
[&](){member.srcQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["dstQueueFamilyIndex"];
[&](){member.dstQueueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBufferMemoryBarrier2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferMemoryBarrier2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDependencyInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dependencyFlags"];
[&](){[&](){[&](){json_value=member.dependencyFlags;}();}();}();
auto& json_value=json["memoryBarrierCount"];
[&](){json_value=member.memoryBarrierCount;}();
auto& json_value=json["pMemoryBarriers"];
[&](){
            if (member.pMemoryBarriers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int TLpIbmO=0; TLpIbmO < member.memoryBarrierCount; TLpIbmO++){
            [&](){
            auto& temp=json_value[TLpIbmO].emplace_object();
            return serialize_struct(temp, member.pMemoryBarriers[TLpIbmO]);
            }();
        }
        }();
auto& json_value=json["bufferMemoryBarrierCount"];
[&](){json_value=member.bufferMemoryBarrierCount;}();
auto& json_value=json["pBufferMemoryBarriers"];
[&](){
            if (member.pBufferMemoryBarriers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int bKIYONz=0; bKIYONz < member.bufferMemoryBarrierCount; bKIYONz++){
            [&](){
            auto& temp=json_value[bKIYONz].emplace_object();
            return serialize_struct(temp, member.pBufferMemoryBarriers[bKIYONz]);
            }();
        }
        }();
auto& json_value=json["imageMemoryBarrierCount"];
[&](){json_value=member.imageMemoryBarrierCount;}();
auto& json_value=json["pImageMemoryBarriers"];
[&](){
            if (member.pImageMemoryBarriers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int GWgQpPD=0; GWgQpPD < member.imageMemoryBarrierCount; GWgQpPD++){
            [&](){
            auto& temp=json_value[GWgQpPD].emplace_object();
            return serialize_struct(temp, member.pImageMemoryBarriers[GWgQpPD]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDependencyInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["dependencyFlags"];
[&](){[&](){VkDependencyFlags temp_SXdBMBy[&](){temp_SXdBMBy=static_cast<int>(value_to<int>(json_value));}();member.dependencyFlags=(VkDependencyFlags)temp_SXdBMBy;}();}();
auto& json_value=json["memoryBarrierCount"];
[&](){member.memoryBarrierCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pMemoryBarriers"];
[&](){ VkMemoryBarrier2* temp_HUbPqQa[&](){
            if (!json_value.as_array().size()==0){
                temp_HUbPqQa=NULL;
            return; }temp_HUbPqQa=(VkMemoryBarrier2*)malloc(member.memoryBarrierCount*sizeof(VkMemoryBarrier2));
        auto& arr=json_value.as_array();
        for(int MhoHkAx=0; MhoHkAx < member.memoryBarrierCount; MhoHkAx++){
            [&](){
            auto& temp=json_value[MhoHkAx].as_object();
            deserialize_struct(temp,temp_HUbPqQa[MhoHkAx]);
            }();
        }
        }();member.pMemoryBarriers=temp_HUbPqQa;}();
auto& json_value=json["bufferMemoryBarrierCount"];
[&](){member.bufferMemoryBarrierCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBufferMemoryBarriers"];
[&](){ VkBufferMemoryBarrier2* temp_WndPekx[&](){
            if (!json_value.as_array().size()==0){
                temp_WndPekx=NULL;
            return; }temp_WndPekx=(VkBufferMemoryBarrier2*)malloc(member.bufferMemoryBarrierCount*sizeof(VkBufferMemoryBarrier2));
        auto& arr=json_value.as_array();
        for(int NYJDAKD=0; NYJDAKD < member.bufferMemoryBarrierCount; NYJDAKD++){
            [&](){
            auto& temp=json_value[NYJDAKD].as_object();
            deserialize_struct(temp,temp_WndPekx[NYJDAKD]);
            }();
        }
        }();member.pBufferMemoryBarriers=temp_WndPekx;}();
auto& json_value=json["imageMemoryBarrierCount"];
[&](){member.imageMemoryBarrierCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pImageMemoryBarriers"];
[&](){ VkImageMemoryBarrier2* temp_OXvfaqR[&](){
            if (!json_value.as_array().size()==0){
                temp_OXvfaqR=NULL;
            return; }temp_OXvfaqR=(VkImageMemoryBarrier2*)malloc(member.imageMemoryBarrierCount*sizeof(VkImageMemoryBarrier2));
        auto& arr=json_value.as_array();
        for(int wOgpYvu=0; wOgpYvu < member.imageMemoryBarrierCount; wOgpYvu++){
            [&](){
            auto& temp=json_value[wOgpYvu].as_object();
            deserialize_struct(temp,temp_OXvfaqR[wOgpYvu]);
            }();
        }
        }();member.pImageMemoryBarriers=temp_OXvfaqR;}();
}

    void serialize_pUserData(object& json, VkDependencyInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDependencyInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSemaphoreSubmitInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["semaphore"];
[&](){serialize_handle(json_value,member.semaphore);}();
auto& json_value=json["value"];
[&](){json_value=member.value;}();
auto& json_value=json["stageMask"];
[&](){[&](){[&](){json_value=member.stageMask;}();}();}();
auto& json_value=json["deviceIndex"];
[&](){json_value=member.deviceIndex;}();
}
void deserialize_struct(object& json, VkSemaphoreSubmitInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["semaphore"];
[&](){deserialize_handle(json_value, member.semaphore);}();
auto& json_value=json["value"];
[&](){member.value=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["stageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_BdPxuNg[&](){temp_BdPxuNg=static_cast<int>(value_to<int>(json_value));}();member.stageMask=(VkPipelineStageFlags2)temp_BdPxuNg;}();}();
auto& json_value=json["deviceIndex"];
[&](){member.deviceIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSemaphoreSubmitInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSemaphoreSubmitInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferSubmitInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["commandBuffer"];
[&](){serialize_handle(json_value,member.commandBuffer);}();
auto& json_value=json["deviceMask"];
[&](){json_value=member.deviceMask;}();
}
void deserialize_struct(object& json, VkCommandBufferSubmitInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["commandBuffer"];
[&](){deserialize_handle(json_value, member.commandBuffer);}();
auto& json_value=json["deviceMask"];
[&](){member.deviceMask=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkCommandBufferSubmitInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferSubmitInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubmitInfo2& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["waitSemaphoreInfoCount"];
[&](){json_value=member.waitSemaphoreInfoCount;}();
auto& json_value=json["pWaitSemaphoreInfos"];
[&](){
            if (member.pWaitSemaphoreInfos==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int gGUzyVR=0; gGUzyVR < member.waitSemaphoreInfoCount; gGUzyVR++){
            [&](){
            auto& temp=json_value[gGUzyVR].emplace_object();
            return serialize_struct(temp, member.pWaitSemaphoreInfos[gGUzyVR]);
            }();
        }
        }();
auto& json_value=json["commandBufferInfoCount"];
[&](){json_value=member.commandBufferInfoCount;}();
auto& json_value=json["pCommandBufferInfos"];
[&](){
            if (member.pCommandBufferInfos==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int fzyXatx=0; fzyXatx < member.commandBufferInfoCount; fzyXatx++){
            [&](){
            auto& temp=json_value[fzyXatx].emplace_object();
            return serialize_struct(temp, member.pCommandBufferInfos[fzyXatx]);
            }();
        }
        }();
auto& json_value=json["signalSemaphoreInfoCount"];
[&](){json_value=member.signalSemaphoreInfoCount;}();
auto& json_value=json["pSignalSemaphoreInfos"];
[&](){
            if (member.pSignalSemaphoreInfos==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UDwXunL=0; UDwXunL < member.signalSemaphoreInfoCount; UDwXunL++){
            [&](){
            auto& temp=json_value[UDwXunL].emplace_object();
            return serialize_struct(temp, member.pSignalSemaphoreInfos[UDwXunL]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkSubmitInfo2& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkSubmitFlags temp_FFzJJrz[&](){temp_FFzJJrz=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkSubmitFlags)temp_FFzJJrz;}();}();
auto& json_value=json["waitSemaphoreInfoCount"];
[&](){member.waitSemaphoreInfoCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pWaitSemaphoreInfos"];
[&](){ VkSemaphoreSubmitInfo* temp_gCFLSJG[&](){
            if (!json_value.as_array().size()==0){
                temp_gCFLSJG=NULL;
            return; }temp_gCFLSJG=(VkSemaphoreSubmitInfo*)malloc(member.waitSemaphoreInfoCount*sizeof(VkSemaphoreSubmitInfo));
        auto& arr=json_value.as_array();
        for(int ENNkfbt=0; ENNkfbt < member.waitSemaphoreInfoCount; ENNkfbt++){
            [&](){
            auto& temp=json_value[ENNkfbt].as_object();
            deserialize_struct(temp,temp_gCFLSJG[ENNkfbt]);
            }();
        }
        }();member.pWaitSemaphoreInfos=temp_gCFLSJG;}();
auto& json_value=json["commandBufferInfoCount"];
[&](){member.commandBufferInfoCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCommandBufferInfos"];
[&](){ VkCommandBufferSubmitInfo* temp_mcGPVAK[&](){
            if (!json_value.as_array().size()==0){
                temp_mcGPVAK=NULL;
            return; }temp_mcGPVAK=(VkCommandBufferSubmitInfo*)malloc(member.commandBufferInfoCount*sizeof(VkCommandBufferSubmitInfo));
        auto& arr=json_value.as_array();
        for(int gNNiXEC=0; gNNiXEC < member.commandBufferInfoCount; gNNiXEC++){
            [&](){
            auto& temp=json_value[gNNiXEC].as_object();
            deserialize_struct(temp,temp_mcGPVAK[gNNiXEC]);
            }();
        }
        }();member.pCommandBufferInfos=temp_mcGPVAK;}();
auto& json_value=json["signalSemaphoreInfoCount"];
[&](){member.signalSemaphoreInfoCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSignalSemaphoreInfos"];
[&](){ VkSemaphoreSubmitInfo* temp_oHqhAzP[&](){
            if (!json_value.as_array().size()==0){
                temp_oHqhAzP=NULL;
            return; }temp_oHqhAzP=(VkSemaphoreSubmitInfo*)malloc(member.signalSemaphoreInfoCount*sizeof(VkSemaphoreSubmitInfo));
        auto& arr=json_value.as_array();
        for(int sLMGTGF=0; sLMGTGF < member.signalSemaphoreInfoCount; sLMGTGF++){
            [&](){
            auto& temp=json_value[sLMGTGF].as_object();
            deserialize_struct(temp,temp_oHqhAzP[sLMGTGF]);
            }();
        }
        }();member.pSignalSemaphoreInfos=temp_oHqhAzP;}();
}

    void serialize_pUserData(object& json, VkSubmitInfo2& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubmitInfo2& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueueFamilyCheckpointProperties2NV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["checkpointExecutionStageMask"];
[&](){[&](){[&](){json_value=member.checkpointExecutionStageMask;}();}();}();
}
void deserialize_struct(object& json, VkQueueFamilyCheckpointProperties2NV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["checkpointExecutionStageMask"];
[&](){[&](){VkPipelineStageFlags2 temp_LGffYub[&](){temp_LGffYub=static_cast<int>(value_to<int>(json_value));}();member.checkpointExecutionStageMask=(VkPipelineStageFlags2)temp_LGffYub;}();}();
}

    void serialize_pUserData(object& json, VkQueueFamilyCheckpointProperties2NV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueueFamilyCheckpointProperties2NV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCheckpointData2NV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stage"];
[&](){[&](){[&](){json_value=member.stage;}();}();}();
auto& json_value=json["pCheckpointMarker"];
[&](){
            if (member.pCheckpointMarker==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pCheckpointMarker)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ROoHiBu=0; ROoHiBu < strlen((char*)(member.pCheckpointMarker))+1; ROoHiBu++){
            [&](){json_value[ROoHiBu]=(char*)(member.pCheckpointMarker)[ROoHiBu];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkCheckpointData2NV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["stage"];
[&](){[&](){VkPipelineStageFlags2 temp_swFqTuA[&](){temp_swFqTuA=static_cast<int>(value_to<int>(json_value));}();member.stage=(VkPipelineStageFlags2)temp_swFqTuA;}();}();
auto& json_value=json["pCheckpointMarker"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pCheckpointMarker=NULL;
            return; }char* temp_yGlpZpD;[&](){
            if (!json_value.as_array().size()==0){
                member.pCheckpointMarker=NULL;
            return; }member.pCheckpointMarker=(char*)malloc(member.pCheckpointMarker.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int ROoHiBu=0; ROoHiBu < member.pCheckpointMarker.as_array().size();; ROoHiBu++){
            [&](){member.pCheckpointMarker[ROoHiBu]=static_cast<char>(value_to<int>(json_value[ROoHiBu]));}();
        }
        }();member.pCheckpointMarker=temp_yGlpZpD;}();
}

    void serialize_pUserData(object& json, VkCheckpointData2NV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCheckpointData2NV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSynchronization2Features& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["synchronization2"];
[&](){[&](){json_value=member.synchronization2;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSynchronization2Features& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["synchronization2"];
[&](){[&](){member.synchronization2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSynchronization2Features& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSynchronization2Features& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceHostImageCopyFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["hostImageCopy"];
[&](){[&](){json_value=member.hostImageCopy;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceHostImageCopyFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["hostImageCopy"];
[&](){[&](){member.hostImageCopy=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceHostImageCopyFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceHostImageCopyFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceHostImageCopyPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["copySrcLayoutCount"];
[&](){json_value=member.copySrcLayoutCount;}();
auto& json_value=json["pCopySrcLayouts"];
[&](){
            if (member.pCopySrcLayouts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int Mkgnnkd=0; Mkgnnkd < member.copySrcLayoutCount; Mkgnnkd++){
            [&](){[&](){[&](){json_value[Mkgnnkd]=member.pCopySrcLayouts[Mkgnnkd];}();}();}();
        }
        }();
auto& json_value=json["copyDstLayoutCount"];
[&](){json_value=member.copyDstLayoutCount;}();
auto& json_value=json["pCopyDstLayouts"];
[&](){
            if (member.pCopyDstLayouts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ynYdKwH=0; ynYdKwH < member.copyDstLayoutCount; ynYdKwH++){
            [&](){[&](){[&](){json_value[ynYdKwH]=member.pCopyDstLayouts[ynYdKwH];}();}();}();
        }
        }();
auto& json_value=json["optimalTilingLayoutUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int rBEMEhH=0; rBEMEhH < VK_UUID_SIZE; rBEMEhH++){
            [&](){json_value[rBEMEhH]=member.optimalTilingLayoutUUID[rBEMEhH];}();
        }
        }();
auto& json_value=json["identicalMemoryTypeRequirements"];
[&](){[&](){json_value=member.identicalMemoryTypeRequirements;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceHostImageCopyPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["copySrcLayoutCount"];
[&](){member.copySrcLayoutCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCopySrcLayouts"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pCopySrcLayouts=NULL;
            return; }member.pCopySrcLayouts=(VkImageLayout*)malloc(member.copySrcLayoutCount*sizeof(VkImageLayout));
        auto& arr=json_value.as_array();
        for(int Mkgnnkd=0; Mkgnnkd < member.copySrcLayoutCount; Mkgnnkd++){
            [&](){[&](){VkImageLayout* temp_kJRUdYF[&](){temp_kJRUdYF=static_cast<int>(value_to<int>(json_value[Mkgnnkd]));}();member.pCopySrcLayouts[Mkgnnkd]=(VkImageLayout)temp_kJRUdYF;}();}();
        }
        }();
auto& json_value=json["copyDstLayoutCount"];
[&](){member.copyDstLayoutCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pCopyDstLayouts"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pCopyDstLayouts=NULL;
            return; }member.pCopyDstLayouts=(VkImageLayout*)malloc(member.copyDstLayoutCount*sizeof(VkImageLayout));
        auto& arr=json_value.as_array();
        for(int ynYdKwH=0; ynYdKwH < member.copyDstLayoutCount; ynYdKwH++){
            [&](){[&](){VkImageLayout* temp_EecmCxf[&](){temp_EecmCxf=static_cast<int>(value_to<int>(json_value[ynYdKwH]));}();member.pCopyDstLayouts[ynYdKwH]=(VkImageLayout)temp_EecmCxf;}();}();
        }
        }();
auto& json_value=json["optimalTilingLayoutUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int rBEMEhH=0; rBEMEhH < VK_UUID_SIZE; rBEMEhH++){
            [&](){member.optimalTilingLayoutUUID[rBEMEhH]=static_cast<uint8_t>(value_to<int>(json_value[rBEMEhH]));}();
        }
        }();
auto& json_value=json["identicalMemoryTypeRequirements"];
[&](){[&](){member.identicalMemoryTypeRequirements=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceHostImageCopyPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceHostImageCopyPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryToImageCopyEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pHostPointer"];
[&](){
            if (member.pHostPointer==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pHostPointer)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int MgtLJyk=0; MgtLJyk < strlen((char*)(member.pHostPointer))+1; MgtLJyk++){
            [&](){json_value[MgtLJyk]=(char*)(member.pHostPointer)[MgtLJyk];}();
        }
        }();}();
auto& json_value=json["memoryRowLength"];
[&](){json_value=member.memoryRowLength;}();
auto& json_value=json["memoryImageHeight"];
[&](){json_value=member.memoryImageHeight;}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageExtent);
            }();
}
void deserialize_struct(object& json, VkMemoryToImageCopyEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pHostPointer"];
[&](){ void* temp_rSssuyn[&](){
            if (!json_value.as_array().size()==0){
                temp_rSssuyn=NULL;
            return; }char* temp_dKBIJlc;[&](){
            if (!json_value.as_array().size()==0){
                temp_rSssuyn=NULL;
            return; }temp_rSssuyn=(char*)malloc(temp_rSssuyn.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int PdKAgKO=0; PdKAgKO < temp_rSssuyn.as_array().size();; PdKAgKO++){
            [&](){temp_rSssuyn[PdKAgKO]=static_cast<char>(value_to<int>(json_value[PdKAgKO]));}();
        }
        }();temp_rSssuyn=temp_dKBIJlc;}();member.pHostPointer=temp_rSssuyn;}();
auto& json_value=json["memoryRowLength"];
[&](){member.memoryRowLength=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["memoryImageHeight"];
[&](){member.memoryImageHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageExtent);
            }();
}

    void serialize_pUserData(object& json, VkMemoryToImageCopyEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryToImageCopyEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageToMemoryCopyEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pHostPointer"];
[&](){
            if (member.pHostPointer==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pHostPointer)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int XfuwLTM=0; XfuwLTM < 100000; XfuwLTM++){
            [&](){json_value[XfuwLTM]=(char*)(member.pHostPointer)[XfuwLTM];}();
        }
        }();}();
auto& json_value=json["memoryRowLength"];
[&](){json_value=member.memoryRowLength;}();
auto& json_value=json["memoryImageHeight"];
[&](){json_value=member.memoryImageHeight;}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageExtent);
            }();
}
void deserialize_struct(object& json, VkImageToMemoryCopyEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pHostPointer"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pHostPointer=NULL;
            return; }char* temp_fgbgoDo;[&](){
            if (!json_value.as_array().size()==0){
                member.pHostPointer=NULL;
            return; }member.pHostPointer=(char*)malloc(100000*sizeof(char));
        auto& arr=json_value.as_array();
        for(int XfuwLTM=0; XfuwLTM < 100000; XfuwLTM++){
            [&](){member.pHostPointer[XfuwLTM]=static_cast<char>(value_to<int>(json_value[XfuwLTM]));}();
        }
        }();member.pHostPointer=temp_fgbgoDo;}();
auto& json_value=json["memoryRowLength"];
[&](){member.memoryRowLength=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["memoryImageHeight"];
[&](){member.memoryImageHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageSubresource);
            }();
auto& json_value=json["imageOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageOffset);
            }();
auto& json_value=json["imageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageExtent);
            }();
}

    void serialize_pUserData(object& json, VkImageToMemoryCopyEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageToMemoryCopyEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyMemoryToImageInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["dstImage"];
[&](){serialize_handle(json_value,member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){[&](){json_value=member.dstImageLayout;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int FNfhlFN=0; FNfhlFN < member.regionCount; FNfhlFN++){
            [&](){
            auto& temp=json_value[FNfhlFN].emplace_object();
            return serialize_struct(temp, member.pRegions[FNfhlFN]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCopyMemoryToImageInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkHostImageCopyFlagsEXT temp_RkwCPWK[&](){temp_RkwCPWK=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkHostImageCopyFlagsEXT)temp_RkwCPWK;}();}();
auto& json_value=json["dstImage"];
[&](){deserialize_handle(json_value, member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){VkImageLayout temp_eFmuuIn[&](){temp_eFmuuIn=static_cast<int>(value_to<int>(json_value));}();member.dstImageLayout=(VkImageLayout)temp_eFmuuIn;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkMemoryToImageCopyEXT* temp_mkXuEWE[&](){
            if (!json_value.as_array().size()==0){
                temp_mkXuEWE=NULL;
            return; }temp_mkXuEWE=(VkMemoryToImageCopyEXT*)malloc(member.regionCount*sizeof(VkMemoryToImageCopyEXT));
        auto& arr=json_value.as_array();
        for(int yGaZjSW=0; yGaZjSW < member.regionCount; yGaZjSW++){
            [&](){
            auto& temp=json_value[yGaZjSW].as_object();
            deserialize_struct(temp,temp_mkXuEWE[yGaZjSW]);
            }();
        }
        }();member.pRegions=temp_mkXuEWE;}();
}

    void serialize_pUserData(object& json, VkCopyMemoryToImageInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyMemoryToImageInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyImageToMemoryInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["srcImage"];
[&](){serialize_handle(json_value,member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){[&](){json_value=member.srcImageLayout;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int OCYScIs=0; OCYScIs < member.regionCount; OCYScIs++){
            [&](){
            auto& temp=json_value[OCYScIs].emplace_object();
            return serialize_struct(temp, member.pRegions[OCYScIs]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCopyImageToMemoryInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkHostImageCopyFlagsEXT temp_RkwCPWK[&](){temp_RkwCPWK=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkHostImageCopyFlagsEXT)temp_RkwCPWK;}();}();
auto& json_value=json["srcImage"];
[&](){deserialize_handle(json_value, member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){VkImageLayout temp_GZeiZIU[&](){temp_GZeiZIU=static_cast<int>(value_to<int>(json_value));}();member.srcImageLayout=(VkImageLayout)temp_GZeiZIU;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkImageToMemoryCopyEXT* temp_QXptOBp[&](){
            if (!json_value.as_array().size()==0){
                temp_QXptOBp=NULL;
            return; }temp_QXptOBp=(VkImageToMemoryCopyEXT*)malloc(member.regionCount*sizeof(VkImageToMemoryCopyEXT));
        auto& arr=json_value.as_array();
        for(int LJBmGct=0; LJBmGct < member.regionCount; LJBmGct++){
            [&](){
            auto& temp=json_value[LJBmGct].as_object();
            deserialize_struct(temp,temp_QXptOBp[LJBmGct]);
            }();
        }
        }();member.pRegions=temp_QXptOBp;}();
}

    void serialize_pUserData(object& json, VkCopyImageToMemoryInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyImageToMemoryInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyImageToImageInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["srcImage"];
[&](){serialize_handle(json_value,member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){[&](){json_value=member.srcImageLayout;}();}();}();
auto& json_value=json["dstImage"];
[&](){serialize_handle(json_value,member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){[&](){json_value=member.dstImageLayout;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UKtqPyM=0; UKtqPyM < member.regionCount; UKtqPyM++){
            [&](){
            auto& temp=json_value[UKtqPyM].emplace_object();
            return serialize_struct(temp, member.pRegions[UKtqPyM]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCopyImageToImageInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkHostImageCopyFlagsEXT temp_RkwCPWK[&](){temp_RkwCPWK=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkHostImageCopyFlagsEXT)temp_RkwCPWK;}();}();
auto& json_value=json["srcImage"];
[&](){deserialize_handle(json_value, member.srcImage);}();
auto& json_value=json["srcImageLayout"];
[&](){[&](){VkImageLayout temp_GZeiZIU[&](){temp_GZeiZIU=static_cast<int>(value_to<int>(json_value));}();member.srcImageLayout=(VkImageLayout)temp_GZeiZIU;}();}();
auto& json_value=json["dstImage"];
[&](){deserialize_handle(json_value, member.dstImage);}();
auto& json_value=json["dstImageLayout"];
[&](){[&](){VkImageLayout temp_eFmuuIn[&](){temp_eFmuuIn=static_cast<int>(value_to<int>(json_value));}();member.dstImageLayout=(VkImageLayout)temp_eFmuuIn;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkImageCopy2* temp_drUIGDO[&](){
            if (!json_value.as_array().size()==0){
                temp_drUIGDO=NULL;
            return; }temp_drUIGDO=(VkImageCopy2*)malloc(member.regionCount*sizeof(VkImageCopy2));
        auto& arr=json_value.as_array();
        for(int RcpKxBk=0; RcpKxBk < member.regionCount; RcpKxBk++){
            [&](){
            auto& temp=json_value[RcpKxBk].as_object();
            deserialize_struct(temp,temp_drUIGDO[RcpKxBk]);
            }();
        }
        }();member.pRegions=temp_drUIGDO;}();
}

    void serialize_pUserData(object& json, VkCopyImageToImageInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyImageToImageInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkHostImageLayoutTransitionInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
auto& json_value=json["oldLayout"];
[&](){[&](){[&](){json_value=member.oldLayout;}();}();}();
auto& json_value=json["newLayout"];
[&](){[&](){[&](){json_value=member.newLayout;}();}();}();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.subresourceRange);
            }();
}
void deserialize_struct(object& json, VkHostImageLayoutTransitionInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
auto& json_value=json["oldLayout"];
[&](){[&](){VkImageLayout temp_IGNsBlw[&](){temp_IGNsBlw=static_cast<int>(value_to<int>(json_value));}();member.oldLayout=(VkImageLayout)temp_IGNsBlw;}();}();
auto& json_value=json["newLayout"];
[&](){[&](){VkImageLayout temp_MiDuiqN[&](){temp_MiDuiqN=static_cast<int>(value_to<int>(json_value));}();member.newLayout=(VkImageLayout)temp_MiDuiqN;}();}();
auto& json_value=json["subresourceRange"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.subresourceRange);
            }();
}

    void serialize_pUserData(object& json, VkHostImageLayoutTransitionInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkHostImageLayoutTransitionInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubresourceHostMemcpySizeEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkSubresourceHostMemcpySizeEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSubresourceHostMemcpySizeEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubresourceHostMemcpySizeEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkHostImageCopyDevicePerformanceQueryEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["optimalDeviceAccess"];
[&](){[&](){json_value=member.optimalDeviceAccess;}();}();
auto& json_value=json["identicalMemoryLayout"];
[&](){[&](){json_value=member.identicalMemoryLayout;}();}();
}
void deserialize_struct(object& json, VkHostImageCopyDevicePerformanceQueryEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["optimalDeviceAccess"];
[&](){[&](){member.optimalDeviceAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["identicalMemoryLayout"];
[&](){[&](){member.identicalMemoryLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkHostImageCopyDevicePerformanceQueryEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkHostImageCopyDevicePerformanceQueryEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["primitivesGeneratedQuery"];
[&](){[&](){json_value=member.primitivesGeneratedQuery;}();}();
auto& json_value=json["primitivesGeneratedQueryWithRasterizerDiscard"];
[&](){[&](){json_value=member.primitivesGeneratedQueryWithRasterizerDiscard;}();}();
auto& json_value=json["primitivesGeneratedQueryWithNonZeroStreams"];
[&](){[&](){json_value=member.primitivesGeneratedQueryWithNonZeroStreams;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["primitivesGeneratedQuery"];
[&](){[&](){member.primitivesGeneratedQuery=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["primitivesGeneratedQueryWithRasterizerDiscard"];
[&](){[&](){member.primitivesGeneratedQueryWithRasterizerDiscard=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["primitivesGeneratedQueryWithNonZeroStreams"];
[&](){[&](){member.primitivesGeneratedQueryWithNonZeroStreams=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceLegacyDitheringFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["legacyDithering"];
[&](){[&](){json_value=member.legacyDithering;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceLegacyDitheringFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["legacyDithering"];
[&](){[&](){member.legacyDithering=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceLegacyDitheringFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceLegacyDitheringFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["multisampledRenderToSingleSampled"];
[&](){[&](){json_value=member.multisampledRenderToSingleSampled;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["multisampledRenderToSingleSampled"];
[&](){[&](){member.multisampledRenderToSingleSampled=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubpassResolvePerformanceQueryEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["optimal"];
[&](){[&](){json_value=member.optimal;}();}();
}
void deserialize_struct(object& json, VkSubpassResolvePerformanceQueryEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["optimal"];
[&](){[&](){member.optimal=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSubpassResolvePerformanceQueryEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubpassResolvePerformanceQueryEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMultisampledRenderToSingleSampledInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["multisampledRenderToSingleSampledEnable"];
[&](){[&](){json_value=member.multisampledRenderToSingleSampledEnable;}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){[&](){json_value=member.rasterizationSamples;}();}();}();
}
void deserialize_struct(object& json, VkMultisampledRenderToSingleSampledInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["multisampledRenderToSingleSampledEnable"];
[&](){[&](){member.multisampledRenderToSingleSampledEnable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){VkSampleCountFlagBits temp_poTQNon[&](){temp_poTQNon=static_cast<int>(value_to<int>(json_value));}();member.rasterizationSamples=(VkSampleCountFlagBits)temp_poTQNon;}();}();
}

    void serialize_pUserData(object& json, VkMultisampledRenderToSingleSampledInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMultisampledRenderToSingleSampledInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineProtectedAccess"];
[&](){[&](){json_value=member.pipelineProtectedAccess;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelineProtectedAccess"];
[&](){[&](){member.pipelineProtectedAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePipelineProtectedAccessFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueueFamilyVideoPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["videoCodecOperations"];
[&](){[&](){[&](){json_value=member.videoCodecOperations;}();}();}();
}
void deserialize_struct(object& json, VkQueueFamilyVideoPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["videoCodecOperations"];
[&](){[&](){VkVideoCodecOperationFlagsKHR temp_NeowrBH[&](){temp_NeowrBH=static_cast<int>(value_to<int>(json_value));}();member.videoCodecOperations=(VkVideoCodecOperationFlagsKHR)temp_NeowrBH;}();}();
}

    void serialize_pUserData(object& json, VkQueueFamilyVideoPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueueFamilyVideoPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueueFamilyQueryResultStatusPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["queryResultStatusSupport"];
[&](){[&](){json_value=member.queryResultStatusSupport;}();}();
}
void deserialize_struct(object& json, VkQueueFamilyQueryResultStatusPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["queryResultStatusSupport"];
[&](){[&](){member.queryResultStatusSupport=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkQueueFamilyQueryResultStatusPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueueFamilyQueryResultStatusPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoProfileListInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["profileCount"];
[&](){json_value=member.profileCount;}();
auto& json_value=json["pProfiles"];
[&](){
            if (member.pProfiles==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int eTTbcXY=0; eTTbcXY < member.profileCount; eTTbcXY++){
            [&](){
            auto& temp=json_value[eTTbcXY].emplace_object();
            return serialize_struct(temp, member.pProfiles[eTTbcXY]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkVideoProfileListInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["profileCount"];
[&](){member.profileCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pProfiles"];
[&](){ VkVideoProfileInfoKHR* temp_KMAFxEn[&](){
            if (!json_value.as_array().size()==0){
                temp_KMAFxEn=NULL;
            return; }temp_KMAFxEn=(VkVideoProfileInfoKHR*)malloc(member.profileCount*sizeof(VkVideoProfileInfoKHR));
        auto& arr=json_value.as_array();
        for(int keIVVNm=0; keIVVNm < member.profileCount; keIVVNm++){
            [&](){
            auto& temp=json_value[keIVVNm].as_object();
            deserialize_struct(temp,temp_KMAFxEn[keIVVNm]);
            }();
        }
        }();member.pProfiles=temp_KMAFxEn;}();
}

    void serialize_pUserData(object& json, VkVideoProfileListInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoProfileListInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceVideoFormatInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageUsage"];
[&](){[&](){[&](){json_value=member.imageUsage;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceVideoFormatInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["imageUsage"];
[&](){[&](){VkImageUsageFlags temp_LxhTcxS[&](){temp_LxhTcxS=static_cast<int>(value_to<int>(json_value));}();member.imageUsage=(VkImageUsageFlags)temp_LxhTcxS;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceVideoFormatInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceVideoFormatInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoFormatPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
auto& json_value=json["componentMapping"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.componentMapping);
            }();
auto& json_value=json["imageCreateFlags"];
[&](){[&](){[&](){json_value=member.imageCreateFlags;}();}();}();
auto& json_value=json["imageType"];
[&](){[&](){[&](){json_value=member.imageType;}();}();}();
auto& json_value=json["imageTiling"];
[&](){[&](){[&](){json_value=member.imageTiling;}();}();}();
auto& json_value=json["imageUsageFlags"];
[&](){[&](){[&](){json_value=member.imageUsageFlags;}();}();}();
}
void deserialize_struct(object& json, VkVideoFormatPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
auto& json_value=json["componentMapping"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.componentMapping);
            }();
auto& json_value=json["imageCreateFlags"];
[&](){[&](){VkImageCreateFlags temp_RKSQDDB[&](){temp_RKSQDDB=static_cast<int>(value_to<int>(json_value));}();member.imageCreateFlags=(VkImageCreateFlags)temp_RKSQDDB;}();}();
auto& json_value=json["imageType"];
[&](){[&](){VkImageType temp_ZiBhoWZ[&](){temp_ZiBhoWZ=static_cast<int>(value_to<int>(json_value));}();member.imageType=(VkImageType)temp_ZiBhoWZ;}();}();
auto& json_value=json["imageTiling"];
[&](){[&](){VkImageTiling temp_DSNRLMr[&](){temp_DSNRLMr=static_cast<int>(value_to<int>(json_value));}();member.imageTiling=(VkImageTiling)temp_DSNRLMr;}();}();
auto& json_value=json["imageUsageFlags"];
[&](){[&](){VkImageUsageFlags temp_dgUEHcB[&](){temp_dgUEHcB=static_cast<int>(value_to<int>(json_value));}();member.imageUsageFlags=(VkImageUsageFlags)temp_dgUEHcB;}();}();
}

    void serialize_pUserData(object& json, VkVideoFormatPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoFormatPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoProfileInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["videoCodecOperation"];
[&](){[&](){[&](){json_value=member.videoCodecOperation;}();}();}();
auto& json_value=json["chromaSubsampling"];
[&](){[&](){[&](){json_value=member.chromaSubsampling;}();}();}();
auto& json_value=json["lumaBitDepth"];
[&](){[&](){[&](){json_value=member.lumaBitDepth;}();}();}();
auto& json_value=json["chromaBitDepth"];
[&](){[&](){[&](){json_value=member.chromaBitDepth;}();}();}();
}
void deserialize_struct(object& json, VkVideoProfileInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["videoCodecOperation"];
[&](){[&](){VkVideoCodecOperationFlagBitsKHR temp_rWXRjIz[&](){temp_rWXRjIz=static_cast<int>(value_to<int>(json_value));}();member.videoCodecOperation=(VkVideoCodecOperationFlagBitsKHR)temp_rWXRjIz;}();}();
auto& json_value=json["chromaSubsampling"];
[&](){[&](){VkVideoChromaSubsamplingFlagsKHR temp_TDxayiO[&](){temp_TDxayiO=static_cast<int>(value_to<int>(json_value));}();member.chromaSubsampling=(VkVideoChromaSubsamplingFlagsKHR)temp_TDxayiO;}();}();
auto& json_value=json["lumaBitDepth"];
[&](){[&](){VkVideoComponentBitDepthFlagsKHR temp_elAMHba[&](){temp_elAMHba=static_cast<int>(value_to<int>(json_value));}();member.lumaBitDepth=(VkVideoComponentBitDepthFlagsKHR)temp_elAMHba;}();}();
auto& json_value=json["chromaBitDepth"];
[&](){[&](){VkVideoComponentBitDepthFlagsKHR temp_xHoSGiR[&](){temp_xHoSGiR=static_cast<int>(value_to<int>(json_value));}();member.chromaBitDepth=(VkVideoComponentBitDepthFlagsKHR)temp_xHoSGiR;}();}();
}

    void serialize_pUserData(object& json, VkVideoProfileInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoProfileInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoCapabilitiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["minBitstreamBufferOffsetAlignment"];
[&](){[&](){json_value=member.minBitstreamBufferOffsetAlignment;}();}();
auto& json_value=json["minBitstreamBufferSizeAlignment"];
[&](){[&](){json_value=member.minBitstreamBufferSizeAlignment;}();}();
auto& json_value=json["pictureAccessGranularity"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pictureAccessGranularity);
            }();
auto& json_value=json["minCodedExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minCodedExtent);
            }();
auto& json_value=json["maxCodedExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxCodedExtent);
            }();
auto& json_value=json["maxDpbSlots"];
[&](){json_value=member.maxDpbSlots;}();
auto& json_value=json["maxActiveReferencePictures"];
[&](){json_value=member.maxActiveReferencePictures;}();
auto& json_value=json["stdHeaderVersion"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.stdHeaderVersion);
            }();
}
void deserialize_struct(object& json, VkVideoCapabilitiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkVideoCapabilityFlagsKHR temp_QQunCNk[&](){temp_QQunCNk=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoCapabilityFlagsKHR)temp_QQunCNk;}();}();
auto& json_value=json["minBitstreamBufferOffsetAlignment"];
[&](){[&](){member.minBitstreamBufferOffsetAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["minBitstreamBufferSizeAlignment"];
[&](){[&](){member.minBitstreamBufferSizeAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["pictureAccessGranularity"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pictureAccessGranularity);
            }();
auto& json_value=json["minCodedExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minCodedExtent);
            }();
auto& json_value=json["maxCodedExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxCodedExtent);
            }();
auto& json_value=json["maxDpbSlots"];
[&](){member.maxDpbSlots=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxActiveReferencePictures"];
[&](){member.maxActiveReferencePictures=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["stdHeaderVersion"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.stdHeaderVersion);
            }();
}

    void serialize_pUserData(object& json, VkVideoCapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoCapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoSessionMemoryRequirementsKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryBindIndex"];
[&](){json_value=member.memoryBindIndex;}();
auto& json_value=json["memoryRequirements"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.memoryRequirements);
            }();
}
void deserialize_struct(object& json, VkVideoSessionMemoryRequirementsKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["memoryBindIndex"];
[&](){member.memoryBindIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["memoryRequirements"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.memoryRequirements);
            }();
}

    void serialize_pUserData(object& json, VkVideoSessionMemoryRequirementsKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoSessionMemoryRequirementsKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBindVideoSessionMemoryInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memoryBindIndex"];
[&](){json_value=member.memoryBindIndex;}();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){json_value=member.memoryOffset;}();}();
auto& json_value=json["memorySize"];
[&](){[&](){json_value=member.memorySize;}();}();
}
void deserialize_struct(object& json, VkBindVideoSessionMemoryInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["memoryBindIndex"];
[&](){member.memoryBindIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["memoryOffset"];
[&](){[&](){member.memoryOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["memorySize"];
[&](){[&](){member.memorySize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkBindVideoSessionMemoryInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBindVideoSessionMemoryInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoPictureResourceInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["codedOffset"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.codedOffset);
            }();
auto& json_value=json["codedExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.codedExtent);
            }();
auto& json_value=json["baseArrayLayer"];
[&](){json_value=member.baseArrayLayer;}();
auto& json_value=json["imageViewBinding"];
[&](){serialize_handle(json_value,member.imageViewBinding);}();
}
void deserialize_struct(object& json, VkVideoPictureResourceInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["codedOffset"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.codedOffset);
            }();
auto& json_value=json["codedExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.codedExtent);
            }();
auto& json_value=json["baseArrayLayer"];
[&](){member.baseArrayLayer=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageViewBinding"];
[&](){deserialize_handle(json_value, member.imageViewBinding);}();
}

    void serialize_pUserData(object& json, VkVideoPictureResourceInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoPictureResourceInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoReferenceSlotInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["slotIndex"];
[&](){json_value=member.slotIndex;}();
auto& json_value=json["pPictureResource"];
[&](){
            if (member.pPictureResource==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int evqJarY=0; evqJarY < 1; evqJarY++){
            [&](){
            auto& temp=json_value[evqJarY].emplace_object();
            return serialize_struct(temp, member.pPictureResource[evqJarY]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkVideoReferenceSlotInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["slotIndex"];
[&](){member.slotIndex=static_cast<int32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPictureResource"];
[&](){ VkVideoPictureResourceInfoKHR* temp_RcpzVVQ[&](){
            if (!json_value.as_array().size()==0){
                temp_RcpzVVQ=NULL;
            return; }temp_RcpzVVQ=(VkVideoPictureResourceInfoKHR*)malloc(1*sizeof(VkVideoPictureResourceInfoKHR));
        auto& arr=json_value.as_array();
        for(int WoaGUEX=0; WoaGUEX < 1; WoaGUEX++){
            [&](){
            auto& temp=json_value[WoaGUEX].as_object();
            deserialize_struct(temp,temp_RcpzVVQ[WoaGUEX]);
            }();
        }
        }();member.pPictureResource=temp_RcpzVVQ;}();
}

    void serialize_pUserData(object& json, VkVideoReferenceSlotInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoReferenceSlotInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeCapabilitiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkVideoDecodeCapabilitiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkVideoDecodeCapabilityFlagsKHR temp_qyUUvVH[&](){temp_qyUUvVH=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoDecodeCapabilityFlagsKHR)temp_qyUUvVH;}();}();
}

    void serialize_pUserData(object& json, VkVideoDecodeCapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeCapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeUsageInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["videoUsageHints"];
[&](){[&](){[&](){json_value=member.videoUsageHints;}();}();}();
}
void deserialize_struct(object& json, VkVideoDecodeUsageInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["videoUsageHints"];
[&](){[&](){VkVideoDecodeUsageFlagsKHR temp_PMaLqmT[&](){temp_PMaLqmT=static_cast<int>(value_to<int>(json_value));}();member.videoUsageHints=(VkVideoDecodeUsageFlagsKHR)temp_PMaLqmT;}();}();
}

    void serialize_pUserData(object& json, VkVideoDecodeUsageInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeUsageInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["srcBuffer"];
[&](){serialize_handle(json_value,member.srcBuffer);}();
auto& json_value=json["srcBufferOffset"];
[&](){[&](){json_value=member.srcBufferOffset;}();}();
auto& json_value=json["srcBufferRange"];
[&](){[&](){json_value=member.srcBufferRange;}();}();
auto& json_value=json["dstPictureResource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dstPictureResource);
            }();
auto& json_value=json["pSetupReferenceSlot"];
[&](){
            if (member.pSetupReferenceSlot==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int MYiEGbW=0; MYiEGbW < 1; MYiEGbW++){
            [&](){
            auto& temp=json_value[MYiEGbW].emplace_object();
            return serialize_struct(temp, member.pSetupReferenceSlot[MYiEGbW]);
            }();
        }
        }();
auto& json_value=json["referenceSlotCount"];
[&](){json_value=member.referenceSlotCount;}();
auto& json_value=json["pReferenceSlots"];
[&](){
            if (member.pReferenceSlots==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int qhYgHtG=0; qhYgHtG < member.referenceSlotCount; qhYgHtG++){
            [&](){
            auto& temp=json_value[qhYgHtG].emplace_object();
            return serialize_struct(temp, member.pReferenceSlots[qhYgHtG]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkVideoDecodeInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkVideoDecodeFlagsKHR temp_bzLtucI[&](){temp_bzLtucI=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoDecodeFlagsKHR)temp_bzLtucI;}();}();
auto& json_value=json["srcBuffer"];
[&](){deserialize_handle(json_value, member.srcBuffer);}();
auto& json_value=json["srcBufferOffset"];
[&](){[&](){member.srcBufferOffset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["srcBufferRange"];
[&](){[&](){member.srcBufferRange=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dstPictureResource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dstPictureResource);
            }();
auto& json_value=json["pSetupReferenceSlot"];
[&](){ VkVideoReferenceSlotInfoKHR* temp_gTPLFDJ[&](){
            if (!json_value.as_array().size()==0){
                temp_gTPLFDJ=NULL;
            return; }temp_gTPLFDJ=(VkVideoReferenceSlotInfoKHR*)malloc(1*sizeof(VkVideoReferenceSlotInfoKHR));
        auto& arr=json_value.as_array();
        for(int wXzHASH=0; wXzHASH < 1; wXzHASH++){
            [&](){
            auto& temp=json_value[wXzHASH].as_object();
            deserialize_struct(temp,temp_gTPLFDJ[wXzHASH]);
            }();
        }
        }();member.pSetupReferenceSlot=temp_gTPLFDJ;}();
auto& json_value=json["referenceSlotCount"];
[&](){member.referenceSlotCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pReferenceSlots"];
[&](){ VkVideoReferenceSlotInfoKHR* temp_vxksoOe[&](){
            if (!json_value.as_array().size()==0){
                temp_vxksoOe=NULL;
            return; }temp_vxksoOe=(VkVideoReferenceSlotInfoKHR*)malloc(member.referenceSlotCount*sizeof(VkVideoReferenceSlotInfoKHR));
        auto& arr=json_value.as_array();
        for(int fqLTYsR=0; fqLTYsR < member.referenceSlotCount; fqLTYsR++){
            [&](){
            auto& temp=json_value[fqLTYsR].as_object();
            deserialize_struct(temp,temp_vxksoOe[fqLTYsR]);
            }();
        }
        }();member.pReferenceSlots=temp_vxksoOe;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH264ProfileInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stdProfileIdc"];
[&](){json_value=(uintptr_t)member.stdProfileIdc;}();
auto& json_value=json["pictureLayout"];
[&](){[&](){[&](){json_value=member.pictureLayout;}();}();}();
}
void deserialize_struct(object& json, VkVideoDecodeH264ProfileInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["stdProfileIdc"];
[&](){variable=value_to<uintptr_t>(json_value);}();
auto& json_value=json["pictureLayout"];
[&](){[&](){VkVideoDecodeH264PictureLayoutFlagBitsKHR temp_LlwjTOy[&](){temp_LlwjTOy=static_cast<int>(value_to<int>(json_value));}();member.pictureLayout=(VkVideoDecodeH264PictureLayoutFlagBitsKHR)temp_LlwjTOy;}();}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH264ProfileInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH264ProfileInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH264CapabilitiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxLevelIdc"];
[&](){json_value=(uintptr_t)member.maxLevelIdc;}();
auto& json_value=json["fieldOffsetGranularity"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.fieldOffsetGranularity);
            }();
}
void deserialize_struct(object& json, VkVideoDecodeH264CapabilitiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxLevelIdc"];
[&](){variable=value_to<uintptr_t>(json_value);}();
auto& json_value=json["fieldOffsetGranularity"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.fieldOffsetGranularity);
            }();
}

    void serialize_pUserData(object& json, VkVideoDecodeH264CapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH264CapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH264SessionParametersAddInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stdSPSCount"];
[&](){json_value=member.stdSPSCount;}();
auto& json_value=json["pStdSPSs"];
[&](){
            if (member.pStdSPSs==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdSPSs;}();
auto& json_value=json["stdPPSCount"];
[&](){json_value=member.stdPPSCount;}();
auto& json_value=json["pStdPPSs"];
[&](){
            if (member.pStdPPSs==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdPPSs;}();
}
void deserialize_struct(object& json, VkVideoDecodeH264SessionParametersAddInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["stdSPSCount"];
[&](){member.stdSPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStdSPSs"];
[&](){ StdVideoH264SequenceParameterSet* temp_KtvLDtt[&](){
            if (!json_value.as_array().size()==0){
                temp_KtvLDtt=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdSPSs=temp_KtvLDtt;}();
auto& json_value=json["stdPPSCount"];
[&](){member.stdPPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStdPPSs"];
[&](){ StdVideoH264PictureParameterSet* temp_wNbltMD[&](){
            if (!json_value.as_array().size()==0){
                temp_wNbltMD=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdPPSs=temp_wNbltMD;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH264SessionParametersAddInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH264SessionParametersAddInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH264SessionParametersCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxStdSPSCount"];
[&](){json_value=member.maxStdSPSCount;}();
auto& json_value=json["maxStdPPSCount"];
[&](){json_value=member.maxStdPPSCount;}();
auto& json_value=json["pParametersAddInfo"];
[&](){
            if (member.pParametersAddInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int zjiJYDr=0; zjiJYDr < 1; zjiJYDr++){
            [&](){
            auto& temp=json_value[zjiJYDr].emplace_object();
            return serialize_struct(temp, member.pParametersAddInfo[zjiJYDr]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkVideoDecodeH264SessionParametersCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["maxStdSPSCount"];
[&](){member.maxStdSPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxStdPPSCount"];
[&](){member.maxStdPPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pParametersAddInfo"];
[&](){ VkVideoDecodeH264SessionParametersAddInfoKHR* temp_WinEbhG[&](){
            if (!json_value.as_array().size()==0){
                temp_WinEbhG=NULL;
            return; }temp_WinEbhG=(VkVideoDecodeH264SessionParametersAddInfoKHR*)malloc(1*sizeof(VkVideoDecodeH264SessionParametersAddInfoKHR));
        auto& arr=json_value.as_array();
        for(int wOtWEgo=0; wOtWEgo < 1; wOtWEgo++){
            [&](){
            auto& temp=json_value[wOtWEgo].as_object();
            deserialize_struct(temp,temp_WinEbhG[wOtWEgo]);
            }();
        }
        }();member.pParametersAddInfo=temp_WinEbhG;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH264SessionParametersCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH264SessionParametersCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH264PictureInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pStdPictureInfo"];
[&](){
            if (member.pStdPictureInfo==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdPictureInfo;}();
auto& json_value=json["sliceCount"];
[&](){json_value=member.sliceCount;}();
auto& json_value=json["pSliceOffsets"];
[&](){
            if (member.pSliceOffsets==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int EGgLcXn=0; EGgLcXn < member.sliceCount; EGgLcXn++){
            [&](){json_value[EGgLcXn]=member.pSliceOffsets[EGgLcXn];}();
        }
        }();
}
void deserialize_struct(object& json, VkVideoDecodeH264PictureInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pStdPictureInfo"];
[&](){ StdVideoDecodeH264PictureInfo* temp_qpvDkWK[&](){
            if (!json_value.as_array().size()==0){
                temp_qpvDkWK=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdPictureInfo=temp_qpvDkWK;}();
auto& json_value=json["sliceCount"];
[&](){member.sliceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSliceOffsets"];
[&](){ uint32_t* temp_GIJICiM[&](){
            if (!json_value.as_array().size()==0){
                temp_GIJICiM=NULL;
            return; }temp_GIJICiM=(uint32_t*)malloc(member.sliceCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int KicFNTx=0; KicFNTx < member.sliceCount; KicFNTx++){
            [&](){temp_GIJICiM[KicFNTx]=static_cast<uint32_t>(value_to<int>(json_value[KicFNTx]));}();
        }
        }();member.pSliceOffsets=temp_GIJICiM;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH264PictureInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH264PictureInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH264DpbSlotInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pStdReferenceInfo"];
[&](){
            if (member.pStdReferenceInfo==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdReferenceInfo;}();
}
void deserialize_struct(object& json, VkVideoDecodeH264DpbSlotInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pStdReferenceInfo"];
[&](){ StdVideoDecodeH264ReferenceInfo* temp_PbZvQmC[&](){
            if (!json_value.as_array().size()==0){
                temp_PbZvQmC=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdReferenceInfo=temp_PbZvQmC;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH264DpbSlotInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH264DpbSlotInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH265ProfileInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stdProfileIdc"];
[&](){json_value=(uintptr_t)member.stdProfileIdc;}();
}
void deserialize_struct(object& json, VkVideoDecodeH265ProfileInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["stdProfileIdc"];
[&](){variable=value_to<uintptr_t>(json_value);}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH265ProfileInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH265ProfileInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH265CapabilitiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxLevelIdc"];
[&](){json_value=(uintptr_t)member.maxLevelIdc;}();
}
void deserialize_struct(object& json, VkVideoDecodeH265CapabilitiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxLevelIdc"];
[&](){variable=value_to<uintptr_t>(json_value);}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH265CapabilitiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH265CapabilitiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH265SessionParametersAddInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["stdVPSCount"];
[&](){json_value=member.stdVPSCount;}();
auto& json_value=json["pStdVPSs"];
[&](){
            if (member.pStdVPSs==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdVPSs;}();
auto& json_value=json["stdSPSCount"];
[&](){json_value=member.stdSPSCount;}();
auto& json_value=json["pStdSPSs"];
[&](){
            if (member.pStdSPSs==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdSPSs;}();
auto& json_value=json["stdPPSCount"];
[&](){json_value=member.stdPPSCount;}();
auto& json_value=json["pStdPPSs"];
[&](){
            if (member.pStdPPSs==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdPPSs;}();
}
void deserialize_struct(object& json, VkVideoDecodeH265SessionParametersAddInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["stdVPSCount"];
[&](){member.stdVPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStdVPSs"];
[&](){ StdVideoH265VideoParameterSet* temp_AjZzebt[&](){
            if (!json_value.as_array().size()==0){
                temp_AjZzebt=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdVPSs=temp_AjZzebt;}();
auto& json_value=json["stdSPSCount"];
[&](){member.stdSPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStdSPSs"];
[&](){ StdVideoH265SequenceParameterSet* temp_dbERLOw[&](){
            if (!json_value.as_array().size()==0){
                temp_dbERLOw=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdSPSs=temp_dbERLOw;}();
auto& json_value=json["stdPPSCount"];
[&](){member.stdPPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStdPPSs"];
[&](){ StdVideoH265PictureParameterSet* temp_LkIjHYG[&](){
            if (!json_value.as_array().size()==0){
                temp_LkIjHYG=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdPPSs=temp_LkIjHYG;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH265SessionParametersAddInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH265SessionParametersAddInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH265SessionParametersCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxStdVPSCount"];
[&](){json_value=member.maxStdVPSCount;}();
auto& json_value=json["maxStdSPSCount"];
[&](){json_value=member.maxStdSPSCount;}();
auto& json_value=json["maxStdPPSCount"];
[&](){json_value=member.maxStdPPSCount;}();
auto& json_value=json["pParametersAddInfo"];
[&](){
            if (member.pParametersAddInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int IoqzVQV=0; IoqzVQV < 1; IoqzVQV++){
            [&](){
            auto& temp=json_value[IoqzVQV].emplace_object();
            return serialize_struct(temp, member.pParametersAddInfo[IoqzVQV]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkVideoDecodeH265SessionParametersCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["maxStdVPSCount"];
[&](){member.maxStdVPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxStdSPSCount"];
[&](){member.maxStdSPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxStdPPSCount"];
[&](){member.maxStdPPSCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pParametersAddInfo"];
[&](){ VkVideoDecodeH265SessionParametersAddInfoKHR* temp_nDENJWV[&](){
            if (!json_value.as_array().size()==0){
                temp_nDENJWV=NULL;
            return; }temp_nDENJWV=(VkVideoDecodeH265SessionParametersAddInfoKHR*)malloc(1*sizeof(VkVideoDecodeH265SessionParametersAddInfoKHR));
        auto& arr=json_value.as_array();
        for(int SZNcaCU=0; SZNcaCU < 1; SZNcaCU++){
            [&](){
            auto& temp=json_value[SZNcaCU].as_object();
            deserialize_struct(temp,temp_nDENJWV[SZNcaCU]);
            }();
        }
        }();member.pParametersAddInfo=temp_nDENJWV;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH265SessionParametersCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH265SessionParametersCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH265PictureInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pStdPictureInfo"];
[&](){
            if (member.pStdPictureInfo==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdPictureInfo;}();
auto& json_value=json["sliceSegmentCount"];
[&](){json_value=member.sliceSegmentCount;}();
auto& json_value=json["pSliceSegmentOffsets"];
[&](){
            if (member.pSliceSegmentOffsets==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int YXObous=0; YXObous < member.sliceSegmentCount; YXObous++){
            [&](){json_value[YXObous]=member.pSliceSegmentOffsets[YXObous];}();
        }
        }();
}
void deserialize_struct(object& json, VkVideoDecodeH265PictureInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pStdPictureInfo"];
[&](){ StdVideoDecodeH265PictureInfo* temp_bcpKudK[&](){
            if (!json_value.as_array().size()==0){
                temp_bcpKudK=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdPictureInfo=temp_bcpKudK;}();
auto& json_value=json["sliceSegmentCount"];
[&](){member.sliceSegmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSliceSegmentOffsets"];
[&](){ uint32_t* temp_pdskGep[&](){
            if (!json_value.as_array().size()==0){
                temp_pdskGep=NULL;
            return; }temp_pdskGep=(uint32_t*)malloc(member.sliceSegmentCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int bIoEGZU=0; bIoEGZU < member.sliceSegmentCount; bIoEGZU++){
            [&](){temp_pdskGep[bIoEGZU]=static_cast<uint32_t>(value_to<int>(json_value[bIoEGZU]));}();
        }
        }();member.pSliceSegmentOffsets=temp_pdskGep;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH265PictureInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH265PictureInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoDecodeH265DpbSlotInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pStdReferenceInfo"];
[&](){
            if (member.pStdReferenceInfo==NULL){
                json_value=array();
            return; }json_value=(uintptr_t)member.pStdReferenceInfo;}();
}
void deserialize_struct(object& json, VkVideoDecodeH265DpbSlotInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pStdReferenceInfo"];
[&](){ StdVideoDecodeH265ReferenceInfo* temp_ZuBuGOK[&](){
            if (!json_value.as_array().size()==0){
                temp_ZuBuGOK=NULL;
            return; }variable=value_to<uintptr_t>(json_value);}();member.pStdReferenceInfo=temp_ZuBuGOK;}();
}

    void serialize_pUserData(object& json, VkVideoDecodeH265DpbSlotInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoDecodeH265DpbSlotInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoSessionCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["queueFamilyIndex"];
[&](){json_value=member.queueFamilyIndex;}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pVideoProfile"];
[&](){
            if (member.pVideoProfile==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int bzdcboe=0; bzdcboe < 1; bzdcboe++){
            [&](){
            auto& temp=json_value[bzdcboe].emplace_object();
            return serialize_struct(temp, member.pVideoProfile[bzdcboe]);
            }();
        }
        }();
auto& json_value=json["pictureFormat"];
[&](){[&](){[&](){json_value=member.pictureFormat;}();}();}();
auto& json_value=json["maxCodedExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxCodedExtent);
            }();
auto& json_value=json["referencePictureFormat"];
[&](){[&](){[&](){json_value=member.referencePictureFormat;}();}();}();
auto& json_value=json["maxDpbSlots"];
[&](){json_value=member.maxDpbSlots;}();
auto& json_value=json["maxActiveReferencePictures"];
[&](){json_value=member.maxActiveReferencePictures;}();
auto& json_value=json["pStdHeaderVersion"];
[&](){
            if (member.pStdHeaderVersion==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UonLNWm=0; UonLNWm < 1; UonLNWm++){
            [&](){
            auto& temp=json_value[UonLNWm].emplace_object();
            return serialize_struct(temp, member.pStdHeaderVersion[UonLNWm]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkVideoSessionCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["queueFamilyIndex"];
[&](){member.queueFamilyIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["flags"];
[&](){[&](){VkVideoSessionCreateFlagsKHR temp_egSsrWl[&](){temp_egSsrWl=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoSessionCreateFlagsKHR)temp_egSsrWl;}();}();
auto& json_value=json["pVideoProfile"];
[&](){ VkVideoProfileInfoKHR* temp_CEmjoqs[&](){
            if (!json_value.as_array().size()==0){
                temp_CEmjoqs=NULL;
            return; }temp_CEmjoqs=(VkVideoProfileInfoKHR*)malloc(1*sizeof(VkVideoProfileInfoKHR));
        auto& arr=json_value.as_array();
        for(int SupZTTs=0; SupZTTs < 1; SupZTTs++){
            [&](){
            auto& temp=json_value[SupZTTs].as_object();
            deserialize_struct(temp,temp_CEmjoqs[SupZTTs]);
            }();
        }
        }();member.pVideoProfile=temp_CEmjoqs;}();
auto& json_value=json["pictureFormat"];
[&](){[&](){VkFormat temp_AiLKzbC[&](){temp_AiLKzbC=static_cast<int>(value_to<int>(json_value));}();member.pictureFormat=(VkFormat)temp_AiLKzbC;}();}();
auto& json_value=json["maxCodedExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxCodedExtent);
            }();
auto& json_value=json["referencePictureFormat"];
[&](){[&](){VkFormat temp_runciex[&](){temp_runciex=static_cast<int>(value_to<int>(json_value));}();member.referencePictureFormat=(VkFormat)temp_runciex;}();}();
auto& json_value=json["maxDpbSlots"];
[&](){member.maxDpbSlots=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxActiveReferencePictures"];
[&](){member.maxActiveReferencePictures=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pStdHeaderVersion"];
[&](){ VkExtensionProperties* temp_bgSJaQk[&](){
            if (!json_value.as_array().size()==0){
                temp_bgSJaQk=NULL;
            return; }temp_bgSJaQk=(VkExtensionProperties*)malloc(1*sizeof(VkExtensionProperties));
        auto& arr=json_value.as_array();
        for(int AoXHhyO=0; AoXHhyO < 1; AoXHhyO++){
            [&](){
            auto& temp=json_value[AoXHhyO].as_object();
            deserialize_struct(temp,temp_bgSJaQk[AoXHhyO]);
            }();
        }
        }();member.pStdHeaderVersion=temp_bgSJaQk;}();
}

    void serialize_pUserData(object& json, VkVideoSessionCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoSessionCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoSessionParametersCreateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["videoSessionParametersTemplate"];
[&](){serialize_handle(json_value,member.videoSessionParametersTemplate);}();
auto& json_value=json["videoSession"];
[&](){serialize_handle(json_value,member.videoSession);}();
}
void deserialize_struct(object& json, VkVideoSessionParametersCreateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkVideoSessionParametersCreateFlagsKHR temp_YgBOhdz[&](){temp_YgBOhdz=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoSessionParametersCreateFlagsKHR)temp_YgBOhdz;}();}();
auto& json_value=json["videoSessionParametersTemplate"];
[&](){deserialize_handle(json_value, member.videoSessionParametersTemplate);}();
auto& json_value=json["videoSession"];
[&](){deserialize_handle(json_value, member.videoSession);}();
}

    void serialize_pUserData(object& json, VkVideoSessionParametersCreateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoSessionParametersCreateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoSessionParametersUpdateInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["updateSequenceCount"];
[&](){json_value=member.updateSequenceCount;}();
}
void deserialize_struct(object& json, VkVideoSessionParametersUpdateInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["updateSequenceCount"];
[&](){member.updateSequenceCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkVideoSessionParametersUpdateInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoSessionParametersUpdateInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoBeginCodingInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["videoSession"];
[&](){serialize_handle(json_value,member.videoSession);}();
auto& json_value=json["videoSessionParameters"];
[&](){serialize_handle(json_value,member.videoSessionParameters);}();
auto& json_value=json["referenceSlotCount"];
[&](){json_value=member.referenceSlotCount;}();
auto& json_value=json["pReferenceSlots"];
[&](){
            if (member.pReferenceSlots==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int qhYgHtG=0; qhYgHtG < member.referenceSlotCount; qhYgHtG++){
            [&](){
            auto& temp=json_value[qhYgHtG].emplace_object();
            return serialize_struct(temp, member.pReferenceSlots[qhYgHtG]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkVideoBeginCodingInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkVideoBeginCodingFlagsKHR temp_OlCouqV[&](){temp_OlCouqV=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoBeginCodingFlagsKHR)temp_OlCouqV;}();}();
auto& json_value=json["videoSession"];
[&](){deserialize_handle(json_value, member.videoSession);}();
auto& json_value=json["videoSessionParameters"];
[&](){deserialize_handle(json_value, member.videoSessionParameters);}();
auto& json_value=json["referenceSlotCount"];
[&](){member.referenceSlotCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pReferenceSlots"];
[&](){ VkVideoReferenceSlotInfoKHR* temp_vxksoOe[&](){
            if (!json_value.as_array().size()==0){
                temp_vxksoOe=NULL;
            return; }temp_vxksoOe=(VkVideoReferenceSlotInfoKHR*)malloc(member.referenceSlotCount*sizeof(VkVideoReferenceSlotInfoKHR));
        auto& arr=json_value.as_array();
        for(int fqLTYsR=0; fqLTYsR < member.referenceSlotCount; fqLTYsR++){
            [&](){
            auto& temp=json_value[fqLTYsR].as_object();
            deserialize_struct(temp,temp_vxksoOe[fqLTYsR]);
            }();
        }
        }();member.pReferenceSlots=temp_vxksoOe;}();
}

    void serialize_pUserData(object& json, VkVideoBeginCodingInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoBeginCodingInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoEndCodingInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkVideoEndCodingInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkVideoEndCodingFlagsKHR temp_WQDkMMf[&](){temp_WQDkMMf=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoEndCodingFlagsKHR)temp_WQDkMMf;}();}();
}

    void serialize_pUserData(object& json, VkVideoEndCodingInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoEndCodingInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkVideoCodingControlInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkVideoCodingControlInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkVideoCodingControlFlagsKHR temp_suEascw[&](){temp_suEascw=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkVideoCodingControlFlagsKHR)temp_suEascw;}();}();
}

    void serialize_pUserData(object& json, VkVideoCodingControlInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkVideoCodingControlInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceInheritedViewportScissorFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["inheritedViewportScissor2D"];
[&](){[&](){json_value=member.inheritedViewportScissor2D;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceInheritedViewportScissorFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["inheritedViewportScissor2D"];
[&](){[&](){member.inheritedViewportScissor2D=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceInheritedViewportScissorFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceInheritedViewportScissorFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferInheritanceViewportScissorInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["viewportScissor2D"];
[&](){[&](){json_value=member.viewportScissor2D;}();}();
auto& json_value=json["viewportDepthCount"];
[&](){json_value=member.viewportDepthCount;}();
auto& json_value=json["pViewportDepths"];
[&](){
            if (member.pViewportDepths==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KFySZWi=0; KFySZWi < 1; KFySZWi++){
            [&](){
            auto& temp=json_value[KFySZWi].emplace_object();
            return serialize_struct(temp, member.pViewportDepths[KFySZWi]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkCommandBufferInheritanceViewportScissorInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["viewportScissor2D"];
[&](){[&](){member.viewportScissor2D=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["viewportDepthCount"];
[&](){member.viewportDepthCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pViewportDepths"];
[&](){ VkViewport* temp_CRBZiiw[&](){
            if (!json_value.as_array().size()==0){
                temp_CRBZiiw=NULL;
            return; }temp_CRBZiiw=(VkViewport*)malloc(1*sizeof(VkViewport));
        auto& arr=json_value.as_array();
        for(int TlLmxhB=0; TlLmxhB < 1; TlLmxhB++){
            [&](){
            auto& temp=json_value[TlLmxhB].as_object();
            deserialize_struct(temp,temp_CRBZiiw[TlLmxhB]);
            }();
        }
        }();member.pViewportDepths=temp_CRBZiiw;}();
}

    void serialize_pUserData(object& json, VkCommandBufferInheritanceViewportScissorInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferInheritanceViewportScissorInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["ycbcr2plane444Formats"];
[&](){[&](){json_value=member.ycbcr2plane444Formats;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["ycbcr2plane444Formats"];
[&](){[&](){member.ycbcr2plane444Formats=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceProvokingVertexFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["provokingVertexLast"];
[&](){[&](){json_value=member.provokingVertexLast;}();}();
auto& json_value=json["transformFeedbackPreservesProvokingVertex"];
[&](){[&](){json_value=member.transformFeedbackPreservesProvokingVertex;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceProvokingVertexFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["provokingVertexLast"];
[&](){[&](){member.provokingVertexLast=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["transformFeedbackPreservesProvokingVertex"];
[&](){[&](){member.transformFeedbackPreservesProvokingVertex=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceProvokingVertexFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceProvokingVertexFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceProvokingVertexPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["provokingVertexModePerPipeline"];
[&](){[&](){json_value=member.provokingVertexModePerPipeline;}();}();
auto& json_value=json["transformFeedbackPreservesTriangleFanProvokingVertex"];
[&](){[&](){json_value=member.transformFeedbackPreservesTriangleFanProvokingVertex;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceProvokingVertexPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["provokingVertexModePerPipeline"];
[&](){[&](){member.provokingVertexModePerPipeline=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["transformFeedbackPreservesTriangleFanProvokingVertex"];
[&](){[&](){member.transformFeedbackPreservesTriangleFanProvokingVertex=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceProvokingVertexPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceProvokingVertexPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["provokingVertexMode"];
[&](){[&](){[&](){json_value=member.provokingVertexMode;}();}();}();
}
void deserialize_struct(object& json, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["provokingVertexMode"];
[&](){[&](){VkProvokingVertexModeEXT temp_OCOnaFx[&](){temp_OCOnaFx=static_cast<int>(value_to<int>(json_value));}();member.provokingVertexMode=(VkProvokingVertexModeEXT)temp_OCOnaFx;}();}();
}

    void serialize_pUserData(object& json, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRasterizationProvokingVertexStateCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCuModuleCreateInfoNVX& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dataSize"];
[&](){json_value=member.dataSize;}();
auto& json_value=json["pData"];
[&](){
            if (member.pData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int KUeyATI=0; KUeyATI < member.dataSize; KUeyATI++){
            [&](){json_value[KUeyATI]=(char*)(member.pData)[KUeyATI];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkCuModuleCreateInfoNVX& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["dataSize"];
[&](){member.dataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pData"];
[&](){ void* temp_FrwwHum[&](){
            if (!json_value.as_array().size()==0){
                temp_FrwwHum=NULL;
            return; }char* temp_WIyeSmx;[&](){
            if (!json_value.as_array().size()==0){
                temp_FrwwHum=NULL;
            return; }temp_FrwwHum=(char*)malloc(member.dataSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int OCmuZGI=0; OCmuZGI < member.dataSize; OCmuZGI++){
            [&](){temp_FrwwHum[OCmuZGI]=static_cast<char>(value_to<int>(json_value[OCmuZGI]));}();
        }
        }();temp_FrwwHum=temp_WIyeSmx;}();member.pData=temp_FrwwHum;}();
}

    void serialize_pUserData(object& json, VkCuModuleCreateInfoNVX& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCuModuleCreateInfoNVX& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCuFunctionCreateInfoNVX& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["module"];
[&](){serialize_handle(json_value,member.module);}();
auto& json_value=json["pName"];
[&](){
            if (member.pName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int opTkazg=0; opTkazg < strlen(member.pName)+1; opTkazg++){
            [&](){json_value[opTkazg]=member.pName[opTkazg];}();
        }
        }();
}
void deserialize_struct(object& json, VkCuFunctionCreateInfoNVX& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["module"];
[&](){deserialize_handle(json_value, member.module);}();
auto& json_value=json["pName"];
[&](){ char* temp_xDKNBiw[&](){
            if (!json_value.as_array().size()==0){
                temp_xDKNBiw=NULL;
            return; }temp_xDKNBiw=(char*)malloc(temp_xDKNBiw.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int zzMOHXu=0; zzMOHXu < temp_xDKNBiw.as_array().size();; zzMOHXu++){
            [&](){temp_xDKNBiw[zzMOHXu]=static_cast<char>(value_to<int>(json_value[zzMOHXu]));}();
        }
        }();member.pName=temp_xDKNBiw;}();
}

    void serialize_pUserData(object& json, VkCuFunctionCreateInfoNVX& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCuFunctionCreateInfoNVX& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCuLaunchInfoNVX& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["function"];
[&](){serialize_handle(json_value,member.function);}();
auto& json_value=json["gridDimX"];
[&](){json_value=member.gridDimX;}();
auto& json_value=json["gridDimY"];
[&](){json_value=member.gridDimY;}();
auto& json_value=json["gridDimZ"];
[&](){json_value=member.gridDimZ;}();
auto& json_value=json["blockDimX"];
[&](){json_value=member.blockDimX;}();
auto& json_value=json["blockDimY"];
[&](){json_value=member.blockDimY;}();
auto& json_value=json["blockDimZ"];
[&](){json_value=member.blockDimZ;}();
auto& json_value=json["sharedMemBytes"];
[&](){json_value=member.sharedMemBytes;}();
auto& json_value=json["paramCount"];
[&](){json_value=member.paramCount;}();
auto& json_value=json["pParams"];
[&](){
            if (member.pParams==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int bHZRMGd=0; bHZRMGd < member.paramCount; bHZRMGd++){
            [&](){
            if (member.pParams[bHZRMGd]==NULL){
                json_value[bHZRMGd]=array();
            return; }[&](){
            if ((char*)(member.pParams[bHZRMGd])==NULL){
                json_value[bHZRMGd]=array();
            return; }
        auto& arr=json_value[bHZRMGd].emplace_array();
        for(int IQiOBHH=0; IQiOBHH < strlen((char*)(member.pParams[bHZRMGd]))+1; IQiOBHH++){
            [&](){json_value[bHZRMGd][IQiOBHH]=(char*)(member.pParams[bHZRMGd])[IQiOBHH];}();
        }
        }();}();
        }
        }();
auto& json_value=json["extraCount"];
[&](){json_value=member.extraCount;}();
auto& json_value=json["pExtras"];
[&](){
            if (member.pExtras==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int qZYmIyj=0; qZYmIyj < member.extraCount; qZYmIyj++){
            [&](){
            if (member.pExtras[qZYmIyj]==NULL){
                json_value[qZYmIyj]=array();
            return; }[&](){
            if ((char*)(member.pExtras[qZYmIyj])==NULL){
                json_value[qZYmIyj]=array();
            return; }
        auto& arr=json_value[qZYmIyj].emplace_array();
        for(int SKyHdSW=0; SKyHdSW < strlen((char*)(member.pExtras[qZYmIyj]))+1; SKyHdSW++){
            [&](){json_value[qZYmIyj][SKyHdSW]=(char*)(member.pExtras[qZYmIyj])[SKyHdSW];}();
        }
        }();}();
        }
        }();
}
void deserialize_struct(object& json, VkCuLaunchInfoNVX& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["function"];
[&](){deserialize_handle(json_value, member.function);}();
auto& json_value=json["gridDimX"];
[&](){member.gridDimX=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["gridDimY"];
[&](){member.gridDimY=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["gridDimZ"];
[&](){member.gridDimZ=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["blockDimX"];
[&](){member.blockDimX=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["blockDimY"];
[&](){member.blockDimY=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["blockDimZ"];
[&](){member.blockDimZ=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["sharedMemBytes"];
[&](){member.sharedMemBytes=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["paramCount"];
[&](){member.paramCount=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pParams"];
[&](){ void*  * temp_haUuhoX[&](){
            if (!json_value.as_array().size()==0){
                temp_haUuhoX=NULL;
            return; }temp_haUuhoX=(void**)malloc(member.paramCount*sizeof(void*));
        auto& arr=json_value.as_array();
        for(int cDEiPBr=0; cDEiPBr < member.paramCount; cDEiPBr++){
            [&](){
            if (!json_value[cDEiPBr].as_array().size()==0){
                temp_haUuhoX[cDEiPBr]=NULL;
            return; }char* temp_bEkaKyU;[&](){
            if (!json_value[cDEiPBr].as_array().size()==0){
                temp_haUuhoX[cDEiPBr]=NULL;
            return; }temp_haUuhoX[cDEiPBr]=(char*)malloc(temp_haUuhoX[cDEiPBr].as_array().size();*sizeof(char));
        auto& arr=json_value[cDEiPBr].as_array();
        for(int sUduJhl=0; sUduJhl < temp_haUuhoX[cDEiPBr].as_array().size();; sUduJhl++){
            [&](){temp_haUuhoX[cDEiPBr][sUduJhl]=static_cast<char>(value_to<int>(json_value[cDEiPBr][sUduJhl]));}();
        }
        }();temp_haUuhoX[cDEiPBr]=temp_bEkaKyU;}();
        }
        }();member.pParams=temp_haUuhoX;}();
auto& json_value=json["extraCount"];
[&](){member.extraCount=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pExtras"];
[&](){ void*  * temp_KqgBAjC[&](){
            if (!json_value.as_array().size()==0){
                temp_KqgBAjC=NULL;
            return; }temp_KqgBAjC=(void**)malloc(member.extraCount*sizeof(void*));
        auto& arr=json_value.as_array();
        for(int NqvQMTa=0; NqvQMTa < member.extraCount; NqvQMTa++){
            [&](){
            if (!json_value[NqvQMTa].as_array().size()==0){
                temp_KqgBAjC[NqvQMTa]=NULL;
            return; }char* temp_wbNEhfe;[&](){
            if (!json_value[NqvQMTa].as_array().size()==0){
                temp_KqgBAjC[NqvQMTa]=NULL;
            return; }temp_KqgBAjC[NqvQMTa]=(char*)malloc(temp_KqgBAjC[NqvQMTa].as_array().size();*sizeof(char));
        auto& arr=json_value[NqvQMTa].as_array();
        for(int jwEPXXb=0; jwEPXXb < temp_KqgBAjC[NqvQMTa].as_array().size();; jwEPXXb++){
            [&](){temp_KqgBAjC[NqvQMTa][jwEPXXb]=static_cast<char>(value_to<int>(json_value[NqvQMTa][jwEPXXb]));}();
        }
        }();temp_KqgBAjC[NqvQMTa]=temp_wbNEhfe;}();
        }
        }();member.pExtras=temp_KqgBAjC;}();
}

    void serialize_pUserData(object& json, VkCuLaunchInfoNVX& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCuLaunchInfoNVX& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDescriptorBufferFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["descriptorBuffer"];
[&](){[&](){json_value=member.descriptorBuffer;}();}();
auto& json_value=json["descriptorBufferCaptureReplay"];
[&](){[&](){json_value=member.descriptorBufferCaptureReplay;}();}();
auto& json_value=json["descriptorBufferImageLayoutIgnored"];
[&](){[&](){json_value=member.descriptorBufferImageLayoutIgnored;}();}();
auto& json_value=json["descriptorBufferPushDescriptors"];
[&](){[&](){json_value=member.descriptorBufferPushDescriptors;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDescriptorBufferFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["descriptorBuffer"];
[&](){[&](){member.descriptorBuffer=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBufferCaptureReplay"];
[&](){[&](){member.descriptorBufferCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBufferImageLayoutIgnored"];
[&](){[&](){member.descriptorBufferImageLayoutIgnored=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBufferPushDescriptors"];
[&](){[&](){member.descriptorBufferPushDescriptors=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDescriptorBufferFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDescriptorBufferFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDescriptorBufferPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["combinedImageSamplerDescriptorSingleArray"];
[&](){[&](){json_value=member.combinedImageSamplerDescriptorSingleArray;}();}();
auto& json_value=json["bufferlessPushDescriptors"];
[&](){[&](){json_value=member.bufferlessPushDescriptors;}();}();
auto& json_value=json["allowSamplerImageViewPostSubmitCreation"];
[&](){[&](){json_value=member.allowSamplerImageViewPostSubmitCreation;}();}();
auto& json_value=json["descriptorBufferOffsetAlignment"];
[&](){[&](){json_value=member.descriptorBufferOffsetAlignment;}();}();
auto& json_value=json["maxDescriptorBufferBindings"];
[&](){json_value=member.maxDescriptorBufferBindings;}();
auto& json_value=json["maxResourceDescriptorBufferBindings"];
[&](){json_value=member.maxResourceDescriptorBufferBindings;}();
auto& json_value=json["maxSamplerDescriptorBufferBindings"];
[&](){json_value=member.maxSamplerDescriptorBufferBindings;}();
auto& json_value=json["maxEmbeddedImmutableSamplerBindings"];
[&](){json_value=member.maxEmbeddedImmutableSamplerBindings;}();
auto& json_value=json["maxEmbeddedImmutableSamplers"];
[&](){json_value=member.maxEmbeddedImmutableSamplers;}();
auto& json_value=json["bufferCaptureReplayDescriptorDataSize"];
[&](){json_value=member.bufferCaptureReplayDescriptorDataSize;}();
auto& json_value=json["imageCaptureReplayDescriptorDataSize"];
[&](){json_value=member.imageCaptureReplayDescriptorDataSize;}();
auto& json_value=json["imageViewCaptureReplayDescriptorDataSize"];
[&](){json_value=member.imageViewCaptureReplayDescriptorDataSize;}();
auto& json_value=json["samplerCaptureReplayDescriptorDataSize"];
[&](){json_value=member.samplerCaptureReplayDescriptorDataSize;}();
auto& json_value=json["accelerationStructureCaptureReplayDescriptorDataSize"];
[&](){json_value=member.accelerationStructureCaptureReplayDescriptorDataSize;}();
auto& json_value=json["samplerDescriptorSize"];
[&](){json_value=member.samplerDescriptorSize;}();
auto& json_value=json["combinedImageSamplerDescriptorSize"];
[&](){json_value=member.combinedImageSamplerDescriptorSize;}();
auto& json_value=json["sampledImageDescriptorSize"];
[&](){json_value=member.sampledImageDescriptorSize;}();
auto& json_value=json["storageImageDescriptorSize"];
[&](){json_value=member.storageImageDescriptorSize;}();
auto& json_value=json["uniformTexelBufferDescriptorSize"];
[&](){json_value=member.uniformTexelBufferDescriptorSize;}();
auto& json_value=json["robustUniformTexelBufferDescriptorSize"];
[&](){json_value=member.robustUniformTexelBufferDescriptorSize;}();
auto& json_value=json["storageTexelBufferDescriptorSize"];
[&](){json_value=member.storageTexelBufferDescriptorSize;}();
auto& json_value=json["robustStorageTexelBufferDescriptorSize"];
[&](){json_value=member.robustStorageTexelBufferDescriptorSize;}();
auto& json_value=json["uniformBufferDescriptorSize"];
[&](){json_value=member.uniformBufferDescriptorSize;}();
auto& json_value=json["robustUniformBufferDescriptorSize"];
[&](){json_value=member.robustUniformBufferDescriptorSize;}();
auto& json_value=json["storageBufferDescriptorSize"];
[&](){json_value=member.storageBufferDescriptorSize;}();
auto& json_value=json["robustStorageBufferDescriptorSize"];
[&](){json_value=member.robustStorageBufferDescriptorSize;}();
auto& json_value=json["inputAttachmentDescriptorSize"];
[&](){json_value=member.inputAttachmentDescriptorSize;}();
auto& json_value=json["accelerationStructureDescriptorSize"];
[&](){json_value=member.accelerationStructureDescriptorSize;}();
auto& json_value=json["maxSamplerDescriptorBufferRange"];
[&](){[&](){json_value=member.maxSamplerDescriptorBufferRange;}();}();
auto& json_value=json["maxResourceDescriptorBufferRange"];
[&](){[&](){json_value=member.maxResourceDescriptorBufferRange;}();}();
auto& json_value=json["samplerDescriptorBufferAddressSpaceSize"];
[&](){[&](){json_value=member.samplerDescriptorBufferAddressSpaceSize;}();}();
auto& json_value=json["resourceDescriptorBufferAddressSpaceSize"];
[&](){[&](){json_value=member.resourceDescriptorBufferAddressSpaceSize;}();}();
auto& json_value=json["descriptorBufferAddressSpaceSize"];
[&](){[&](){json_value=member.descriptorBufferAddressSpaceSize;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDescriptorBufferPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["combinedImageSamplerDescriptorSingleArray"];
[&](){[&](){member.combinedImageSamplerDescriptorSingleArray=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bufferlessPushDescriptors"];
[&](){[&](){member.bufferlessPushDescriptors=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["allowSamplerImageViewPostSubmitCreation"];
[&](){[&](){member.allowSamplerImageViewPostSubmitCreation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBufferOffsetAlignment"];
[&](){[&](){member.descriptorBufferOffsetAlignment=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxDescriptorBufferBindings"];
[&](){member.maxDescriptorBufferBindings=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxResourceDescriptorBufferBindings"];
[&](){member.maxResourceDescriptorBufferBindings=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxSamplerDescriptorBufferBindings"];
[&](){member.maxSamplerDescriptorBufferBindings=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxEmbeddedImmutableSamplerBindings"];
[&](){member.maxEmbeddedImmutableSamplerBindings=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxEmbeddedImmutableSamplers"];
[&](){member.maxEmbeddedImmutableSamplers=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["bufferCaptureReplayDescriptorDataSize"];
[&](){member.bufferCaptureReplayDescriptorDataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["imageCaptureReplayDescriptorDataSize"];
[&](){member.imageCaptureReplayDescriptorDataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["imageViewCaptureReplayDescriptorDataSize"];
[&](){member.imageViewCaptureReplayDescriptorDataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["samplerCaptureReplayDescriptorDataSize"];
[&](){member.samplerCaptureReplayDescriptorDataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["accelerationStructureCaptureReplayDescriptorDataSize"];
[&](){member.accelerationStructureCaptureReplayDescriptorDataSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["samplerDescriptorSize"];
[&](){member.samplerDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["combinedImageSamplerDescriptorSize"];
[&](){member.combinedImageSamplerDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["sampledImageDescriptorSize"];
[&](){member.sampledImageDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["storageImageDescriptorSize"];
[&](){member.storageImageDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["uniformTexelBufferDescriptorSize"];
[&](){member.uniformTexelBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["robustUniformTexelBufferDescriptorSize"];
[&](){member.robustUniformTexelBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["storageTexelBufferDescriptorSize"];
[&](){member.storageTexelBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["robustStorageTexelBufferDescriptorSize"];
[&](){member.robustStorageTexelBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["uniformBufferDescriptorSize"];
[&](){member.uniformBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["robustUniformBufferDescriptorSize"];
[&](){member.robustUniformBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["storageBufferDescriptorSize"];
[&](){member.storageBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["robustStorageBufferDescriptorSize"];
[&](){member.robustStorageBufferDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["inputAttachmentDescriptorSize"];
[&](){member.inputAttachmentDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["accelerationStructureDescriptorSize"];
[&](){member.accelerationStructureDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["maxSamplerDescriptorBufferRange"];
[&](){[&](){member.maxSamplerDescriptorBufferRange=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["maxResourceDescriptorBufferRange"];
[&](){[&](){member.maxResourceDescriptorBufferRange=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["samplerDescriptorBufferAddressSpaceSize"];
[&](){[&](){member.samplerDescriptorBufferAddressSpaceSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["resourceDescriptorBufferAddressSpaceSize"];
[&](){[&](){member.resourceDescriptorBufferAddressSpaceSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["descriptorBufferAddressSpaceSize"];
[&](){[&](){member.descriptorBufferAddressSpaceSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDescriptorBufferPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDescriptorBufferPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["combinedImageSamplerDensityMapDescriptorSize"];
[&](){json_value=member.combinedImageSamplerDensityMapDescriptorSize;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["combinedImageSamplerDensityMapDescriptorSize"];
[&](){member.combinedImageSamplerDensityMapDescriptorSize=static_cast<size_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorAddressInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["address"];
[&](){[&](){json_value=member.address;}();}();
auto& json_value=json["range"];
[&](){[&](){json_value=member.range;}();}();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
}
void deserialize_struct(object& json, VkDescriptorAddressInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["address"];
[&](){[&](){member.address=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["range"];
[&](){[&](){member.range=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
}

    void serialize_pUserData(object& json, VkDescriptorAddressInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorAddressInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorBufferBindingInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["address"];
[&](){[&](){json_value=member.address;}();}();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
}
void deserialize_struct(object& json, VkDescriptorBufferBindingInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["address"];
[&](){[&](){member.address=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["usage"];
[&](){[&](){VkBufferUsageFlags temp_AJXZWOt[&](){temp_AJXZWOt=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkBufferUsageFlags)temp_AJXZWOt;}();}();
}

    void serialize_pUserData(object& json, VkDescriptorBufferBindingInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorBufferBindingInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorBufferBindingPushDescriptorBufferHandleEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
}
void deserialize_struct(object& json, VkDescriptorBufferBindingPushDescriptorBufferHandleEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
}

    void serialize_pUserData(object& json, VkDescriptorBufferBindingPushDescriptorBufferHandleEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorBufferBindingPushDescriptorBufferHandleEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorDataEXT& member){
        
    
auto& json_value=json["pSampler"];
[&](){
            if (member.pSampler==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RcemeEi=0; RcemeEi < 1; RcemeEi++){
            [&](){serialize_handle(json_value[RcemeEi],member.pSampler[RcemeEi]);}();
        }
        }();
auto& json_value=json["pCombinedImageSampler"];
[&](){
            if (member.pCombinedImageSampler==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int bIddDFU=0; bIddDFU < 1; bIddDFU++){
            [&](){
            auto& temp=json_value[bIddDFU].emplace_object();
            return serialize_struct(temp, member.pCombinedImageSampler[bIddDFU]);
            }();
        }
        }();
auto& json_value=json["pInputAttachmentImage"];
[&](){
            if (member.pInputAttachmentImage==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int XGpUdoM=0; XGpUdoM < 1; XGpUdoM++){
            [&](){
            auto& temp=json_value[XGpUdoM].emplace_object();
            return serialize_struct(temp, member.pInputAttachmentImage[XGpUdoM]);
            }();
        }
        }();
auto& json_value=json["pSampledImage"];
[&](){
            if (member.pSampledImage==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int GYVkRpE=0; GYVkRpE < 1; GYVkRpE++){
            [&](){
            auto& temp=json_value[GYVkRpE].emplace_object();
            return serialize_struct(temp, member.pSampledImage[GYVkRpE]);
            }();
        }
        }();
auto& json_value=json["pStorageImage"];
[&](){
            if (member.pStorageImage==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int tQAXyuk=0; tQAXyuk < 1; tQAXyuk++){
            [&](){
            auto& temp=json_value[tQAXyuk].emplace_object();
            return serialize_struct(temp, member.pStorageImage[tQAXyuk]);
            }();
        }
        }();
auto& json_value=json["pUniformTexelBuffer"];
[&](){
            if (member.pUniformTexelBuffer==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int zdWGhKu=0; zdWGhKu < 1; zdWGhKu++){
            [&](){
            auto& temp=json_value[zdWGhKu].emplace_object();
            return serialize_struct(temp, member.pUniformTexelBuffer[zdWGhKu]);
            }();
        }
        }();
auto& json_value=json["pStorageTexelBuffer"];
[&](){
            if (member.pStorageTexelBuffer==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int djGqQAT=0; djGqQAT < 1; djGqQAT++){
            [&](){
            auto& temp=json_value[djGqQAT].emplace_object();
            return serialize_struct(temp, member.pStorageTexelBuffer[djGqQAT]);
            }();
        }
        }();
auto& json_value=json["pUniformBuffer"];
[&](){
            if (member.pUniformBuffer==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int BBFrOWx=0; BBFrOWx < 1; BBFrOWx++){
            [&](){
            auto& temp=json_value[BBFrOWx].emplace_object();
            return serialize_struct(temp, member.pUniformBuffer[BBFrOWx]);
            }();
        }
        }();
auto& json_value=json["pStorageBuffer"];
[&](){
            if (member.pStorageBuffer==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int byTbsmB=0; byTbsmB < 1; byTbsmB++){
            [&](){
            auto& temp=json_value[byTbsmB].emplace_object();
            return serialize_struct(temp, member.pStorageBuffer[byTbsmB]);
            }();
        }
        }();
auto& json_value=json["accelerationStructure"];
[&](){[&](){json_value=member.accelerationStructure;}();}();
}
void deserialize_struct(object& json, VkDescriptorDataEXT& member){
auto& json_value=json["pSampler"];
[&](){ VkSampler* temp_mLUUZDO[&](){
            if (!json_value.as_array().size()==0){
                temp_mLUUZDO=NULL;
            return; }temp_mLUUZDO=(VkSampler*)malloc(1*sizeof(VkSampler));
        auto& arr=json_value.as_array();
        for(int JbHkUhn=0; JbHkUhn < 1; JbHkUhn++){
            [&](){deserialize_handle(json_value[JbHkUhn], temp_mLUUZDO[JbHkUhn]);}();
        }
        }();member.pSampler=temp_mLUUZDO;}();
auto& json_value=json["pCombinedImageSampler"];
[&](){ VkDescriptorImageInfo* temp_mkaSzbY[&](){
            if (!json_value.as_array().size()==0){
                temp_mkaSzbY=NULL;
            return; }temp_mkaSzbY=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto& arr=json_value.as_array();
        for(int ksnKPgj=0; ksnKPgj < 1; ksnKPgj++){
            [&](){
            auto& temp=json_value[ksnKPgj].as_object();
            deserialize_struct(temp,temp_mkaSzbY[ksnKPgj]);
            }();
        }
        }();member.pCombinedImageSampler=temp_mkaSzbY;}();
auto& json_value=json["pInputAttachmentImage"];
[&](){ VkDescriptorImageInfo* temp_SsiWQTq[&](){
            if (!json_value.as_array().size()==0){
                temp_SsiWQTq=NULL;
            return; }temp_SsiWQTq=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto& arr=json_value.as_array();
        for(int jCdsXYL=0; jCdsXYL < 1; jCdsXYL++){
            [&](){
            auto& temp=json_value[jCdsXYL].as_object();
            deserialize_struct(temp,temp_SsiWQTq[jCdsXYL]);
            }();
        }
        }();member.pInputAttachmentImage=temp_SsiWQTq;}();
auto& json_value=json["pSampledImage"];
[&](){ VkDescriptorImageInfo* temp_cXSmOFR[&](){
            if (!json_value.as_array().size()==0){
                temp_cXSmOFR=NULL;
            return; }temp_cXSmOFR=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto& arr=json_value.as_array();
        for(int peiDxWp=0; peiDxWp < 1; peiDxWp++){
            [&](){
            auto& temp=json_value[peiDxWp].as_object();
            deserialize_struct(temp,temp_cXSmOFR[peiDxWp]);
            }();
        }
        }();member.pSampledImage=temp_cXSmOFR;}();
auto& json_value=json["pStorageImage"];
[&](){ VkDescriptorImageInfo* temp_nzyLCXh[&](){
            if (!json_value.as_array().size()==0){
                temp_nzyLCXh=NULL;
            return; }temp_nzyLCXh=(VkDescriptorImageInfo*)malloc(1*sizeof(VkDescriptorImageInfo));
        auto& arr=json_value.as_array();
        for(int DwQgfdS=0; DwQgfdS < 1; DwQgfdS++){
            [&](){
            auto& temp=json_value[DwQgfdS].as_object();
            deserialize_struct(temp,temp_nzyLCXh[DwQgfdS]);
            }();
        }
        }();member.pStorageImage=temp_nzyLCXh;}();
auto& json_value=json["pUniformTexelBuffer"];
[&](){ VkDescriptorAddressInfoEXT* temp_kcYHBjY[&](){
            if (!json_value.as_array().size()==0){
                temp_kcYHBjY=NULL;
            return; }temp_kcYHBjY=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto& arr=json_value.as_array();
        for(int xaarJir=0; xaarJir < 1; xaarJir++){
            [&](){
            auto& temp=json_value[xaarJir].as_object();
            deserialize_struct(temp,temp_kcYHBjY[xaarJir]);
            }();
        }
        }();member.pUniformTexelBuffer=temp_kcYHBjY;}();
auto& json_value=json["pStorageTexelBuffer"];
[&](){ VkDescriptorAddressInfoEXT* temp_vCLJhGF[&](){
            if (!json_value.as_array().size()==0){
                temp_vCLJhGF=NULL;
            return; }temp_vCLJhGF=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto& arr=json_value.as_array();
        for(int xqfIrOh=0; xqfIrOh < 1; xqfIrOh++){
            [&](){
            auto& temp=json_value[xqfIrOh].as_object();
            deserialize_struct(temp,temp_vCLJhGF[xqfIrOh]);
            }();
        }
        }();member.pStorageTexelBuffer=temp_vCLJhGF;}();
auto& json_value=json["pUniformBuffer"];
[&](){ VkDescriptorAddressInfoEXT* temp_WRvjAst[&](){
            if (!json_value.as_array().size()==0){
                temp_WRvjAst=NULL;
            return; }temp_WRvjAst=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto& arr=json_value.as_array();
        for(int khYkBAw=0; khYkBAw < 1; khYkBAw++){
            [&](){
            auto& temp=json_value[khYkBAw].as_object();
            deserialize_struct(temp,temp_WRvjAst[khYkBAw]);
            }();
        }
        }();member.pUniformBuffer=temp_WRvjAst;}();
auto& json_value=json["pStorageBuffer"];
[&](){ VkDescriptorAddressInfoEXT* temp_GGgEJaD[&](){
            if (!json_value.as_array().size()==0){
                temp_GGgEJaD=NULL;
            return; }temp_GGgEJaD=(VkDescriptorAddressInfoEXT*)malloc(1*sizeof(VkDescriptorAddressInfoEXT));
        auto& arr=json_value.as_array();
        for(int UWDCkLS=0; UWDCkLS < 1; UWDCkLS++){
            [&](){
            auto& temp=json_value[UWDCkLS].as_object();
            deserialize_struct(temp,temp_GGgEJaD[UWDCkLS]);
            }();
        }
        }();member.pStorageBuffer=temp_GGgEJaD;}();
auto& json_value=json["accelerationStructure"];
[&](){[&](){member.accelerationStructure=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDescriptorDataEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorDataEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorGetInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.data);
            }();
}
void deserialize_struct(object& json, VkDescriptorGetInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkDescriptorType temp_cGjzkQd[&](){temp_cGjzkQd=static_cast<int>(value_to<int>(json_value));}();member.type=(VkDescriptorType)temp_cGjzkQd;}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.data);
            }();
}

    void serialize_pUserData(object& json, VkDescriptorGetInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorGetInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBufferCaptureDescriptorDataInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
}
void deserialize_struct(object& json, VkBufferCaptureDescriptorDataInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
}

    void serialize_pUserData(object& json, VkBufferCaptureDescriptorDataInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBufferCaptureDescriptorDataInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageCaptureDescriptorDataInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["image"];
[&](){serialize_handle(json_value,member.image);}();
}
void deserialize_struct(object& json, VkImageCaptureDescriptorDataInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["image"];
[&](){deserialize_handle(json_value, member.image);}();
}

    void serialize_pUserData(object& json, VkImageCaptureDescriptorDataInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageCaptureDescriptorDataInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewCaptureDescriptorDataInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageView"];
[&](){serialize_handle(json_value,member.imageView);}();
}
void deserialize_struct(object& json, VkImageViewCaptureDescriptorDataInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["imageView"];
[&](){deserialize_handle(json_value, member.imageView);}();
}

    void serialize_pUserData(object& json, VkImageViewCaptureDescriptorDataInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewCaptureDescriptorDataInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerCaptureDescriptorDataInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["sampler"];
[&](){serialize_handle(json_value,member.sampler);}();
}
void deserialize_struct(object& json, VkSamplerCaptureDescriptorDataInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["sampler"];
[&](){deserialize_handle(json_value, member.sampler);}();
}

    void serialize_pUserData(object& json, VkSamplerCaptureDescriptorDataInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerCaptureDescriptorDataInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureCaptureDescriptorDataInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["accelerationStructure"];
[&](){serialize_handle(json_value,member.accelerationStructure);}();
auto& json_value=json["accelerationStructureNV"];
[&](){serialize_handle(json_value,member.accelerationStructureNV);}();
}
void deserialize_struct(object& json, VkAccelerationStructureCaptureDescriptorDataInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["accelerationStructure"];
[&](){deserialize_handle(json_value, member.accelerationStructure);}();
auto& json_value=json["accelerationStructureNV"];
[&](){deserialize_handle(json_value, member.accelerationStructureNV);}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureCaptureDescriptorDataInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureCaptureDescriptorDataInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOpaqueCaptureDescriptorDataCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["opaqueCaptureDescriptorData"];
[&](){
            if (member.opaqueCaptureDescriptorData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.opaqueCaptureDescriptorData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int DBqaZyV=0; DBqaZyV < strlen((char*)(member.opaqueCaptureDescriptorData))+1; DBqaZyV++){
            [&](){json_value[DBqaZyV]=(char*)(member.opaqueCaptureDescriptorData)[DBqaZyV];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkOpaqueCaptureDescriptorDataCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["opaqueCaptureDescriptorData"];
[&](){ void* temp_aKlUxQv[&](){
            if (!json_value.as_array().size()==0){
                temp_aKlUxQv=NULL;
            return; }char* temp_OEGfyXM;[&](){
            if (!json_value.as_array().size()==0){
                temp_aKlUxQv=NULL;
            return; }temp_aKlUxQv=(char*)malloc(temp_aKlUxQv.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int GrXpdLW=0; GrXpdLW < temp_aKlUxQv.as_array().size();; GrXpdLW++){
            [&](){temp_aKlUxQv[GrXpdLW]=static_cast<char>(value_to<int>(json_value[GrXpdLW]));}();
        }
        }();temp_aKlUxQv=temp_OEGfyXM;}();member.opaqueCaptureDescriptorData=temp_aKlUxQv;}();
}

    void serialize_pUserData(object& json, VkOpaqueCaptureDescriptorDataCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOpaqueCaptureDescriptorDataCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderIntegerDotProductFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderIntegerDotProduct"];
[&](){[&](){json_value=member.shaderIntegerDotProduct;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderIntegerDotProductFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderIntegerDotProduct"];
[&](){[&](){member.shaderIntegerDotProduct=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderIntegerDotProductFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderIntegerDotProductFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderIntegerDotProductProperties& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["integerDotProduct8BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct8BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct8BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct8BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct8BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct8BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct4x8BitPackedUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct4x8BitPackedUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct4x8BitPackedSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct4x8BitPackedSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct4x8BitPackedMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct16BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct16BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct16BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct16BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct16BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct16BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct32BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct32BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct32BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct32BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct32BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct32BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProduct64BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct64BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProduct64BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProduct64BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProduct64BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProduct64BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating8BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating16BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating32BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitSignedAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating64BitSignedAccelerated;}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"];
[&](){[&](){json_value=member.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderIntegerDotProductProperties& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["integerDotProduct8BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct8BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct8BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct8BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct8BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct8BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct4x8BitPackedUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct4x8BitPackedUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct4x8BitPackedSignedAccelerated"];
[&](){[&](){member.integerDotProduct4x8BitPackedSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct4x8BitPackedMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct16BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct16BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct16BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct16BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct16BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct16BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct32BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct32BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct32BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct32BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct32BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct32BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct64BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProduct64BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct64BitSignedAccelerated"];
[&](){[&](){member.integerDotProduct64BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProduct64BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProduct64BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating8BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating16BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating32BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitSignedAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating64BitSignedAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"];
[&](){[&](){member.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderIntegerDotProductProperties& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderIntegerDotProductProperties& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDrmPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["hasPrimary"];
[&](){[&](){json_value=member.hasPrimary;}();}();
auto& json_value=json["hasRender"];
[&](){[&](){json_value=member.hasRender;}();}();
auto& json_value=json["primaryMajor"];
[&](){json_value=member.primaryMajor;}();
auto& json_value=json["primaryMinor"];
[&](){json_value=member.primaryMinor;}();
auto& json_value=json["renderMajor"];
[&](){json_value=member.renderMajor;}();
auto& json_value=json["renderMinor"];
[&](){json_value=member.renderMinor;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDrmPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["hasPrimary"];
[&](){[&](){member.hasPrimary=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["hasRender"];
[&](){[&](){member.hasRender=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["primaryMajor"];
[&](){member.primaryMajor=static_cast<int64_t>(value_to<int>(json_value));}();
auto& json_value=json["primaryMinor"];
[&](){member.primaryMinor=static_cast<int64_t>(value_to<int>(json_value));}();
auto& json_value=json["renderMajor"];
[&](){member.renderMajor=static_cast<int64_t>(value_to<int>(json_value));}();
auto& json_value=json["renderMinor"];
[&](){member.renderMinor=static_cast<int64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDrmPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDrmPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["fragmentShaderBarycentric"];
[&](){[&](){json_value=member.fragmentShaderBarycentric;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["fragmentShaderBarycentric"];
[&](){[&](){member.fragmentShaderBarycentric=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["triStripVertexOrderIndependentOfProvokingVertex"];
[&](){[&](){json_value=member.triStripVertexOrderIndependentOfProvokingVertex;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["triStripVertexOrderIndependentOfProvokingVertex"];
[&](){[&](){member.triStripVertexOrderIndependentOfProvokingVertex=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rayTracingMotionBlur"];
[&](){[&](){json_value=member.rayTracingMotionBlur;}();}();
auto& json_value=json["rayTracingMotionBlurPipelineTraceRaysIndirect"];
[&](){[&](){json_value=member.rayTracingMotionBlurPipelineTraceRaysIndirect;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rayTracingMotionBlur"];
[&](){[&](){member.rayTracingMotionBlur=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rayTracingMotionBlurPipelineTraceRaysIndirect"];
[&](){[&](){member.rayTracingMotionBlurPipelineTraceRaysIndirect=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingMotionBlurFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureGeometryMotionTrianglesDataNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["vertexData"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.vertexData);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureGeometryMotionTrianglesDataNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["vertexData"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.vertexData);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureGeometryMotionTrianglesDataNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureGeometryMotionTrianglesDataNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureMotionInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxInstances"];
[&](){json_value=member.maxInstances;}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkAccelerationStructureMotionInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["maxInstances"];
[&](){member.maxInstances=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["flags"];
[&](){[&](){VkAccelerationStructureMotionInfoFlagsNV temp_wphilXG[&](){temp_wphilXG=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkAccelerationStructureMotionInfoFlagsNV)temp_wphilXG;}();}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureMotionInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureMotionInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSRTDataNV& member){
        
    
auto& json_value=json["sx"];
[&](){json_value=member.sx;}();
auto& json_value=json["a"];
[&](){json_value=member.a;}();
auto& json_value=json["b"];
[&](){json_value=member.b;}();
auto& json_value=json["pvx"];
[&](){json_value=member.pvx;}();
auto& json_value=json["sy"];
[&](){json_value=member.sy;}();
auto& json_value=json["c"];
[&](){json_value=member.c;}();
auto& json_value=json["pvy"];
[&](){json_value=member.pvy;}();
auto& json_value=json["sz"];
[&](){json_value=member.sz;}();
auto& json_value=json["pvz"];
[&](){json_value=member.pvz;}();
auto& json_value=json["qx"];
[&](){json_value=member.qx;}();
auto& json_value=json["qy"];
[&](){json_value=member.qy;}();
auto& json_value=json["qz"];
[&](){json_value=member.qz;}();
auto& json_value=json["qw"];
[&](){json_value=member.qw;}();
auto& json_value=json["tx"];
[&](){json_value=member.tx;}();
auto& json_value=json["ty"];
[&](){json_value=member.ty;}();
auto& json_value=json["tz"];
[&](){json_value=member.tz;}();
}
void deserialize_struct(object& json, VkSRTDataNV& member){
auto& json_value=json["sx"];
[&](){member.sx=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["a"];
[&](){member.a=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["b"];
[&](){member.b=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["pvx"];
[&](){member.pvx=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["sy"];
[&](){member.sy=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["c"];
[&](){member.c=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["pvy"];
[&](){member.pvy=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["sz"];
[&](){member.sz=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["pvz"];
[&](){member.pvz=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["qx"];
[&](){member.qx=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["qy"];
[&](){member.qy=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["qz"];
[&](){member.qz=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["qw"];
[&](){member.qw=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["tx"];
[&](){member.tx=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["ty"];
[&](){member.ty=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["tz"];
[&](){member.tz=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkSRTDataNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSRTDataNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureSRTMotionInstanceNV& member){
        
    
auto& json_value=json["transformT0"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.transformT0);
            }();
auto& json_value=json["transformT1"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.transformT1);
            }();
auto& json_value=json["instanceCustomIndex"];
[&](){json_value=member.instanceCustomIndex;}();
auto& json_value=json["mask"];
[&](){json_value=member.mask;}();
auto& json_value=json["instanceShaderBindingTableRecordOffset"];
[&](){json_value=member.instanceShaderBindingTableRecordOffset;}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["accelerationStructureReference"];
[&](){json_value=member.accelerationStructureReference;}();
}
void deserialize_struct(object& json, VkAccelerationStructureSRTMotionInstanceNV& member){
auto& json_value=json["transformT0"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.transformT0);
            }();
auto& json_value=json["transformT1"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.transformT1);
            }();
auto& json_value=json["instanceCustomIndex"];
[&](){member.instanceCustomIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["mask"];
[&](){member.mask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["instanceShaderBindingTableRecordOffset"];
[&](){member.instanceShaderBindingTableRecordOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["flags"];
[&](){[&](){VkGeometryInstanceFlagsKHR temp_qKxAASg:8[&](){temp_qKxAASg=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkGeometryInstanceFlagsKHR)temp_qKxAASg;}();}();
auto& json_value=json["accelerationStructureReference"];
[&](){member.accelerationStructureReference=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureSRTMotionInstanceNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureSRTMotionInstanceNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureMatrixMotionInstanceNV& member){
        
    
auto& json_value=json["transformT0"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.transformT0);
            }();
auto& json_value=json["transformT1"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.transformT1);
            }();
auto& json_value=json["instanceCustomIndex"];
[&](){json_value=member.instanceCustomIndex;}();
auto& json_value=json["mask"];
[&](){json_value=member.mask;}();
auto& json_value=json["instanceShaderBindingTableRecordOffset"];
[&](){json_value=member.instanceShaderBindingTableRecordOffset;}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["accelerationStructureReference"];
[&](){json_value=member.accelerationStructureReference;}();
}
void deserialize_struct(object& json, VkAccelerationStructureMatrixMotionInstanceNV& member){
auto& json_value=json["transformT0"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.transformT0);
            }();
auto& json_value=json["transformT1"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.transformT1);
            }();
auto& json_value=json["instanceCustomIndex"];
[&](){member.instanceCustomIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["mask"];
[&](){member.mask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["instanceShaderBindingTableRecordOffset"];
[&](){member.instanceShaderBindingTableRecordOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["flags"];
[&](){[&](){VkGeometryInstanceFlagsKHR temp_qKxAASg:8[&](){temp_qKxAASg=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkGeometryInstanceFlagsKHR)temp_qKxAASg;}();}();
auto& json_value=json["accelerationStructureReference"];
[&](){member.accelerationStructureReference=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureMatrixMotionInstanceNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureMatrixMotionInstanceNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureMotionInstanceDataNV& member){
        
    
auto& json_value=json["staticInstance"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.staticInstance);
            }();
auto& json_value=json["matrixMotionInstance"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.matrixMotionInstance);
            }();
auto& json_value=json["srtMotionInstance"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.srtMotionInstance);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureMotionInstanceDataNV& member){
auto& json_value=json["staticInstance"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.staticInstance);
            }();
auto& json_value=json["matrixMotionInstance"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.matrixMotionInstance);
            }();
auto& json_value=json["srtMotionInstance"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.srtMotionInstance);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureMotionInstanceDataNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureMotionInstanceDataNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureMotionInstanceNV& member){
        
    
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.data);
            }();
}
void deserialize_struct(object& json, VkAccelerationStructureMotionInstanceNV& member){
auto& json_value=json["type"];
[&](){[&](){VkAccelerationStructureMotionInstanceTypeNV temp_sOgDjwG[&](){temp_sOgDjwG=static_cast<int>(value_to<int>(json_value));}();member.type=(VkAccelerationStructureMotionInstanceTypeNV)temp_sOgDjwG;}();}();
auto& json_value=json["flags"];
[&](){[&](){VkAccelerationStructureMotionInstanceFlagsNV temp_FFuFgsb[&](){temp_FFuFgsb=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkAccelerationStructureMotionInstanceFlagsNV)temp_FFuFgsb;}();}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.data);
            }();
}

    void serialize_pUserData(object& json, VkAccelerationStructureMotionInstanceNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureMotionInstanceNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryGetRemoteAddressInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["handleType"];
[&](){[&](){[&](){json_value=member.handleType;}();}();}();
}
void deserialize_struct(object& json, VkMemoryGetRemoteAddressInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["handleType"];
[&](){[&](){VkExternalMemoryHandleTypeFlagBits temp_lYNzwhd[&](){temp_lYNzwhd=static_cast<int>(value_to<int>(json_value));}();member.handleType=(VkExternalMemoryHandleTypeFlagBits)temp_lYNzwhd;}();}();
}

    void serialize_pUserData(object& json, VkMemoryGetRemoteAddressInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryGetRemoteAddressInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["formatRgba10x6WithoutYCbCrSampler"];
[&](){[&](){json_value=member.formatRgba10x6WithoutYCbCrSampler;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["formatRgba10x6WithoutYCbCrSampler"];
[&](){[&](){member.formatRgba10x6WithoutYCbCrSampler=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFormatProperties3& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["linearTilingFeatures"];
[&](){[&](){[&](){json_value=member.linearTilingFeatures;}();}();}();
auto& json_value=json["optimalTilingFeatures"];
[&](){[&](){[&](){json_value=member.optimalTilingFeatures;}();}();}();
auto& json_value=json["bufferFeatures"];
[&](){[&](){[&](){json_value=member.bufferFeatures;}();}();}();
}
void deserialize_struct(object& json, VkFormatProperties3& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["linearTilingFeatures"];
[&](){[&](){VkFormatFeatureFlags2 temp_zoDyTOv[&](){temp_zoDyTOv=static_cast<int>(value_to<int>(json_value));}();member.linearTilingFeatures=(VkFormatFeatureFlags2)temp_zoDyTOv;}();}();
auto& json_value=json["optimalTilingFeatures"];
[&](){[&](){VkFormatFeatureFlags2 temp_EhmfWps[&](){temp_EhmfWps=static_cast<int>(value_to<int>(json_value));}();member.optimalTilingFeatures=(VkFormatFeatureFlags2)temp_EhmfWps;}();}();
auto& json_value=json["bufferFeatures"];
[&](){[&](){VkFormatFeatureFlags2 temp_ybyOAAP[&](){temp_ybyOAAP=static_cast<int>(value_to<int>(json_value));}();member.bufferFeatures=(VkFormatFeatureFlags2)temp_ybyOAAP;}();}();
}

    void serialize_pUserData(object& json, VkFormatProperties3& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFormatProperties3& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrmFormatModifierPropertiesList2EXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["drmFormatModifierCount"];
[&](){json_value=member.drmFormatModifierCount;}();
auto& json_value=json["pDrmFormatModifierProperties"];
[&](){
            if (member.pDrmFormatModifierProperties==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int llWReeu=0; llWReeu < member.drmFormatModifierCount; llWReeu++){
            [&](){
            auto& temp=json_value[llWReeu].emplace_object();
            return serialize_struct(temp, member.pDrmFormatModifierProperties[llWReeu]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDrmFormatModifierPropertiesList2EXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["drmFormatModifierCount"];
[&](){member.drmFormatModifierCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDrmFormatModifierProperties"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pDrmFormatModifierProperties=NULL;
            return; }member.pDrmFormatModifierProperties=(VkDrmFormatModifierProperties2EXT*)malloc(member.drmFormatModifierCount*sizeof(VkDrmFormatModifierProperties2EXT));
        auto& arr=json_value.as_array();
        for(int llWReeu=0; llWReeu < member.drmFormatModifierCount; llWReeu++){
            [&](){
            auto& temp=json_value[llWReeu].as_object();
            deserialize_struct(temp,member.pDrmFormatModifierProperties[llWReeu]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkDrmFormatModifierPropertiesList2EXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrmFormatModifierPropertiesList2EXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDrmFormatModifierProperties2EXT& member){
        
    
auto& json_value=json["drmFormatModifier"];
[&](){json_value=member.drmFormatModifier;}();
auto& json_value=json["drmFormatModifierPlaneCount"];
[&](){json_value=member.drmFormatModifierPlaneCount;}();
auto& json_value=json["drmFormatModifierTilingFeatures"];
[&](){[&](){[&](){json_value=member.drmFormatModifierTilingFeatures;}();}();}();
}
void deserialize_struct(object& json, VkDrmFormatModifierProperties2EXT& member){
auto& json_value=json["drmFormatModifier"];
[&](){member.drmFormatModifier=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["drmFormatModifierPlaneCount"];
[&](){member.drmFormatModifierPlaneCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["drmFormatModifierTilingFeatures"];
[&](){[&](){VkFormatFeatureFlags2 temp_KchUTPW[&](){temp_KchUTPW=static_cast<int>(value_to<int>(json_value));}();member.drmFormatModifierTilingFeatures=(VkFormatFeatureFlags2)temp_KchUTPW;}();}();
}

    void serialize_pUserData(object& json, VkDrmFormatModifierProperties2EXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDrmFormatModifierProperties2EXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRenderingCreateInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["viewMask"];
[&](){json_value=member.viewMask;}();
auto& json_value=json["colorAttachmentCount"];
[&](){json_value=member.colorAttachmentCount;}();
auto& json_value=json["pColorAttachmentFormats"];
[&](){
            if (member.pColorAttachmentFormats==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wEZNsRI=0; wEZNsRI < member.colorAttachmentCount; wEZNsRI++){
            [&](){[&](){[&](){json_value[wEZNsRI]=member.pColorAttachmentFormats[wEZNsRI];}();}();}();
        }
        }();
auto& json_value=json["depthAttachmentFormat"];
[&](){[&](){[&](){json_value=member.depthAttachmentFormat;}();}();}();
auto& json_value=json["stencilAttachmentFormat"];
[&](){[&](){[&](){json_value=member.stencilAttachmentFormat;}();}();}();
}
void deserialize_struct(object& json, VkPipelineRenderingCreateInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["viewMask"];
[&](){member.viewMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["colorAttachmentCount"];
[&](){member.colorAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorAttachmentFormats"];
[&](){ VkFormat* temp_jJQRYSF[&](){
            if (!json_value.as_array().size()==0){
                temp_jJQRYSF=NULL;
            return; }temp_jJQRYSF=(VkFormat*)malloc(member.colorAttachmentCount*sizeof(VkFormat));
        auto& arr=json_value.as_array();
        for(int XcfMUtc=0; XcfMUtc < member.colorAttachmentCount; XcfMUtc++){
            [&](){[&](){const VkFormat* temp_sNQcGNB[&](){temp_sNQcGNB=static_cast<int>(value_to<int>(json_value[XcfMUtc]));}();temp_jJQRYSF[XcfMUtc]=(VkFormat)temp_sNQcGNB;}();}();
        }
        }();member.pColorAttachmentFormats=temp_jJQRYSF;}();
auto& json_value=json["depthAttachmentFormat"];
[&](){[&](){VkFormat temp_HBUvOqE[&](){temp_HBUvOqE=static_cast<int>(value_to<int>(json_value));}();member.depthAttachmentFormat=(VkFormat)temp_HBUvOqE;}();}();
auto& json_value=json["stencilAttachmentFormat"];
[&](){[&](){VkFormat temp_XOrMtnc[&](){temp_XOrMtnc=static_cast<int>(value_to<int>(json_value));}();member.stencilAttachmentFormat=(VkFormat)temp_XOrMtnc;}();}();
}

    void serialize_pUserData(object& json, VkPipelineRenderingCreateInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRenderingCreateInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderingInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["renderArea"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.renderArea);
            }();
auto& json_value=json["layerCount"];
[&](){json_value=member.layerCount;}();
auto& json_value=json["viewMask"];
[&](){json_value=member.viewMask;}();
auto& json_value=json["colorAttachmentCount"];
[&](){json_value=member.colorAttachmentCount;}();
auto& json_value=json["pColorAttachments"];
[&](){
            if (member.pColorAttachments==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int cibkfru=0; cibkfru < member.colorAttachmentCount; cibkfru++){
            [&](){
            auto& temp=json_value[cibkfru].emplace_object();
            return serialize_struct(temp, member.pColorAttachments[cibkfru]);
            }();
        }
        }();
auto& json_value=json["pDepthAttachment"];
[&](){
            if (member.pDepthAttachment==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int kxTATsQ=0; kxTATsQ < 1; kxTATsQ++){
            [&](){
            auto& temp=json_value[kxTATsQ].emplace_object();
            return serialize_struct(temp, member.pDepthAttachment[kxTATsQ]);
            }();
        }
        }();
auto& json_value=json["pStencilAttachment"];
[&](){
            if (member.pStencilAttachment==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uJrHPnT=0; uJrHPnT < 1; uJrHPnT++){
            [&](){
            auto& temp=json_value[uJrHPnT].emplace_object();
            return serialize_struct(temp, member.pStencilAttachment[uJrHPnT]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkRenderingInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkRenderingFlags temp_RcrEKzv[&](){temp_RcrEKzv=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkRenderingFlags)temp_RcrEKzv;}();}();
auto& json_value=json["renderArea"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.renderArea);
            }();
auto& json_value=json["layerCount"];
[&](){member.layerCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["viewMask"];
[&](){member.viewMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["colorAttachmentCount"];
[&](){member.colorAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorAttachments"];
[&](){ VkRenderingAttachmentInfo* temp_jvjAKQx[&](){
            if (!json_value.as_array().size()==0){
                temp_jvjAKQx=NULL;
            return; }temp_jvjAKQx=(VkRenderingAttachmentInfo*)malloc(member.colorAttachmentCount*sizeof(VkRenderingAttachmentInfo));
        auto& arr=json_value.as_array();
        for(int cGsnvAo=0; cGsnvAo < member.colorAttachmentCount; cGsnvAo++){
            [&](){
            auto& temp=json_value[cGsnvAo].as_object();
            deserialize_struct(temp,temp_jvjAKQx[cGsnvAo]);
            }();
        }
        }();member.pColorAttachments=temp_jvjAKQx;}();
auto& json_value=json["pDepthAttachment"];
[&](){ VkRenderingAttachmentInfo* temp_CEKgFvq[&](){
            if (!json_value.as_array().size()==0){
                temp_CEKgFvq=NULL;
            return; }temp_CEKgFvq=(VkRenderingAttachmentInfo*)malloc(1*sizeof(VkRenderingAttachmentInfo));
        auto& arr=json_value.as_array();
        for(int ZYEKxYk=0; ZYEKxYk < 1; ZYEKxYk++){
            [&](){
            auto& temp=json_value[ZYEKxYk].as_object();
            deserialize_struct(temp,temp_CEKgFvq[ZYEKxYk]);
            }();
        }
        }();member.pDepthAttachment=temp_CEKgFvq;}();
auto& json_value=json["pStencilAttachment"];
[&](){ VkRenderingAttachmentInfo* temp_tzErIXV[&](){
            if (!json_value.as_array().size()==0){
                temp_tzErIXV=NULL;
            return; }temp_tzErIXV=(VkRenderingAttachmentInfo*)malloc(1*sizeof(VkRenderingAttachmentInfo));
        auto& arr=json_value.as_array();
        for(int WFCqNwK=0; WFCqNwK < 1; WFCqNwK++){
            [&](){
            auto& temp=json_value[WFCqNwK].as_object();
            deserialize_struct(temp,temp_tzErIXV[WFCqNwK]);
            }();
        }
        }();member.pStencilAttachment=temp_tzErIXV;}();
}

    void serialize_pUserData(object& json, VkRenderingInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderingInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderingAttachmentInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageView"];
[&](){serialize_handle(json_value,member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){[&](){json_value=member.imageLayout;}();}();}();
auto& json_value=json["resolveMode"];
[&](){[&](){[&](){json_value=member.resolveMode;}();}();}();
auto& json_value=json["resolveImageView"];
[&](){serialize_handle(json_value,member.resolveImageView);}();
auto& json_value=json["resolveImageLayout"];
[&](){[&](){[&](){json_value=member.resolveImageLayout;}();}();}();
auto& json_value=json["loadOp"];
[&](){[&](){[&](){json_value=member.loadOp;}();}();}();
auto& json_value=json["storeOp"];
[&](){[&](){[&](){json_value=member.storeOp;}();}();}();
auto& json_value=json["clearValue"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.clearValue);
            }();
}
void deserialize_struct(object& json, VkRenderingAttachmentInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["imageView"];
[&](){deserialize_handle(json_value, member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){VkImageLayout temp_UMdMFdm[&](){temp_UMdMFdm=static_cast<int>(value_to<int>(json_value));}();member.imageLayout=(VkImageLayout)temp_UMdMFdm;}();}();
auto& json_value=json["resolveMode"];
[&](){[&](){VkResolveModeFlagBits temp_AKvmssG[&](){temp_AKvmssG=static_cast<int>(value_to<int>(json_value));}();member.resolveMode=(VkResolveModeFlagBits)temp_AKvmssG;}();}();
auto& json_value=json["resolveImageView"];
[&](){deserialize_handle(json_value, member.resolveImageView);}();
auto& json_value=json["resolveImageLayout"];
[&](){[&](){VkImageLayout temp_MbxZjTz[&](){temp_MbxZjTz=static_cast<int>(value_to<int>(json_value));}();member.resolveImageLayout=(VkImageLayout)temp_MbxZjTz;}();}();
auto& json_value=json["loadOp"];
[&](){[&](){VkAttachmentLoadOp temp_TtemVoJ[&](){temp_TtemVoJ=static_cast<int>(value_to<int>(json_value));}();member.loadOp=(VkAttachmentLoadOp)temp_TtemVoJ;}();}();
auto& json_value=json["storeOp"];
[&](){[&](){VkAttachmentStoreOp temp_xPHHoES[&](){temp_xPHHoES=static_cast<int>(value_to<int>(json_value));}();member.storeOp=(VkAttachmentStoreOp)temp_xPHHoES;}();}();
auto& json_value=json["clearValue"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.clearValue);
            }();
}

    void serialize_pUserData(object& json, VkRenderingAttachmentInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderingAttachmentInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderingFragmentShadingRateAttachmentInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageView"];
[&](){serialize_handle(json_value,member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){[&](){json_value=member.imageLayout;}();}();}();
auto& json_value=json["shadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.shadingRateAttachmentTexelSize);
            }();
}
void deserialize_struct(object& json, VkRenderingFragmentShadingRateAttachmentInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["imageView"];
[&](){deserialize_handle(json_value, member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){VkImageLayout temp_UMdMFdm[&](){temp_UMdMFdm=static_cast<int>(value_to<int>(json_value));}();member.imageLayout=(VkImageLayout)temp_UMdMFdm;}();}();
auto& json_value=json["shadingRateAttachmentTexelSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.shadingRateAttachmentTexelSize);
            }();
}

    void serialize_pUserData(object& json, VkRenderingFragmentShadingRateAttachmentInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderingFragmentShadingRateAttachmentInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderingFragmentDensityMapAttachmentInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageView"];
[&](){serialize_handle(json_value,member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){[&](){json_value=member.imageLayout;}();}();}();
}
void deserialize_struct(object& json, VkRenderingFragmentDensityMapAttachmentInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["imageView"];
[&](){deserialize_handle(json_value, member.imageView);}();
auto& json_value=json["imageLayout"];
[&](){[&](){VkImageLayout temp_UMdMFdm[&](){temp_UMdMFdm=static_cast<int>(value_to<int>(json_value));}();member.imageLayout=(VkImageLayout)temp_UMdMFdm;}();}();
}

    void serialize_pUserData(object& json, VkRenderingFragmentDensityMapAttachmentInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderingFragmentDensityMapAttachmentInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDynamicRenderingFeatures& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dynamicRendering"];
[&](){[&](){json_value=member.dynamicRendering;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDynamicRenderingFeatures& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["dynamicRendering"];
[&](){[&](){member.dynamicRendering=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDynamicRenderingFeatures& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDynamicRenderingFeatures& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCommandBufferInheritanceRenderingInfo& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["viewMask"];
[&](){json_value=member.viewMask;}();
auto& json_value=json["colorAttachmentCount"];
[&](){json_value=member.colorAttachmentCount;}();
auto& json_value=json["pColorAttachmentFormats"];
[&](){
            if (member.pColorAttachmentFormats==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int wEZNsRI=0; wEZNsRI < member.colorAttachmentCount; wEZNsRI++){
            [&](){[&](){[&](){json_value[wEZNsRI]=member.pColorAttachmentFormats[wEZNsRI];}();}();}();
        }
        }();
auto& json_value=json["depthAttachmentFormat"];
[&](){[&](){[&](){json_value=member.depthAttachmentFormat;}();}();}();
auto& json_value=json["stencilAttachmentFormat"];
[&](){[&](){[&](){json_value=member.stencilAttachmentFormat;}();}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){[&](){json_value=member.rasterizationSamples;}();}();}();
}
void deserialize_struct(object& json, VkCommandBufferInheritanceRenderingInfo& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkRenderingFlags temp_RcrEKzv[&](){temp_RcrEKzv=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkRenderingFlags)temp_RcrEKzv;}();}();
auto& json_value=json["viewMask"];
[&](){member.viewMask=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["colorAttachmentCount"];
[&](){member.colorAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorAttachmentFormats"];
[&](){ VkFormat* temp_jJQRYSF[&](){
            if (!json_value.as_array().size()==0){
                temp_jJQRYSF=NULL;
            return; }temp_jJQRYSF=(VkFormat*)malloc(member.colorAttachmentCount*sizeof(VkFormat));
        auto& arr=json_value.as_array();
        for(int XcfMUtc=0; XcfMUtc < member.colorAttachmentCount; XcfMUtc++){
            [&](){[&](){const VkFormat* temp_sNQcGNB[&](){temp_sNQcGNB=static_cast<int>(value_to<int>(json_value[XcfMUtc]));}();temp_jJQRYSF[XcfMUtc]=(VkFormat)temp_sNQcGNB;}();}();
        }
        }();member.pColorAttachmentFormats=temp_jJQRYSF;}();
auto& json_value=json["depthAttachmentFormat"];
[&](){[&](){VkFormat temp_HBUvOqE[&](){temp_HBUvOqE=static_cast<int>(value_to<int>(json_value));}();member.depthAttachmentFormat=(VkFormat)temp_HBUvOqE;}();}();
auto& json_value=json["stencilAttachmentFormat"];
[&](){[&](){VkFormat temp_XOrMtnc[&](){temp_XOrMtnc=static_cast<int>(value_to<int>(json_value));}();member.stencilAttachmentFormat=(VkFormat)temp_XOrMtnc;}();}();
auto& json_value=json["rasterizationSamples"];
[&](){[&](){VkSampleCountFlagBits temp_poTQNon[&](){temp_poTQNon=static_cast<int>(value_to<int>(json_value));}();member.rasterizationSamples=(VkSampleCountFlagBits)temp_poTQNon;}();}();
}

    void serialize_pUserData(object& json, VkCommandBufferInheritanceRenderingInfo& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCommandBufferInheritanceRenderingInfo& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAttachmentSampleCountInfoAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["colorAttachmentCount"];
[&](){json_value=member.colorAttachmentCount;}();
auto& json_value=json["pColorAttachmentSamples"];
[&](){
            if (member.pColorAttachmentSamples==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int DxAFsfK=0; DxAFsfK < member.colorAttachmentCount; DxAFsfK++){
            [&](){[&](){[&](){json_value[DxAFsfK]=member.pColorAttachmentSamples[DxAFsfK];}();}();}();
        }
        }();
auto& json_value=json["depthStencilAttachmentSamples"];
[&](){[&](){[&](){json_value=member.depthStencilAttachmentSamples;}();}();}();
}
void deserialize_struct(object& json, VkAttachmentSampleCountInfoAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["colorAttachmentCount"];
[&](){member.colorAttachmentCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pColorAttachmentSamples"];
[&](){ VkSampleCountFlagBits* temp_GpndrzI[&](){
            if (!json_value.as_array().size()==0){
                temp_GpndrzI=NULL;
            return; }temp_GpndrzI=(VkSampleCountFlagBits*)malloc(member.colorAttachmentCount*sizeof(VkSampleCountFlagBits));
        auto& arr=json_value.as_array();
        for(int qSJXYKL=0; qSJXYKL < member.colorAttachmentCount; qSJXYKL++){
            [&](){[&](){const VkSampleCountFlagBits* temp_VdAwVAP[&](){temp_VdAwVAP=static_cast<int>(value_to<int>(json_value[qSJXYKL]));}();temp_GpndrzI[qSJXYKL]=(VkSampleCountFlagBits)temp_VdAwVAP;}();}();
        }
        }();member.pColorAttachmentSamples=temp_GpndrzI;}();
auto& json_value=json["depthStencilAttachmentSamples"];
[&](){[&](){VkSampleCountFlagBits temp_kCffKlH[&](){temp_kCffKlH=static_cast<int>(value_to<int>(json_value));}();member.depthStencilAttachmentSamples=(VkSampleCountFlagBits)temp_kCffKlH;}();}();
}

    void serialize_pUserData(object& json, VkAttachmentSampleCountInfoAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAttachmentSampleCountInfoAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMultiviewPerViewAttributesInfoNVX& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["perViewAttributes"];
[&](){[&](){json_value=member.perViewAttributes;}();}();
auto& json_value=json["perViewAttributesPositionXOnly"];
[&](){[&](){json_value=member.perViewAttributesPositionXOnly;}();}();
}
void deserialize_struct(object& json, VkMultiviewPerViewAttributesInfoNVX& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["perViewAttributes"];
[&](){[&](){member.perViewAttributes=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["perViewAttributesPositionXOnly"];
[&](){[&](){member.perViewAttributesPositionXOnly=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkMultiviewPerViewAttributesInfoNVX& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMultiviewPerViewAttributesInfoNVX& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageViewMinLodFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minLod"];
[&](){[&](){json_value=member.minLod;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageViewMinLodFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["minLod"];
[&](){[&](){member.minLod=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageViewMinLodFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageViewMinLodFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewMinLodCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["minLod"];
[&](){json_value=member.minLod;}();
}
void deserialize_struct(object& json, VkImageViewMinLodCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["minLod"];
[&](){member.minLod=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImageViewMinLodCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewMinLodCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rasterizationOrderColorAttachmentAccess"];
[&](){[&](){json_value=member.rasterizationOrderColorAttachmentAccess;}();}();
auto& json_value=json["rasterizationOrderDepthAttachmentAccess"];
[&](){[&](){json_value=member.rasterizationOrderDepthAttachmentAccess;}();}();
auto& json_value=json["rasterizationOrderStencilAttachmentAccess"];
[&](){[&](){json_value=member.rasterizationOrderStencilAttachmentAccess;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rasterizationOrderColorAttachmentAccess"];
[&](){[&](){member.rasterizationOrderColorAttachmentAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rasterizationOrderDepthAttachmentAccess"];
[&](){[&](){member.rasterizationOrderDepthAttachmentAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["rasterizationOrderStencilAttachmentAccess"];
[&](){[&](){member.rasterizationOrderStencilAttachmentAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceLinearColorAttachmentFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["linearColorAttachment"];
[&](){[&](){json_value=member.linearColorAttachment;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceLinearColorAttachmentFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["linearColorAttachment"];
[&](){[&](){member.linearColorAttachment=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceLinearColorAttachmentFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceLinearColorAttachmentFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["graphicsPipelineLibrary"];
[&](){[&](){json_value=member.graphicsPipelineLibrary;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["graphicsPipelineLibrary"];
[&](){[&](){member.graphicsPipelineLibrary=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["graphicsPipelineLibraryFastLinking"];
[&](){[&](){json_value=member.graphicsPipelineLibraryFastLinking;}();}();
auto& json_value=json["graphicsPipelineLibraryIndependentInterpolationDecoration"];
[&](){[&](){json_value=member.graphicsPipelineLibraryIndependentInterpolationDecoration;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["graphicsPipelineLibraryFastLinking"];
[&](){[&](){member.graphicsPipelineLibraryFastLinking=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["graphicsPipelineLibraryIndependentInterpolationDecoration"];
[&](){[&](){member.graphicsPipelineLibraryIndependentInterpolationDecoration=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkGraphicsPipelineLibraryCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkGraphicsPipelineLibraryCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkGraphicsPipelineLibraryFlagsEXT temp_RyVGeeq[&](){temp_RyVGeeq=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkGraphicsPipelineLibraryFlagsEXT)temp_RyVGeeq;}();}();
}

    void serialize_pUserData(object& json, VkGraphicsPipelineLibraryCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkGraphicsPipelineLibraryCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["descriptorSetHostMapping"];
[&](){[&](){json_value=member.descriptorSetHostMapping;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["descriptorSetHostMapping"];
[&](){[&](){member.descriptorSetHostMapping=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetBindingReferenceVALVE& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["descriptorSetLayout"];
[&](){serialize_handle(json_value,member.descriptorSetLayout);}();
auto& json_value=json["binding"];
[&](){json_value=member.binding;}();
}
void deserialize_struct(object& json, VkDescriptorSetBindingReferenceVALVE& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["descriptorSetLayout"];
[&](){deserialize_handle(json_value, member.descriptorSetLayout);}();
auto& json_value=json["binding"];
[&](){member.binding=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDescriptorSetBindingReferenceVALVE& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetBindingReferenceVALVE& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDescriptorSetLayoutHostMappingInfoVALVE& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["descriptorOffset"];
[&](){json_value=member.descriptorOffset;}();
auto& json_value=json["descriptorSize"];
[&](){json_value=member.descriptorSize;}();
}
void deserialize_struct(object& json, VkDescriptorSetLayoutHostMappingInfoVALVE& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["descriptorOffset"];
[&](){member.descriptorOffset=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["descriptorSize"];
[&](){member.descriptorSize=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDescriptorSetLayoutHostMappingInfoVALVE& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDescriptorSetLayoutHostMappingInfoVALVE& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderModuleIdentifier"];
[&](){[&](){json_value=member.shaderModuleIdentifier;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderModuleIdentifier"];
[&](){[&](){member.shaderModuleIdentifier=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderModuleIdentifierAlgorithmUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int KnKbJaC=0; KnKbJaC < VK_UUID_SIZE; KnKbJaC++){
            [&](){json_value[KnKbJaC]=member.shaderModuleIdentifierAlgorithmUUID[KnKbJaC];}();
        }
        }();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderModuleIdentifierAlgorithmUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int KnKbJaC=0; KnKbJaC < VK_UUID_SIZE; KnKbJaC++){
            [&](){member.shaderModuleIdentifierAlgorithmUUID[KnKbJaC]=static_cast<uint8_t>(value_to<int>(json_value[KnKbJaC]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineShaderStageModuleIdentifierCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["identifierSize"];
[&](){json_value=member.identifierSize;}();
auto& json_value=json["pIdentifier"];
[&](){
            if (member.pIdentifier==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int DmBzRet=0; DmBzRet < member.identifierSize; DmBzRet++){
            [&](){json_value[DmBzRet]=member.pIdentifier[DmBzRet];}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelineShaderStageModuleIdentifierCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["identifierSize"];
[&](){member.identifierSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pIdentifier"];
[&](){ uint8_t* temp_BYIqOVm[&](){
            if (!json_value.as_array().size()==0){
                temp_BYIqOVm=NULL;
            return; }temp_BYIqOVm=(uint8_t*)malloc(member.identifierSize*sizeof(uint8_t));
        auto& arr=json_value.as_array();
        for(int wMKTMIh=0; wMKTMIh < member.identifierSize; wMKTMIh++){
            [&](){temp_BYIqOVm[wMKTMIh]=static_cast<uint8_t>(value_to<int>(json_value[wMKTMIh]));}();
        }
        }();member.pIdentifier=temp_BYIqOVm;}();
}

    void serialize_pUserData(object& json, VkPipelineShaderStageModuleIdentifierCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineShaderStageModuleIdentifierCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkShaderModuleIdentifierEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["identifierSize"];
[&](){json_value=member.identifierSize;}();
auto& json_value=json["identifier"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int FYYsgLr=0; FYYsgLr < VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT; FYYsgLr++){
            [&](){json_value[FYYsgLr]=member.identifier[FYYsgLr];}();
        }
        }();
}
void deserialize_struct(object& json, VkShaderModuleIdentifierEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["identifierSize"];
[&](){member.identifierSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["identifier"];
[&](){
        auto& arr=json_value.as_array();
        for(int FYYsgLr=0; FYYsgLr < VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT; FYYsgLr++){
            [&](){member.identifier[FYYsgLr]=static_cast<uint8_t>(value_to<int>(json_value[FYYsgLr]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkShaderModuleIdentifierEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkShaderModuleIdentifierEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageCompressionControlEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["compressionControlPlaneCount"];
[&](){json_value=member.compressionControlPlaneCount;}();
auto& json_value=json["pFixedRateFlags"];
[&](){
            if (member.pFixedRateFlags==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int YdHtGOk=0; YdHtGOk < member.compressionControlPlaneCount; YdHtGOk++){
            [&](){[&](){[&](){json_value[YdHtGOk]=member.pFixedRateFlags[YdHtGOk];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkImageCompressionControlEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkImageCompressionFlagsEXT temp_pSnDpoK[&](){temp_pSnDpoK=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkImageCompressionFlagsEXT)temp_pSnDpoK;}();}();
auto& json_value=json["compressionControlPlaneCount"];
[&](){member.compressionControlPlaneCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pFixedRateFlags"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pFixedRateFlags=NULL;
            return; }member.pFixedRateFlags=(VkImageCompressionFixedRateFlagsEXT*)malloc(member.compressionControlPlaneCount*sizeof(VkImageCompressionFixedRateFlagsEXT));
        auto& arr=json_value.as_array();
        for(int YdHtGOk=0; YdHtGOk < member.compressionControlPlaneCount; YdHtGOk++){
            [&](){[&](){VkImageCompressionFixedRateFlagsEXT* temp_jIsWHCu[&](){temp_jIsWHCu=static_cast<int>(value_to<int>(json_value[YdHtGOk]));}();member.pFixedRateFlags[YdHtGOk]=(VkImageCompressionFixedRateFlagsEXT)temp_jIsWHCu;}();}();
        }
        }();
}

    void serialize_pUserData(object& json, VkImageCompressionControlEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageCompressionControlEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageCompressionControlFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageCompressionControl"];
[&](){[&](){json_value=member.imageCompressionControl;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageCompressionControlFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageCompressionControl"];
[&](){[&](){member.imageCompressionControl=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageCompressionControlFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageCompressionControlFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageCompressionPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageCompressionFlags"];
[&](){[&](){[&](){json_value=member.imageCompressionFlags;}();}();}();
auto& json_value=json["imageCompressionFixedRateFlags"];
[&](){[&](){[&](){json_value=member.imageCompressionFixedRateFlags;}();}();}();
}
void deserialize_struct(object& json, VkImageCompressionPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageCompressionFlags"];
[&](){[&](){VkImageCompressionFlagsEXT temp_TfKaSGM[&](){temp_TfKaSGM=static_cast<int>(value_to<int>(json_value));}();member.imageCompressionFlags=(VkImageCompressionFlagsEXT)temp_TfKaSGM;}();}();
auto& json_value=json["imageCompressionFixedRateFlags"];
[&](){[&](){VkImageCompressionFixedRateFlagsEXT temp_RbQZdoa[&](){temp_RbQZdoa=static_cast<int>(value_to<int>(json_value));}();member.imageCompressionFixedRateFlags=(VkImageCompressionFixedRateFlagsEXT)temp_RbQZdoa;}();}();
}

    void serialize_pUserData(object& json, VkImageCompressionPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageCompressionPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageCompressionControlSwapchain"];
[&](){[&](){json_value=member.imageCompressionControlSwapchain;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageCompressionControlSwapchain"];
[&](){[&](){member.imageCompressionControlSwapchain=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageSubresource2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.imageSubresource);
            }();
}
void deserialize_struct(object& json, VkImageSubresource2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["imageSubresource"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.imageSubresource);
            }();
}

    void serialize_pUserData(object& json, VkImageSubresource2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageSubresource2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSubresourceLayout2KHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["subresourceLayout"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.subresourceLayout);
            }();
}
void deserialize_struct(object& json, VkSubresourceLayout2KHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["subresourceLayout"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.subresourceLayout);
            }();
}

    void serialize_pUserData(object& json, VkSubresourceLayout2KHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSubresourceLayout2KHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassCreationControlEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["disallowMerging"];
[&](){[&](){json_value=member.disallowMerging;}();}();
}
void deserialize_struct(object& json, VkRenderPassCreationControlEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["disallowMerging"];
[&](){[&](){member.disallowMerging=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkRenderPassCreationControlEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassCreationControlEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassCreationFeedbackInfoEXT& member){
        
    
auto& json_value=json["postMergeSubpassCount"];
[&](){json_value=member.postMergeSubpassCount;}();
}
void deserialize_struct(object& json, VkRenderPassCreationFeedbackInfoEXT& member){
auto& json_value=json["postMergeSubpassCount"];
[&](){member.postMergeSubpassCount=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRenderPassCreationFeedbackInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassCreationFeedbackInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassCreationFeedbackCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pRenderPassFeedback"];
[&](){
            if (member.pRenderPassFeedback==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int vxiUcYZ=0; vxiUcYZ < 1; vxiUcYZ++){
            [&](){
            auto& temp=json_value[vxiUcYZ].emplace_object();
            return serialize_struct(temp, member.pRenderPassFeedback[vxiUcYZ]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassCreationFeedbackCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pRenderPassFeedback"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pRenderPassFeedback=NULL;
            return; }member.pRenderPassFeedback=(VkRenderPassCreationFeedbackInfoEXT*)malloc(1*sizeof(VkRenderPassCreationFeedbackInfoEXT));
        auto& arr=json_value.as_array();
        for(int vxiUcYZ=0; vxiUcYZ < 1; vxiUcYZ++){
            [&](){
            auto& temp=json_value[vxiUcYZ].as_object();
            deserialize_struct(temp,member.pRenderPassFeedback[vxiUcYZ]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkRenderPassCreationFeedbackCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassCreationFeedbackCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassSubpassFeedbackInfoEXT& member){
        
    
auto& json_value=json["subpassMergeStatus"];
[&](){[&](){[&](){json_value=member.subpassMergeStatus;}();}();}();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
auto& json_value=json["postMergeIndex"];
[&](){json_value=member.postMergeIndex;}();
}
void deserialize_struct(object& json, VkRenderPassSubpassFeedbackInfoEXT& member){
auto& json_value=json["subpassMergeStatus"];
[&](){[&](){VkSubpassMergeStatusEXT temp_QOTNXZS[&](){temp_QOTNXZS=static_cast<int>(value_to<int>(json_value));}();member.subpassMergeStatus=(VkSubpassMergeStatusEXT)temp_QOTNXZS;}();}();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
auto& json_value=json["postMergeIndex"];
[&](){member.postMergeIndex=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkRenderPassSubpassFeedbackInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassSubpassFeedbackInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkRenderPassSubpassFeedbackCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pSubpassFeedback"];
[&](){
            if (member.pSubpassFeedback==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int hutaZSO=0; hutaZSO < 1; hutaZSO++){
            [&](){
            auto& temp=json_value[hutaZSO].emplace_object();
            return serialize_struct(temp, member.pSubpassFeedback[hutaZSO]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkRenderPassSubpassFeedbackCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pSubpassFeedback"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pSubpassFeedback=NULL;
            return; }member.pSubpassFeedback=(VkRenderPassSubpassFeedbackInfoEXT*)malloc(1*sizeof(VkRenderPassSubpassFeedbackInfoEXT));
        auto& arr=json_value.as_array();
        for(int hutaZSO=0; hutaZSO < 1; hutaZSO++){
            [&](){
            auto& temp=json_value[hutaZSO].as_object();
            deserialize_struct(temp,member.pSubpassFeedback[hutaZSO]);
            }();
        }
        }();
}

    void serialize_pUserData(object& json, VkRenderPassSubpassFeedbackCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkRenderPassSubpassFeedbackCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["subpassMergeFeedback"];
[&](){[&](){json_value=member.subpassMergeFeedback;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["subpassMergeFeedback"];
[&](){[&](){member.subpassMergeFeedback=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMicromapBuildInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
auto& json_value=json["dstMicromap"];
[&](){serialize_handle(json_value,member.dstMicromap);}();
auto& json_value=json["usageCountsCount"];
[&](){json_value=member.usageCountsCount;}();
auto& json_value=json["pUsageCounts"];
[&](){
            if (member.pUsageCounts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int pwlCVvr=0; pwlCVvr < member.usageCountsCount; pwlCVvr++){
            [&](){
            auto& temp=json_value[pwlCVvr].emplace_object();
            return serialize_struct(temp, member.pUsageCounts[pwlCVvr]);
            }();
        }
        }();
auto& json_value=json["ppUsageCounts"];
[&](){
            if (member.ppUsageCounts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int mENrsNk=0; mENrsNk < member.usageCountsCount; mENrsNk++){
            [&](){
            if (member.ppUsageCounts[mENrsNk]==NULL){
                json_value[mENrsNk]=array();
            return; }
        auto& arr=json_value[mENrsNk].emplace_array();
        for(int sKYUQgf=0; sKYUQgf < 1; sKYUQgf++){
            [&](){
            auto& temp=json_value[mENrsNk][sKYUQgf].emplace_object();
            return serialize_struct(temp, member.ppUsageCounts[mENrsNk][sKYUQgf]);
            }();
        }
        }();
        }
        }();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.data);
            }();
auto& json_value=json["scratchData"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.scratchData);
            }();
auto& json_value=json["triangleArray"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.triangleArray);
            }();
auto& json_value=json["triangleArrayStride"];
[&](){[&](){json_value=member.triangleArrayStride;}();}();
}
void deserialize_struct(object& json, VkMicromapBuildInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["type"];
[&](){[&](){VkMicromapTypeEXT temp_zOIsOLD[&](){temp_zOIsOLD=static_cast<int>(value_to<int>(json_value));}();member.type=(VkMicromapTypeEXT)temp_zOIsOLD;}();}();
auto& json_value=json["flags"];
[&](){[&](){VkBuildMicromapFlagsEXT temp_HUJcVpm[&](){temp_HUJcVpm=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkBuildMicromapFlagsEXT)temp_HUJcVpm;}();}();
auto& json_value=json["mode"];
[&](){[&](){VkBuildMicromapModeEXT temp_fgwQTBe[&](){temp_fgwQTBe=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkBuildMicromapModeEXT)temp_fgwQTBe;}();}();
auto& json_value=json["dstMicromap"];
[&](){deserialize_handle(json_value, member.dstMicromap);}();
auto& json_value=json["usageCountsCount"];
[&](){member.usageCountsCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pUsageCounts"];
[&](){ VkMicromapUsageEXT* temp_FdpPyjM[&](){
            if (!json_value.as_array().size()==0){
                temp_FdpPyjM=NULL;
            return; }temp_FdpPyjM=(VkMicromapUsageEXT*)malloc(member.usageCountsCount*sizeof(VkMicromapUsageEXT));
        auto& arr=json_value.as_array();
        for(int TeZtOHY=0; TeZtOHY < member.usageCountsCount; TeZtOHY++){
            [&](){
            auto& temp=json_value[TeZtOHY].as_object();
            deserialize_struct(temp,temp_FdpPyjM[TeZtOHY]);
            }();
        }
        }();member.pUsageCounts=temp_FdpPyjM;}();
auto& json_value=json["ppUsageCounts"];
[&](){ VkMicromapUsageEXT* * temp_dEiDkbe[&](){
            if (!json_value.as_array().size()==0){
                temp_dEiDkbe=NULL;
            return; }temp_dEiDkbe=(VkMicromapUsageEXT**)malloc(member.usageCountsCount*sizeof(VkMicromapUsageEXT*));
        auto& arr=json_value.as_array();
        for(int MkxskvU=0; MkxskvU < member.usageCountsCount; MkxskvU++){
            [&](){
            if (!json_value[MkxskvU].as_array().size()==0){
                temp_dEiDkbe[MkxskvU]=NULL;
            return; }temp_dEiDkbe[MkxskvU]=(VkMicromapUsageEXT*)malloc(1*sizeof(VkMicromapUsageEXT));
        auto& arr=json_value[MkxskvU].as_array();
        for(int cecvrvi=0; cecvrvi < 1; cecvrvi++){
            [&](){
            auto& temp=json_value[MkxskvU][cecvrvi].as_object();
            deserialize_struct(temp,temp_dEiDkbe[MkxskvU][cecvrvi]);
            }();
        }
        }();
        }
        }();member.ppUsageCounts=temp_dEiDkbe;}();
auto& json_value=json["data"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.data);
            }();
auto& json_value=json["scratchData"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.scratchData);
            }();
auto& json_value=json["triangleArray"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.triangleArray);
            }();
auto& json_value=json["triangleArrayStride"];
[&](){[&](){member.triangleArrayStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkMicromapBuildInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMicromapBuildInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMicromapCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["createFlags"];
[&](){[&](){[&](){json_value=member.createFlags;}();}();}();
auto& json_value=json["buffer"];
[&](){serialize_handle(json_value,member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["type"];
[&](){[&](){[&](){json_value=member.type;}();}();}();
auto& json_value=json["deviceAddress"];
[&](){[&](){json_value=member.deviceAddress;}();}();
}
void deserialize_struct(object& json, VkMicromapCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["createFlags"];
[&](){[&](){VkMicromapCreateFlagsEXT temp_ykeblyY[&](){temp_ykeblyY=static_cast<int>(value_to<int>(json_value));}();member.createFlags=(VkMicromapCreateFlagsEXT)temp_ykeblyY;}();}();
auto& json_value=json["buffer"];
[&](){deserialize_handle(json_value, member.buffer);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["type"];
[&](){[&](){VkMicromapTypeEXT temp_zOIsOLD[&](){temp_zOIsOLD=static_cast<int>(value_to<int>(json_value));}();member.type=(VkMicromapTypeEXT)temp_zOIsOLD;}();}();
auto& json_value=json["deviceAddress"];
[&](){[&](){member.deviceAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkMicromapCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMicromapCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMicromapVersionInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pVersionData"];
[&](){
            if (member.pVersionData==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int UXnQvHZ=0; UXnQvHZ < 2*VK_UUID_SIZE; UXnQvHZ++){
            [&](){json_value[UXnQvHZ]=member.pVersionData[UXnQvHZ];}();
        }
        }();
}
void deserialize_struct(object& json, VkMicromapVersionInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pVersionData"];
[&](){ uint8_t* temp_kcsYiSk[&](){
            if (!json_value.as_array().size()==0){
                temp_kcsYiSk=NULL;
            return; }temp_kcsYiSk=(uint8_t*)malloc(2*VK_UUID_SIZE*sizeof(uint8_t));
        auto& arr=json_value.as_array();
        for(int aPYYtKH=0; aPYYtKH < 2*VK_UUID_SIZE; aPYYtKH++){
            [&](){temp_kcsYiSk[aPYYtKH]=static_cast<uint8_t>(value_to<int>(json_value[aPYYtKH]));}();
        }
        }();member.pVersionData=temp_kcsYiSk;}();
}

    void serialize_pUserData(object& json, VkMicromapVersionInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMicromapVersionInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyMicromapInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["src"];
[&](){serialize_handle(json_value,member.src);}();
auto& json_value=json["dst"];
[&](){serialize_handle(json_value,member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
}
void deserialize_struct(object& json, VkCopyMicromapInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["src"];
[&](){deserialize_handle(json_value, member.src);}();
auto& json_value=json["dst"];
[&](){deserialize_handle(json_value, member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){VkCopyMicromapModeEXT temp_IlNxgIu[&](){temp_IlNxgIu=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkCopyMicromapModeEXT)temp_IlNxgIu;}();}();
}

    void serialize_pUserData(object& json, VkCopyMicromapInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyMicromapInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyMicromapToMemoryInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["src"];
[&](){serialize_handle(json_value,member.src);}();
auto& json_value=json["dst"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.dst);
            }();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
}
void deserialize_struct(object& json, VkCopyMicromapToMemoryInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["src"];
[&](){deserialize_handle(json_value, member.src);}();
auto& json_value=json["dst"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.dst);
            }();
auto& json_value=json["mode"];
[&](){[&](){VkCopyMicromapModeEXT temp_IlNxgIu[&](){temp_IlNxgIu=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkCopyMicromapModeEXT)temp_IlNxgIu;}();}();
}

    void serialize_pUserData(object& json, VkCopyMicromapToMemoryInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyMicromapToMemoryInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCopyMemoryToMicromapInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["src"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.src);
            }();
auto& json_value=json["dst"];
[&](){serialize_handle(json_value,member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
}
void deserialize_struct(object& json, VkCopyMemoryToMicromapInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["src"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.src);
            }();
auto& json_value=json["dst"];
[&](){deserialize_handle(json_value, member.dst);}();
auto& json_value=json["mode"];
[&](){[&](){VkCopyMicromapModeEXT temp_IlNxgIu[&](){temp_IlNxgIu=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkCopyMicromapModeEXT)temp_IlNxgIu;}();}();
}

    void serialize_pUserData(object& json, VkCopyMemoryToMicromapInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCopyMemoryToMicromapInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMicromapBuildSizesInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["micromapSize"];
[&](){[&](){json_value=member.micromapSize;}();}();
auto& json_value=json["buildScratchSize"];
[&](){[&](){json_value=member.buildScratchSize;}();}();
auto& json_value=json["discardable"];
[&](){[&](){json_value=member.discardable;}();}();
}
void deserialize_struct(object& json, VkMicromapBuildSizesInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["micromapSize"];
[&](){[&](){member.micromapSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["buildScratchSize"];
[&](){[&](){member.buildScratchSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["discardable"];
[&](){[&](){member.discardable=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkMicromapBuildSizesInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMicromapBuildSizesInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMicromapUsageEXT& member){
        
    
auto& json_value=json["count"];
[&](){json_value=member.count;}();
auto& json_value=json["subdivisionLevel"];
[&](){json_value=member.subdivisionLevel;}();
auto& json_value=json["format"];
[&](){json_value=member.format;}();
}
void deserialize_struct(object& json, VkMicromapUsageEXT& member){
auto& json_value=json["count"];
[&](){member.count=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["subdivisionLevel"];
[&](){member.subdivisionLevel=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["format"];
[&](){member.format=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMicromapUsageEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMicromapUsageEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMicromapTriangleEXT& member){
        
    
auto& json_value=json["dataOffset"];
[&](){json_value=member.dataOffset;}();
auto& json_value=json["subdivisionLevel"];
[&](){json_value=member.subdivisionLevel;}();
auto& json_value=json["format"];
[&](){json_value=member.format;}();
}
void deserialize_struct(object& json, VkMicromapTriangleEXT& member){
auto& json_value=json["dataOffset"];
[&](){member.dataOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["subdivisionLevel"];
[&](){member.subdivisionLevel=static_cast<uint16_t>(value_to<int>(json_value));}();
auto& json_value=json["format"];
[&](){member.format=static_cast<uint16_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkMicromapTriangleEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMicromapTriangleEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceOpacityMicromapFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["micromap"];
[&](){[&](){json_value=member.micromap;}();}();
auto& json_value=json["micromapCaptureReplay"];
[&](){[&](){json_value=member.micromapCaptureReplay;}();}();
auto& json_value=json["micromapHostCommands"];
[&](){[&](){json_value=member.micromapHostCommands;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceOpacityMicromapFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["micromap"];
[&](){[&](){member.micromap=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["micromapCaptureReplay"];
[&](){[&](){member.micromapCaptureReplay=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["micromapHostCommands"];
[&](){[&](){member.micromapHostCommands=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceOpacityMicromapFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceOpacityMicromapFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceOpacityMicromapPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxOpacity2StateSubdivisionLevel"];
[&](){json_value=member.maxOpacity2StateSubdivisionLevel;}();
auto& json_value=json["maxOpacity4StateSubdivisionLevel"];
[&](){json_value=member.maxOpacity4StateSubdivisionLevel;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceOpacityMicromapPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxOpacity2StateSubdivisionLevel"];
[&](){member.maxOpacity2StateSubdivisionLevel=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxOpacity4StateSubdivisionLevel"];
[&](){member.maxOpacity4StateSubdivisionLevel=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceOpacityMicromapPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceOpacityMicromapPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAccelerationStructureTrianglesOpacityMicromapEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["indexType"];
[&](){[&](){[&](){json_value=member.indexType;}();}();}();
auto& json_value=json["indexBuffer"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.indexBuffer);
            }();
auto& json_value=json["indexStride"];
[&](){[&](){json_value=member.indexStride;}();}();
auto& json_value=json["baseTriangle"];
[&](){json_value=member.baseTriangle;}();
auto& json_value=json["usageCountsCount"];
[&](){json_value=member.usageCountsCount;}();
auto& json_value=json["pUsageCounts"];
[&](){
            if (member.pUsageCounts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int pwlCVvr=0; pwlCVvr < member.usageCountsCount; pwlCVvr++){
            [&](){
            auto& temp=json_value[pwlCVvr].emplace_object();
            return serialize_struct(temp, member.pUsageCounts[pwlCVvr]);
            }();
        }
        }();
auto& json_value=json["ppUsageCounts"];
[&](){
            if (member.ppUsageCounts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int mENrsNk=0; mENrsNk < member.usageCountsCount; mENrsNk++){
            [&](){
            if (member.ppUsageCounts[mENrsNk]==NULL){
                json_value[mENrsNk]=array();
            return; }
        auto& arr=json_value[mENrsNk].emplace_array();
        for(int sKYUQgf=0; sKYUQgf < 1; sKYUQgf++){
            [&](){
            auto& temp=json_value[mENrsNk][sKYUQgf].emplace_object();
            return serialize_struct(temp, member.ppUsageCounts[mENrsNk][sKYUQgf]);
            }();
        }
        }();
        }
        }();
auto& json_value=json["micromap"];
[&](){serialize_handle(json_value,member.micromap);}();
}
void deserialize_struct(object& json, VkAccelerationStructureTrianglesOpacityMicromapEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["indexType"];
[&](){[&](){VkIndexType temp_oHMXYuj[&](){temp_oHMXYuj=static_cast<int>(value_to<int>(json_value));}();member.indexType=(VkIndexType)temp_oHMXYuj;}();}();
auto& json_value=json["indexBuffer"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.indexBuffer);
            }();
auto& json_value=json["indexStride"];
[&](){[&](){member.indexStride=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["baseTriangle"];
[&](){member.baseTriangle=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["usageCountsCount"];
[&](){member.usageCountsCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pUsageCounts"];
[&](){ VkMicromapUsageEXT* temp_FdpPyjM[&](){
            if (!json_value.as_array().size()==0){
                temp_FdpPyjM=NULL;
            return; }temp_FdpPyjM=(VkMicromapUsageEXT*)malloc(member.usageCountsCount*sizeof(VkMicromapUsageEXT));
        auto& arr=json_value.as_array();
        for(int TeZtOHY=0; TeZtOHY < member.usageCountsCount; TeZtOHY++){
            [&](){
            auto& temp=json_value[TeZtOHY].as_object();
            deserialize_struct(temp,temp_FdpPyjM[TeZtOHY]);
            }();
        }
        }();member.pUsageCounts=temp_FdpPyjM;}();
auto& json_value=json["ppUsageCounts"];
[&](){ VkMicromapUsageEXT* * temp_dEiDkbe[&](){
            if (!json_value.as_array().size()==0){
                temp_dEiDkbe=NULL;
            return; }temp_dEiDkbe=(VkMicromapUsageEXT**)malloc(member.usageCountsCount*sizeof(VkMicromapUsageEXT*));
        auto& arr=json_value.as_array();
        for(int MkxskvU=0; MkxskvU < member.usageCountsCount; MkxskvU++){
            [&](){
            if (!json_value[MkxskvU].as_array().size()==0){
                temp_dEiDkbe[MkxskvU]=NULL;
            return; }temp_dEiDkbe[MkxskvU]=(VkMicromapUsageEXT*)malloc(1*sizeof(VkMicromapUsageEXT));
        auto& arr=json_value[MkxskvU].as_array();
        for(int cecvrvi=0; cecvrvi < 1; cecvrvi++){
            [&](){
            auto& temp=json_value[MkxskvU][cecvrvi].as_object();
            deserialize_struct(temp,temp_dEiDkbe[MkxskvU][cecvrvi]);
            }();
        }
        }();
        }
        }();member.ppUsageCounts=temp_dEiDkbe;}();
auto& json_value=json["micromap"];
[&](){deserialize_handle(json_value, member.micromap);}();
}

    void serialize_pUserData(object& json, VkAccelerationStructureTrianglesOpacityMicromapEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAccelerationStructureTrianglesOpacityMicromapEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelinePropertiesIdentifierEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineIdentifier"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int vbeUhnR=0; vbeUhnR < VK_UUID_SIZE; vbeUhnR++){
            [&](){json_value[vbeUhnR]=member.pipelineIdentifier[vbeUhnR];}();
        }
        }();
}
void deserialize_struct(object& json, VkPipelinePropertiesIdentifierEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelineIdentifier"];
[&](){
        auto& arr=json_value.as_array();
        for(int vbeUhnR=0; vbeUhnR < VK_UUID_SIZE; vbeUhnR++){
            [&](){member.pipelineIdentifier[vbeUhnR]=static_cast<uint8_t>(value_to<int>(json_value[vbeUhnR]));}();
        }
        }();
}

    void serialize_pUserData(object& json, VkPipelinePropertiesIdentifierEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelinePropertiesIdentifierEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePipelinePropertiesFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelinePropertiesIdentifier"];
[&](){[&](){json_value=member.pipelinePropertiesIdentifier;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePipelinePropertiesFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelinePropertiesIdentifier"];
[&](){[&](){member.pipelinePropertiesIdentifier=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePipelinePropertiesFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePipelinePropertiesFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderEarlyAndLateFragmentTests"];
[&](){[&](){json_value=member.shaderEarlyAndLateFragmentTests;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderEarlyAndLateFragmentTests"];
[&](){[&](){member.shaderEarlyAndLateFragmentTests=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkExternalMemoryAcquireUnmodifiedEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["acquireUnmodifiedMemory"];
[&](){[&](){json_value=member.acquireUnmodifiedMemory;}();}();
}
void deserialize_struct(object& json, VkExternalMemoryAcquireUnmodifiedEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["acquireUnmodifiedMemory"];
[&](){[&](){member.acquireUnmodifiedMemory=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkExternalMemoryAcquireUnmodifiedEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkExternalMemoryAcquireUnmodifiedEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["nonSeamlessCubeMap"];
[&](){[&](){json_value=member.nonSeamlessCubeMap;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["nonSeamlessCubeMap"];
[&](){[&](){member.nonSeamlessCubeMap=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePipelineRobustnessFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineRobustness"];
[&](){[&](){json_value=member.pipelineRobustness;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePipelineRobustnessFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelineRobustness"];
[&](){[&](){member.pipelineRobustness=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePipelineRobustnessFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePipelineRobustnessFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPipelineRobustnessCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["storageBuffers"];
[&](){[&](){[&](){json_value=member.storageBuffers;}();}();}();
auto& json_value=json["uniformBuffers"];
[&](){[&](){[&](){json_value=member.uniformBuffers;}();}();}();
auto& json_value=json["vertexInputs"];
[&](){[&](){[&](){json_value=member.vertexInputs;}();}();}();
auto& json_value=json["images"];
[&](){[&](){[&](){json_value=member.images;}();}();}();
}
void deserialize_struct(object& json, VkPipelineRobustnessCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["storageBuffers"];
[&](){[&](){VkPipelineRobustnessBufferBehaviorEXT temp_xzuFouD[&](){temp_xzuFouD=static_cast<int>(value_to<int>(json_value));}();member.storageBuffers=(VkPipelineRobustnessBufferBehaviorEXT)temp_xzuFouD;}();}();
auto& json_value=json["uniformBuffers"];
[&](){[&](){VkPipelineRobustnessBufferBehaviorEXT temp_lundUFF[&](){temp_lundUFF=static_cast<int>(value_to<int>(json_value));}();member.uniformBuffers=(VkPipelineRobustnessBufferBehaviorEXT)temp_lundUFF;}();}();
auto& json_value=json["vertexInputs"];
[&](){[&](){VkPipelineRobustnessBufferBehaviorEXT temp_jsjJoRT[&](){temp_jsjJoRT=static_cast<int>(value_to<int>(json_value));}();member.vertexInputs=(VkPipelineRobustnessBufferBehaviorEXT)temp_jsjJoRT;}();}();
auto& json_value=json["images"];
[&](){[&](){VkPipelineRobustnessImageBehaviorEXT temp_sKVwLiq[&](){temp_sKVwLiq=static_cast<int>(value_to<int>(json_value));}();member.images=(VkPipelineRobustnessImageBehaviorEXT)temp_sKVwLiq;}();}();
}

    void serialize_pUserData(object& json, VkPipelineRobustnessCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPipelineRobustnessCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePipelineRobustnessPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["defaultRobustnessStorageBuffers"];
[&](){[&](){[&](){json_value=member.defaultRobustnessStorageBuffers;}();}();}();
auto& json_value=json["defaultRobustnessUniformBuffers"];
[&](){[&](){[&](){json_value=member.defaultRobustnessUniformBuffers;}();}();}();
auto& json_value=json["defaultRobustnessVertexInputs"];
[&](){[&](){[&](){json_value=member.defaultRobustnessVertexInputs;}();}();}();
auto& json_value=json["defaultRobustnessImages"];
[&](){[&](){[&](){json_value=member.defaultRobustnessImages;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePipelineRobustnessPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["defaultRobustnessStorageBuffers"];
[&](){[&](){VkPipelineRobustnessBufferBehaviorEXT temp_SSYYXeJ[&](){temp_SSYYXeJ=static_cast<int>(value_to<int>(json_value));}();member.defaultRobustnessStorageBuffers=(VkPipelineRobustnessBufferBehaviorEXT)temp_SSYYXeJ;}();}();
auto& json_value=json["defaultRobustnessUniformBuffers"];
[&](){[&](){VkPipelineRobustnessBufferBehaviorEXT temp_Wczabec[&](){temp_Wczabec=static_cast<int>(value_to<int>(json_value));}();member.defaultRobustnessUniformBuffers=(VkPipelineRobustnessBufferBehaviorEXT)temp_Wczabec;}();}();
auto& json_value=json["defaultRobustnessVertexInputs"];
[&](){[&](){VkPipelineRobustnessBufferBehaviorEXT temp_DkXimhK[&](){temp_DkXimhK=static_cast<int>(value_to<int>(json_value));}();member.defaultRobustnessVertexInputs=(VkPipelineRobustnessBufferBehaviorEXT)temp_DkXimhK;}();}();
auto& json_value=json["defaultRobustnessImages"];
[&](){[&](){VkPipelineRobustnessImageBehaviorEXT temp_fojwptV[&](){temp_fojwptV=static_cast<int>(value_to<int>(json_value));}();member.defaultRobustnessImages=(VkPipelineRobustnessImageBehaviorEXT)temp_fojwptV;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePipelineRobustnessPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePipelineRobustnessPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkImageViewSampleWeightCreateInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["filterCenter"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.filterCenter);
            }();
auto& json_value=json["filterSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.filterSize);
            }();
auto& json_value=json["numPhases"];
[&](){json_value=member.numPhases;}();
}
void deserialize_struct(object& json, VkImageViewSampleWeightCreateInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["filterCenter"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.filterCenter);
            }();
auto& json_value=json["filterSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.filterSize);
            }();
auto& json_value=json["numPhases"];
[&](){member.numPhases=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkImageViewSampleWeightCreateInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkImageViewSampleWeightCreateInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageProcessingFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["textureSampleWeighted"];
[&](){[&](){json_value=member.textureSampleWeighted;}();}();
auto& json_value=json["textureBoxFilter"];
[&](){[&](){json_value=member.textureBoxFilter;}();}();
auto& json_value=json["textureBlockMatch"];
[&](){[&](){json_value=member.textureBlockMatch;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageProcessingFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["textureSampleWeighted"];
[&](){[&](){member.textureSampleWeighted=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["textureBoxFilter"];
[&](){[&](){member.textureBoxFilter=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["textureBlockMatch"];
[&](){[&](){member.textureBlockMatch=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageProcessingFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageProcessingFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageProcessingPropertiesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxWeightFilterPhases"];
[&](){json_value=member.maxWeightFilterPhases;}();
auto& json_value=json["maxWeightFilterDimension"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxWeightFilterDimension);
            }();
auto& json_value=json["maxBlockMatchRegion"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxBlockMatchRegion);
            }();
auto& json_value=json["maxBoxFilterBlockSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxBoxFilterBlockSize);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageProcessingPropertiesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxWeightFilterPhases"];
[&](){member.maxWeightFilterPhases=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxWeightFilterDimension"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxWeightFilterDimension);
            }();
auto& json_value=json["maxBlockMatchRegion"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxBlockMatchRegion);
            }();
auto& json_value=json["maxBoxFilterBlockSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxBoxFilterBlockSize);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageProcessingPropertiesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageProcessingPropertiesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceTilePropertiesFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["tileProperties"];
[&](){[&](){json_value=member.tileProperties;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceTilePropertiesFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["tileProperties"];
[&](){[&](){member.tileProperties=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceTilePropertiesFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceTilePropertiesFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkTilePropertiesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["tileSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.tileSize);
            }();
auto& json_value=json["apronSize"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.apronSize);
            }();
auto& json_value=json["origin"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.origin);
            }();
}
void deserialize_struct(object& json, VkTilePropertiesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["tileSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.tileSize);
            }();
auto& json_value=json["apronSize"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.apronSize);
            }();
auto& json_value=json["origin"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.origin);
            }();
}

    void serialize_pUserData(object& json, VkTilePropertiesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkTilePropertiesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceAmigoProfilingFeaturesSEC& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["amigoProfiling"];
[&](){[&](){json_value=member.amigoProfiling;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceAmigoProfilingFeaturesSEC& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["amigoProfiling"];
[&](){[&](){member.amigoProfiling=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceAmigoProfilingFeaturesSEC& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceAmigoProfilingFeaturesSEC& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkAmigoProfilingSubmitInfoSEC& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["firstDrawTimestamp"];
[&](){json_value=member.firstDrawTimestamp;}();
auto& json_value=json["swapBufferTimestamp"];
[&](){json_value=member.swapBufferTimestamp;}();
}
void deserialize_struct(object& json, VkAmigoProfilingSubmitInfoSEC& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["firstDrawTimestamp"];
[&](){member.firstDrawTimestamp=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["swapBufferTimestamp"];
[&](){member.swapBufferTimestamp=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkAmigoProfilingSubmitInfoSEC& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkAmigoProfilingSubmitInfoSEC& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["attachmentFeedbackLoopLayout"];
[&](){[&](){json_value=member.attachmentFeedbackLoopLayout;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["attachmentFeedbackLoopLayout"];
[&](){[&](){member.attachmentFeedbackLoopLayout=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["depthClampZeroOne"];
[&](){[&](){json_value=member.depthClampZeroOne;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["depthClampZeroOne"];
[&](){[&](){member.depthClampZeroOne=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDepthClampZeroOneFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceAddressBindingReportFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["reportAddressBinding"];
[&](){[&](){json_value=member.reportAddressBinding;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceAddressBindingReportFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["reportAddressBinding"];
[&](){[&](){member.reportAddressBinding=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceAddressBindingReportFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceAddressBindingReportFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceAddressBindingCallbackDataEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["baseAddress"];
[&](){[&](){json_value=member.baseAddress;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
auto& json_value=json["bindingType"];
[&](){[&](){[&](){json_value=member.bindingType;}();}();}();
}
void deserialize_struct(object& json, VkDeviceAddressBindingCallbackDataEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkDeviceAddressBindingFlagsEXT temp_teRuuSx[&](){temp_teRuuSx=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDeviceAddressBindingFlagsEXT)temp_teRuuSx;}();}();
auto& json_value=json["baseAddress"];
[&](){[&](){member.baseAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bindingType"];
[&](){[&](){VkDeviceAddressBindingTypeEXT temp_sYhdulm[&](){temp_sYhdulm=static_cast<int>(value_to<int>(json_value));}();member.bindingType=(VkDeviceAddressBindingTypeEXT)temp_sYhdulm;}();}();
}

    void serialize_pUserData(object& json, VkDeviceAddressBindingCallbackDataEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceAddressBindingCallbackDataEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceOpticalFlowFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["opticalFlow"];
[&](){[&](){json_value=member.opticalFlow;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceOpticalFlowFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["opticalFlow"];
[&](){[&](){member.opticalFlow=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceOpticalFlowFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceOpticalFlowFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceOpticalFlowPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["supportedOutputGridSizes"];
[&](){[&](){[&](){json_value=member.supportedOutputGridSizes;}();}();}();
auto& json_value=json["supportedHintGridSizes"];
[&](){[&](){[&](){json_value=member.supportedHintGridSizes;}();}();}();
auto& json_value=json["hintSupported"];
[&](){[&](){json_value=member.hintSupported;}();}();
auto& json_value=json["costSupported"];
[&](){[&](){json_value=member.costSupported;}();}();
auto& json_value=json["bidirectionalFlowSupported"];
[&](){[&](){json_value=member.bidirectionalFlowSupported;}();}();
auto& json_value=json["globalFlowSupported"];
[&](){[&](){json_value=member.globalFlowSupported;}();}();
auto& json_value=json["minWidth"];
[&](){json_value=member.minWidth;}();
auto& json_value=json["minHeight"];
[&](){json_value=member.minHeight;}();
auto& json_value=json["maxWidth"];
[&](){json_value=member.maxWidth;}();
auto& json_value=json["maxHeight"];
[&](){json_value=member.maxHeight;}();
auto& json_value=json["maxNumRegionsOfInterest"];
[&](){json_value=member.maxNumRegionsOfInterest;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceOpticalFlowPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["supportedOutputGridSizes"];
[&](){[&](){VkOpticalFlowGridSizeFlagsNV temp_KPhuyCe[&](){temp_KPhuyCe=static_cast<int>(value_to<int>(json_value));}();member.supportedOutputGridSizes=(VkOpticalFlowGridSizeFlagsNV)temp_KPhuyCe;}();}();
auto& json_value=json["supportedHintGridSizes"];
[&](){[&](){VkOpticalFlowGridSizeFlagsNV temp_QFPrbpu[&](){temp_QFPrbpu=static_cast<int>(value_to<int>(json_value));}();member.supportedHintGridSizes=(VkOpticalFlowGridSizeFlagsNV)temp_QFPrbpu;}();}();
auto& json_value=json["hintSupported"];
[&](){[&](){member.hintSupported=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["costSupported"];
[&](){[&](){member.costSupported=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["bidirectionalFlowSupported"];
[&](){[&](){member.bidirectionalFlowSupported=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["globalFlowSupported"];
[&](){[&](){member.globalFlowSupported=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["minWidth"];
[&](){member.minWidth=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["minHeight"];
[&](){member.minHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxWidth"];
[&](){member.maxWidth=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxHeight"];
[&](){member.maxHeight=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["maxNumRegionsOfInterest"];
[&](){member.maxNumRegionsOfInterest=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceOpticalFlowPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceOpticalFlowPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOpticalFlowImageFormatInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["usage"];
[&](){[&](){[&](){json_value=member.usage;}();}();}();
}
void deserialize_struct(object& json, VkOpticalFlowImageFormatInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["usage"];
[&](){[&](){VkOpticalFlowUsageFlagsNV temp_INJIgCE[&](){temp_INJIgCE=static_cast<int>(value_to<int>(json_value));}();member.usage=(VkOpticalFlowUsageFlagsNV)temp_INJIgCE;}();}();
}

    void serialize_pUserData(object& json, VkOpticalFlowImageFormatInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOpticalFlowImageFormatInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOpticalFlowImageFormatPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["format"];
[&](){[&](){[&](){json_value=member.format;}();}();}();
}
void deserialize_struct(object& json, VkOpticalFlowImageFormatPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["format"];
[&](){[&](){VkFormat temp_GYuRFsH[&](){temp_GYuRFsH=static_cast<int>(value_to<int>(json_value));}();member.format=(VkFormat)temp_GYuRFsH;}();}();
}

    void serialize_pUserData(object& json, VkOpticalFlowImageFormatPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOpticalFlowImageFormatPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOpticalFlowSessionCreateInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["width"];
[&](){json_value=member.width;}();
auto& json_value=json["height"];
[&](){json_value=member.height;}();
auto& json_value=json["imageFormat"];
[&](){[&](){[&](){json_value=member.imageFormat;}();}();}();
auto& json_value=json["flowVectorFormat"];
[&](){[&](){[&](){json_value=member.flowVectorFormat;}();}();}();
auto& json_value=json["costFormat"];
[&](){[&](){[&](){json_value=member.costFormat;}();}();}();
auto& json_value=json["outputGridSize"];
[&](){[&](){[&](){json_value=member.outputGridSize;}();}();}();
auto& json_value=json["hintGridSize"];
[&](){[&](){[&](){json_value=member.hintGridSize;}();}();}();
auto& json_value=json["performanceLevel"];
[&](){[&](){[&](){json_value=member.performanceLevel;}();}();}();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
}
void deserialize_struct(object& json, VkOpticalFlowSessionCreateInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["width"];
[&](){member.width=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["height"];
[&](){member.height=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["imageFormat"];
[&](){[&](){VkFormat temp_fNWyxMX[&](){temp_fNWyxMX=static_cast<int>(value_to<int>(json_value));}();member.imageFormat=(VkFormat)temp_fNWyxMX;}();}();
auto& json_value=json["flowVectorFormat"];
[&](){[&](){VkFormat temp_uRcmvUk[&](){temp_uRcmvUk=static_cast<int>(value_to<int>(json_value));}();member.flowVectorFormat=(VkFormat)temp_uRcmvUk;}();}();
auto& json_value=json["costFormat"];
[&](){[&](){VkFormat temp_LSqDXbB[&](){temp_LSqDXbB=static_cast<int>(value_to<int>(json_value));}();member.costFormat=(VkFormat)temp_LSqDXbB;}();}();
auto& json_value=json["outputGridSize"];
[&](){[&](){VkOpticalFlowGridSizeFlagsNV temp_szCSuXp[&](){temp_szCSuXp=static_cast<int>(value_to<int>(json_value));}();member.outputGridSize=(VkOpticalFlowGridSizeFlagsNV)temp_szCSuXp;}();}();
auto& json_value=json["hintGridSize"];
[&](){[&](){VkOpticalFlowGridSizeFlagsNV temp_eqtUSfi[&](){temp_eqtUSfi=static_cast<int>(value_to<int>(json_value));}();member.hintGridSize=(VkOpticalFlowGridSizeFlagsNV)temp_eqtUSfi;}();}();
auto& json_value=json["performanceLevel"];
[&](){[&](){VkOpticalFlowPerformanceLevelNV temp_ZQkHDiG[&](){temp_ZQkHDiG=static_cast<int>(value_to<int>(json_value));}();member.performanceLevel=(VkOpticalFlowPerformanceLevelNV)temp_ZQkHDiG;}();}();
auto& json_value=json["flags"];
[&](){[&](){VkOpticalFlowSessionCreateFlagsNV temp_LfXVOQV[&](){temp_LfXVOQV=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkOpticalFlowSessionCreateFlagsNV)temp_LfXVOQV;}();}();
}

    void serialize_pUserData(object& json, VkOpticalFlowSessionCreateInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOpticalFlowSessionCreateInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOpticalFlowSessionCreatePrivateDataInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["id"];
[&](){json_value=member.id;}();
auto& json_value=json["size"];
[&](){json_value=member.size;}();
auto& json_value=json["pPrivateData"];
[&](){
            if (member.pPrivateData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pPrivateData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int apNwuhR=0; apNwuhR < strlen((char*)(member.pPrivateData))+1; apNwuhR++){
            [&](){json_value[apNwuhR]=(char*)(member.pPrivateData)[apNwuhR];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkOpticalFlowSessionCreatePrivateDataInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["id"];
[&](){member.id=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["size"];
[&](){member.size=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPrivateData"];
[&](){ void* temp_ghjOvll[&](){
            if (!json_value.as_array().size()==0){
                temp_ghjOvll=NULL;
            return; }char* temp_VqCEInF;[&](){
            if (!json_value.as_array().size()==0){
                temp_ghjOvll=NULL;
            return; }temp_ghjOvll=(char*)malloc(temp_ghjOvll.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int JoEHaqb=0; JoEHaqb < temp_ghjOvll.as_array().size();; JoEHaqb++){
            [&](){temp_ghjOvll[JoEHaqb]=static_cast<char>(value_to<int>(json_value[JoEHaqb]));}();
        }
        }();temp_ghjOvll=temp_VqCEInF;}();member.pPrivateData=temp_ghjOvll;}();
}

    void serialize_pUserData(object& json, VkOpticalFlowSessionCreatePrivateDataInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOpticalFlowSessionCreatePrivateDataInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkOpticalFlowExecuteInfoNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["regionCount"];
[&](){json_value=member.regionCount;}();
auto& json_value=json["pRegions"];
[&](){
            if (member.pRegions==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int OlhHmnZ=0; OlhHmnZ < member.regionCount; OlhHmnZ++){
            [&](){
            auto& temp=json_value[OlhHmnZ].emplace_object();
            return serialize_struct(temp, member.pRegions[OlhHmnZ]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkOpticalFlowExecuteInfoNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkOpticalFlowExecuteFlagsNV temp_TesUkyf[&](){temp_TesUkyf=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkOpticalFlowExecuteFlagsNV)temp_TesUkyf;}();}();
auto& json_value=json["regionCount"];
[&](){member.regionCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pRegions"];
[&](){ VkRect2D* temp_BHtunlS[&](){
            if (!json_value.as_array().size()==0){
                temp_BHtunlS=NULL;
            return; }temp_BHtunlS=(VkRect2D*)malloc(member.regionCount*sizeof(VkRect2D));
        auto& arr=json_value.as_array();
        for(int JAOechs=0; JAOechs < member.regionCount; JAOechs++){
            [&](){
            auto& temp=json_value[JAOechs].as_object();
            deserialize_struct(temp,temp_BHtunlS[JAOechs]);
            }();
        }
        }();member.pRegions=temp_BHtunlS;}();
}

    void serialize_pUserData(object& json, VkOpticalFlowExecuteInfoNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkOpticalFlowExecuteInfoNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFaultFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["deviceFault"];
[&](){[&](){json_value=member.deviceFault;}();}();
auto& json_value=json["deviceFaultVendorBinary"];
[&](){[&](){json_value=member.deviceFaultVendorBinary;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFaultFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["deviceFault"];
[&](){[&](){member.deviceFault=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["deviceFaultVendorBinary"];
[&](){[&](){member.deviceFaultVendorBinary=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFaultFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFaultFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceFaultAddressInfoEXT& member){
        
    
auto& json_value=json["addressType"];
[&](){[&](){[&](){json_value=member.addressType;}();}();}();
auto& json_value=json["reportedAddress"];
[&](){[&](){json_value=member.reportedAddress;}();}();
auto& json_value=json["addressPrecision"];
[&](){[&](){json_value=member.addressPrecision;}();}();
}
void deserialize_struct(object& json, VkDeviceFaultAddressInfoEXT& member){
auto& json_value=json["addressType"];
[&](){[&](){VkDeviceFaultAddressTypeEXT temp_pnrkyQO[&](){temp_pnrkyQO=static_cast<int>(value_to<int>(json_value));}();member.addressType=(VkDeviceFaultAddressTypeEXT)temp_pnrkyQO;}();}();
auto& json_value=json["reportedAddress"];
[&](){[&](){member.reportedAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["addressPrecision"];
[&](){[&](){member.addressPrecision=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDeviceFaultAddressInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceFaultAddressInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceFaultVendorInfoEXT& member){
        
    
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
auto& json_value=json["vendorFaultCode"];
[&](){json_value=member.vendorFaultCode;}();
auto& json_value=json["vendorFaultData"];
[&](){json_value=member.vendorFaultData;}();
}
void deserialize_struct(object& json, VkDeviceFaultVendorInfoEXT& member){
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
auto& json_value=json["vendorFaultCode"];
[&](){member.vendorFaultCode=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["vendorFaultData"];
[&](){member.vendorFaultData=static_cast<uint64_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDeviceFaultVendorInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceFaultVendorInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceFaultCountsEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["addressInfoCount"];
[&](){json_value=member.addressInfoCount;}();
auto& json_value=json["vendorInfoCount"];
[&](){json_value=member.vendorInfoCount;}();
auto& json_value=json["vendorBinarySize"];
[&](){[&](){json_value=member.vendorBinarySize;}();}();
}
void deserialize_struct(object& json, VkDeviceFaultCountsEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["addressInfoCount"];
[&](){member.addressInfoCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vendorInfoCount"];
[&](){member.vendorInfoCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["vendorBinarySize"];
[&](){[&](){member.vendorBinarySize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDeviceFaultCountsEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceFaultCountsEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceFaultInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){json_value[oakWTIB]=member.description[oakWTIB];}();
        }
        }();
auto& json_value=json["pAddressInfos"];
[&](){
            if (member.pAddressInfos==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int QjEnqIT=0; QjEnqIT < 1; QjEnqIT++){
            [&](){
            auto& temp=json_value[QjEnqIT].emplace_object();
            return serialize_struct(temp, member.pAddressInfos[QjEnqIT]);
            }();
        }
        }();
auto& json_value=json["pVendorInfos"];
[&](){
            if (member.pVendorInfos==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int fZmZSvT=0; fZmZSvT < 1; fZmZSvT++){
            [&](){
            auto& temp=json_value[fZmZSvT].emplace_object();
            return serialize_struct(temp, member.pVendorInfos[fZmZSvT]);
            }();
        }
        }();
auto& json_value=json["pVendorBinaryData"];
[&](){
            if (member.pVendorBinaryData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pVendorBinaryData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uBxoxYh=0; uBxoxYh < strlen((char*)(member.pVendorBinaryData))+1; uBxoxYh++){
            [&](){json_value[uBxoxYh]=(char*)(member.pVendorBinaryData)[uBxoxYh];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkDeviceFaultInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["description"];
[&](){
        auto& arr=json_value.as_array();
        for(int oakWTIB=0; oakWTIB < VK_MAX_DESCRIPTION_SIZE; oakWTIB++){
            [&](){member.description[oakWTIB]=static_cast<char>(value_to<int>(json_value[oakWTIB]));}();
        }
        }();
auto& json_value=json["pAddressInfos"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pAddressInfos=NULL;
            return; }member.pAddressInfos=(VkDeviceFaultAddressInfoEXT*)malloc(1*sizeof(VkDeviceFaultAddressInfoEXT));
        auto& arr=json_value.as_array();
        for(int QjEnqIT=0; QjEnqIT < 1; QjEnqIT++){
            [&](){
            auto& temp=json_value[QjEnqIT].as_object();
            deserialize_struct(temp,member.pAddressInfos[QjEnqIT]);
            }();
        }
        }();
auto& json_value=json["pVendorInfos"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pVendorInfos=NULL;
            return; }member.pVendorInfos=(VkDeviceFaultVendorInfoEXT*)malloc(1*sizeof(VkDeviceFaultVendorInfoEXT));
        auto& arr=json_value.as_array();
        for(int fZmZSvT=0; fZmZSvT < 1; fZmZSvT++){
            [&](){
            auto& temp=json_value[fZmZSvT].as_object();
            deserialize_struct(temp,member.pVendorInfos[fZmZSvT]);
            }();
        }
        }();
auto& json_value=json["pVendorBinaryData"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pVendorBinaryData=NULL;
            return; }char* temp_gEZGist;[&](){
            if (!json_value.as_array().size()==0){
                member.pVendorBinaryData=NULL;
            return; }member.pVendorBinaryData=(char*)malloc(member.pVendorBinaryData.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int uBxoxYh=0; uBxoxYh < member.pVendorBinaryData.as_array().size();; uBxoxYh++){
            [&](){member.pVendorBinaryData[uBxoxYh]=static_cast<char>(value_to<int>(json_value[uBxoxYh]));}();
        }
        }();member.pVendorBinaryData=temp_gEZGist;}();
}

    void serialize_pUserData(object& json, VkDeviceFaultInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceFaultInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceFaultVendorBinaryHeaderVersionOneEXT& member){
        
    
auto& json_value=json["headerSize"];
[&](){json_value=member.headerSize;}();
auto& json_value=json["headerVersion"];
[&](){[&](){[&](){json_value=member.headerVersion;}();}();}();
auto& json_value=json["vendorID"];
[&](){json_value=member.vendorID;}();
auto& json_value=json["deviceID"];
[&](){json_value=member.deviceID;}();
auto& json_value=json["driverVersion"];
[&](){json_value=member.driverVersion;}();
auto& json_value=json["pipelineCacheUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){json_value[pKnzMjr]=member.pipelineCacheUUID[pKnzMjr];}();
        }
        }();
auto& json_value=json["applicationNameOffset"];
[&](){json_value=member.applicationNameOffset;}();
auto& json_value=json["applicationVersion"];
[&](){json_value=member.applicationVersion;}();
auto& json_value=json["engineNameOffset"];
[&](){json_value=member.engineNameOffset;}();
auto& json_value=json["engineVersion"];
[&](){json_value=member.engineVersion;}();
auto& json_value=json["apiVersion"];
[&](){json_value=member.apiVersion;}();
}
void deserialize_struct(object& json, VkDeviceFaultVendorBinaryHeaderVersionOneEXT& member){
auto& json_value=json["headerSize"];
[&](){member.headerSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["headerVersion"];
[&](){[&](){VkDeviceFaultVendorBinaryHeaderVersionEXT temp_buOtioo[&](){temp_buOtioo=static_cast<int>(value_to<int>(json_value));}();member.headerVersion=(VkDeviceFaultVendorBinaryHeaderVersionEXT)temp_buOtioo;}();}();
auto& json_value=json["vendorID"];
[&](){member.vendorID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["deviceID"];
[&](){member.deviceID=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["driverVersion"];
[&](){member.driverVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pipelineCacheUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int pKnzMjr=0; pKnzMjr < VK_UUID_SIZE; pKnzMjr++){
            [&](){member.pipelineCacheUUID[pKnzMjr]=static_cast<uint8_t>(value_to<int>(json_value[pKnzMjr]));}();
        }
        }();
auto& json_value=json["applicationNameOffset"];
[&](){member.applicationNameOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["applicationVersion"];
[&](){member.applicationVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["engineNameOffset"];
[&](){member.engineNameOffset=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["engineVersion"];
[&](){member.engineVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["apiVersion"];
[&](){member.apiVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDeviceFaultVendorBinaryHeaderVersionOneEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceFaultVendorBinaryHeaderVersionOneEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pipelineLibraryGroupHandles"];
[&](){[&](){json_value=member.pipelineLibraryGroupHandles;}();}();
}
void deserialize_struct(object& json, VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pipelineLibraryGroupHandles"];
[&](){[&](){member.pipelineLibraryGroupHandles=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDepthBiasInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["depthBiasConstantFactor"];
[&](){json_value=member.depthBiasConstantFactor;}();
auto& json_value=json["depthBiasClamp"];
[&](){json_value=member.depthBiasClamp;}();
auto& json_value=json["depthBiasSlopeFactor"];
[&](){json_value=member.depthBiasSlopeFactor;}();
}
void deserialize_struct(object& json, VkDepthBiasInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["depthBiasConstantFactor"];
[&](){member.depthBiasConstantFactor=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["depthBiasClamp"];
[&](){member.depthBiasClamp=static_cast<float>(value_to<int>(json_value));}();
auto& json_value=json["depthBiasSlopeFactor"];
[&](){member.depthBiasSlopeFactor=static_cast<float>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkDepthBiasInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDepthBiasInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDepthBiasRepresentationInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["depthBiasRepresentation"];
[&](){[&](){[&](){json_value=member.depthBiasRepresentation;}();}();}();
auto& json_value=json["depthBiasExact"];
[&](){[&](){json_value=member.depthBiasExact;}();}();
}
void deserialize_struct(object& json, VkDepthBiasRepresentationInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["depthBiasRepresentation"];
[&](){[&](){VkDepthBiasRepresentationEXT temp_exnxPxv[&](){temp_exnxPxv=static_cast<int>(value_to<int>(json_value));}();member.depthBiasRepresentation=(VkDepthBiasRepresentationEXT)temp_exnxPxv;}();}();
auto& json_value=json["depthBiasExact"];
[&](){[&](){member.depthBiasExact=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkDepthBiasRepresentationInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDepthBiasRepresentationInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDecompressMemoryRegionNV& member){
        
    
auto& json_value=json["srcAddress"];
[&](){[&](){json_value=member.srcAddress;}();}();
auto& json_value=json["dstAddress"];
[&](){[&](){json_value=member.dstAddress;}();}();
auto& json_value=json["compressedSize"];
[&](){[&](){json_value=member.compressedSize;}();}();
auto& json_value=json["decompressedSize"];
[&](){[&](){json_value=member.decompressedSize;}();}();
auto& json_value=json["decompressionMethod"];
[&](){[&](){[&](){json_value=member.decompressionMethod;}();}();}();
}
void deserialize_struct(object& json, VkDecompressMemoryRegionNV& member){
auto& json_value=json["srcAddress"];
[&](){[&](){member.srcAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["dstAddress"];
[&](){[&](){member.dstAddress=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["compressedSize"];
[&](){[&](){member.compressedSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["decompressedSize"];
[&](){[&](){member.decompressedSize=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["decompressionMethod"];
[&](){[&](){VkMemoryDecompressionMethodFlagsNV temp_iQqVjvP[&](){temp_iQqVjvP=static_cast<int>(value_to<int>(json_value));}();member.decompressionMethod=(VkMemoryDecompressionMethodFlagsNV)temp_iQqVjvP;}();}();
}

    void serialize_pUserData(object& json, VkDecompressMemoryRegionNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDecompressMemoryRegionNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderCoreMask"];
[&](){json_value=member.shaderCoreMask;}();
auto& json_value=json["shaderCoreCount"];
[&](){json_value=member.shaderCoreCount;}();
auto& json_value=json["shaderWarpsPerCore"];
[&](){json_value=member.shaderWarpsPerCore;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderCoreMask"];
[&](){member.shaderCoreMask=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderCoreCount"];
[&](){member.shaderCoreCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["shaderWarpsPerCore"];
[&](){member.shaderWarpsPerCore=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderCoreBuiltins"];
[&](){[&](){json_value=member.shaderCoreBuiltins;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderCoreBuiltins"];
[&](){[&](){member.shaderCoreBuiltins=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkFrameBoundaryEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["frameID"];
[&](){json_value=member.frameID;}();
auto& json_value=json["imageCount"];
[&](){json_value=member.imageCount;}();
auto& json_value=json["pImages"];
[&](){
            if (member.pImages==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int bDkiYkB=0; bDkiYkB < member.imageCount; bDkiYkB++){
            [&](){serialize_handle(json_value[bDkiYkB],member.pImages[bDkiYkB]);}();
        }
        }();
auto& json_value=json["bufferCount"];
[&](){json_value=member.bufferCount;}();
auto& json_value=json["pBuffers"];
[&](){
            if (member.pBuffers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int dnzUVcs=0; dnzUVcs < member.bufferCount; dnzUVcs++){
            [&](){serialize_handle(json_value[dnzUVcs],member.pBuffers[dnzUVcs]);}();
        }
        }();
auto& json_value=json["tagName"];
[&](){json_value=member.tagName;}();
auto& json_value=json["tagSize"];
[&](){json_value=member.tagSize;}();
auto& json_value=json["pTag"];
[&](){
            if (member.pTag==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pTag)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int RyqFIjd=0; RyqFIjd < strlen((char*)(member.pTag))+1; RyqFIjd++){
            [&](){json_value[RyqFIjd]=(char*)(member.pTag)[RyqFIjd];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkFrameBoundaryEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkFrameBoundaryFlagsEXT temp_UhTSIgb[&](){temp_UhTSIgb=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkFrameBoundaryFlagsEXT)temp_UhTSIgb;}();}();
auto& json_value=json["frameID"];
[&](){member.frameID=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["imageCount"];
[&](){member.imageCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pImages"];
[&](){ VkImage* temp_KHWqKrF[&](){
            if (!json_value.as_array().size()==0){
                temp_KHWqKrF=NULL;
            return; }temp_KHWqKrF=(VkImage*)malloc(member.imageCount*sizeof(VkImage));
        auto& arr=json_value.as_array();
        for(int FpSGybG=0; FpSGybG < member.imageCount; FpSGybG++){
            [&](){deserialize_handle(json_value[FpSGybG], temp_KHWqKrF[FpSGybG]);}();
        }
        }();member.pImages=temp_KHWqKrF;}();
auto& json_value=json["bufferCount"];
[&](){member.bufferCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pBuffers"];
[&](){ VkBuffer* temp_XBgmxOW[&](){
            if (!json_value.as_array().size()==0){
                temp_XBgmxOW=NULL;
            return; }temp_XBgmxOW=(VkBuffer*)malloc(member.bufferCount*sizeof(VkBuffer));
        auto& arr=json_value.as_array();
        for(int bCTiDDG=0; bCTiDDG < member.bufferCount; bCTiDDG++){
            [&](){deserialize_handle(json_value[bCTiDDG], temp_XBgmxOW[bCTiDDG]);}();
        }
        }();member.pBuffers=temp_XBgmxOW;}();
auto& json_value=json["tagName"];
[&](){member.tagName=static_cast<uint64_t>(value_to<int>(json_value));}();
auto& json_value=json["tagSize"];
[&](){member.tagSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pTag"];
[&](){ void* temp_xlgiUqt[&](){
            if (!json_value.as_array().size()==0){
                temp_xlgiUqt=NULL;
            return; }char* temp_nJcpLDu;[&](){
            if (!json_value.as_array().size()==0){
                temp_xlgiUqt=NULL;
            return; }temp_xlgiUqt=(char*)malloc(temp_xlgiUqt.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int lxDYfsn=0; lxDYfsn < temp_xlgiUqt.as_array().size();; lxDYfsn++){
            [&](){temp_xlgiUqt[lxDYfsn]=static_cast<char>(value_to<int>(json_value[lxDYfsn]));}();
        }
        }();temp_xlgiUqt=temp_nJcpLDu;}();member.pTag=temp_xlgiUqt;}();
}

    void serialize_pUserData(object& json, VkFrameBoundaryEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkFrameBoundaryEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceFrameBoundaryFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["frameBoundary"];
[&](){[&](){json_value=member.frameBoundary;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceFrameBoundaryFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["frameBoundary"];
[&](){[&](){member.frameBoundary=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceFrameBoundaryFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceFrameBoundaryFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["dynamicRenderingUnusedAttachments"];
[&](){[&](){json_value=member.dynamicRenderingUnusedAttachments;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["dynamicRenderingUnusedAttachments"];
[&](){[&](){member.dynamicRenderingUnusedAttachments=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfacePresentModeEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentMode"];
[&](){[&](){[&](){json_value=member.presentMode;}();}();}();
}
void deserialize_struct(object& json, VkSurfacePresentModeEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentMode"];
[&](){[&](){VkPresentModeKHR temp_hsEhypt[&](){temp_hsEhypt=static_cast<int>(value_to<int>(json_value));}();member.presentMode=(VkPresentModeKHR)temp_hsEhypt;}();}();
}

    void serialize_pUserData(object& json, VkSurfacePresentModeEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfacePresentModeEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfacePresentScalingCapabilitiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["supportedPresentScaling"];
[&](){[&](){[&](){json_value=member.supportedPresentScaling;}();}();}();
auto& json_value=json["supportedPresentGravityX"];
[&](){[&](){[&](){json_value=member.supportedPresentGravityX;}();}();}();
auto& json_value=json["supportedPresentGravityY"];
[&](){[&](){[&](){json_value=member.supportedPresentGravityY;}();}();}();
auto& json_value=json["minScaledImageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.minScaledImageExtent);
            }();
auto& json_value=json["maxScaledImageExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxScaledImageExtent);
            }();
}
void deserialize_struct(object& json, VkSurfacePresentScalingCapabilitiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["supportedPresentScaling"];
[&](){[&](){VkPresentScalingFlagsEXT temp_YTKtESq[&](){temp_YTKtESq=static_cast<int>(value_to<int>(json_value));}();member.supportedPresentScaling=(VkPresentScalingFlagsEXT)temp_YTKtESq;}();}();
auto& json_value=json["supportedPresentGravityX"];
[&](){[&](){VkPresentGravityFlagsEXT temp_IfhjflT[&](){temp_IfhjflT=static_cast<int>(value_to<int>(json_value));}();member.supportedPresentGravityX=(VkPresentGravityFlagsEXT)temp_IfhjflT;}();}();
auto& json_value=json["supportedPresentGravityY"];
[&](){[&](){VkPresentGravityFlagsEXT temp_AhMfHfV[&](){temp_AhMfHfV=static_cast<int>(value_to<int>(json_value));}();member.supportedPresentGravityY=(VkPresentGravityFlagsEXT)temp_AhMfHfV;}();}();
auto& json_value=json["minScaledImageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.minScaledImageExtent);
            }();
auto& json_value=json["maxScaledImageExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxScaledImageExtent);
            }();
}

    void serialize_pUserData(object& json, VkSurfacePresentScalingCapabilitiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfacePresentScalingCapabilitiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSurfacePresentModeCompatibilityEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentModeCount"];
[&](){json_value=member.presentModeCount;}();
auto& json_value=json["pPresentModes"];
[&](){
            if (member.pPresentModes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int GuPZwgH=0; GuPZwgH < member.presentModeCount; GuPZwgH++){
            [&](){[&](){[&](){json_value[GuPZwgH]=member.pPresentModes[GuPZwgH];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkSurfacePresentModeCompatibilityEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["presentModeCount"];
[&](){member.presentModeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPresentModes"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pPresentModes=NULL;
            return; }member.pPresentModes=(VkPresentModeKHR*)malloc(member.presentModeCount*sizeof(VkPresentModeKHR));
        auto& arr=json_value.as_array();
        for(int GuPZwgH=0; GuPZwgH < member.presentModeCount; GuPZwgH++){
            [&](){[&](){VkPresentModeKHR* temp_qpbHNNB[&](){temp_qpbHNNB=static_cast<int>(value_to<int>(json_value[GuPZwgH]));}();member.pPresentModes[GuPZwgH]=(VkPresentModeKHR)temp_qpbHNNB;}();}();
        }
        }();
}

    void serialize_pUserData(object& json, VkSurfacePresentModeCompatibilityEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSurfacePresentModeCompatibilityEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchainMaintenance1"];
[&](){[&](){json_value=member.swapchainMaintenance1;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["swapchainMaintenance1"];
[&](){[&](){member.swapchainMaintenance1=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainPresentFenceInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchainCount"];
[&](){json_value=member.swapchainCount;}();
auto& json_value=json["pFences"];
[&](){
            if (member.pFences==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int ocOiHLH=0; ocOiHLH < member.swapchainCount; ocOiHLH++){
            [&](){serialize_handle(json_value[ocOiHLH],member.pFences[ocOiHLH]);}();
        }
        }();
}
void deserialize_struct(object& json, VkSwapchainPresentFenceInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchainCount"];
[&](){member.swapchainCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pFences"];
[&](){ VkFence* temp_SBDRYwQ[&](){
            if (!json_value.as_array().size()==0){
                temp_SBDRYwQ=NULL;
            return; }temp_SBDRYwQ=(VkFence*)malloc(member.swapchainCount*sizeof(VkFence));
        auto& arr=json_value.as_array();
        for(int iQgYhvq=0; iQgYhvq < member.swapchainCount; iQgYhvq++){
            [&](){deserialize_handle(json_value[iQgYhvq], temp_SBDRYwQ[iQgYhvq]);}();
        }
        }();member.pFences=temp_SBDRYwQ;}();
}

    void serialize_pUserData(object& json, VkSwapchainPresentFenceInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainPresentFenceInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainPresentModesCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["presentModeCount"];
[&](){json_value=member.presentModeCount;}();
auto& json_value=json["pPresentModes"];
[&](){
            if (member.pPresentModes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uqvLxPC=0; uqvLxPC < member.presentModeCount; uqvLxPC++){
            [&](){[&](){[&](){json_value[uqvLxPC]=member.pPresentModes[uqvLxPC];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkSwapchainPresentModesCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["presentModeCount"];
[&](){member.presentModeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPresentModes"];
[&](){ VkPresentModeKHR* temp_tjFYuol[&](){
            if (!json_value.as_array().size()==0){
                temp_tjFYuol=NULL;
            return; }temp_tjFYuol=(VkPresentModeKHR*)malloc(member.presentModeCount*sizeof(VkPresentModeKHR));
        auto& arr=json_value.as_array();
        for(int nDYklWI=0; nDYklWI < member.presentModeCount; nDYklWI++){
            [&](){[&](){const VkPresentModeKHR* temp_iNxWJAV[&](){temp_iNxWJAV=static_cast<int>(value_to<int>(json_value[nDYklWI]));}();temp_tjFYuol[nDYklWI]=(VkPresentModeKHR)temp_iNxWJAV;}();}();
        }
        }();member.pPresentModes=temp_tjFYuol;}();
}

    void serialize_pUserData(object& json, VkSwapchainPresentModesCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainPresentModesCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainPresentModeInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchainCount"];
[&](){json_value=member.swapchainCount;}();
auto& json_value=json["pPresentModes"];
[&](){
            if (member.pPresentModes==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uqvLxPC=0; uqvLxPC < member.swapchainCount; uqvLxPC++){
            [&](){[&](){[&](){json_value[uqvLxPC]=member.pPresentModes[uqvLxPC];}();}();}();
        }
        }();
}
void deserialize_struct(object& json, VkSwapchainPresentModeInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchainCount"];
[&](){member.swapchainCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPresentModes"];
[&](){ VkPresentModeKHR* temp_mVAsEVO[&](){
            if (!json_value.as_array().size()==0){
                temp_mVAsEVO=NULL;
            return; }temp_mVAsEVO=(VkPresentModeKHR*)malloc(member.swapchainCount*sizeof(VkPresentModeKHR));
        auto& arr=json_value.as_array();
        for(int nDYklWI=0; nDYklWI < member.swapchainCount; nDYklWI++){
            [&](){[&](){const VkPresentModeKHR* temp_iNxWJAV[&](){temp_iNxWJAV=static_cast<int>(value_to<int>(json_value[nDYklWI]));}();temp_mVAsEVO[nDYklWI]=(VkPresentModeKHR)temp_iNxWJAV;}();}();
        }
        }();member.pPresentModes=temp_mVAsEVO;}();
}

    void serialize_pUserData(object& json, VkSwapchainPresentModeInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainPresentModeInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSwapchainPresentScalingCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["scalingBehavior"];
[&](){[&](){[&](){json_value=member.scalingBehavior;}();}();}();
auto& json_value=json["presentGravityX"];
[&](){[&](){[&](){json_value=member.presentGravityX;}();}();}();
auto& json_value=json["presentGravityY"];
[&](){[&](){[&](){json_value=member.presentGravityY;}();}();}();
}
void deserialize_struct(object& json, VkSwapchainPresentScalingCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["scalingBehavior"];
[&](){[&](){VkPresentScalingFlagsEXT temp_jdTJrqC[&](){temp_jdTJrqC=static_cast<int>(value_to<int>(json_value));}();member.scalingBehavior=(VkPresentScalingFlagsEXT)temp_jdTJrqC;}();}();
auto& json_value=json["presentGravityX"];
[&](){[&](){VkPresentGravityFlagsEXT temp_OepEiPb[&](){temp_OepEiPb=static_cast<int>(value_to<int>(json_value));}();member.presentGravityX=(VkPresentGravityFlagsEXT)temp_OepEiPb;}();}();
auto& json_value=json["presentGravityY"];
[&](){[&](){VkPresentGravityFlagsEXT temp_HsWJFon[&](){temp_HsWJFon=static_cast<int>(value_to<int>(json_value));}();member.presentGravityY=(VkPresentGravityFlagsEXT)temp_HsWJFon;}();}();
}

    void serialize_pUserData(object& json, VkSwapchainPresentScalingCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSwapchainPresentScalingCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkReleaseSwapchainImagesInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["swapchain"];
[&](){serialize_handle(json_value,member.swapchain);}();
auto& json_value=json["imageIndexCount"];
[&](){json_value=member.imageIndexCount;}();
auto& json_value=json["pImageIndices"];
[&](){
            if (member.pImageIndices==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uFkTWYN=0; uFkTWYN < member.imageIndexCount; uFkTWYN++){
            [&](){json_value[uFkTWYN]=member.pImageIndices[uFkTWYN];}();
        }
        }();
}
void deserialize_struct(object& json, VkReleaseSwapchainImagesInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["swapchain"];
[&](){deserialize_handle(json_value, member.swapchain);}();
auto& json_value=json["imageIndexCount"];
[&](){member.imageIndexCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pImageIndices"];
[&](){ uint32_t* temp_XGqEbbp[&](){
            if (!json_value.as_array().size()==0){
                temp_XGqEbbp=NULL;
            return; }temp_XGqEbbp=(uint32_t*)malloc(member.imageIndexCount*sizeof(uint32_t));
        auto& arr=json_value.as_array();
        for(int daliJoD=0; daliJoD < member.imageIndexCount; daliJoD++){
            [&](){temp_XGqEbbp[daliJoD]=static_cast<uint32_t>(value_to<int>(json_value[daliJoD]));}();
        }
        }();member.pImageIndices=temp_XGqEbbp;}();
}

    void serialize_pUserData(object& json, VkReleaseSwapchainImagesInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkReleaseSwapchainImagesInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDepthBiasControlFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["depthBiasControl"];
[&](){[&](){json_value=member.depthBiasControl;}();}();
auto& json_value=json["leastRepresentableValueForceUnormRepresentation"];
[&](){[&](){json_value=member.leastRepresentableValueForceUnormRepresentation;}();}();
auto& json_value=json["floatRepresentation"];
[&](){[&](){json_value=member.floatRepresentation;}();}();
auto& json_value=json["depthBiasExact"];
[&](){[&](){json_value=member.depthBiasExact;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDepthBiasControlFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["depthBiasControl"];
[&](){[&](){member.depthBiasControl=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["leastRepresentableValueForceUnormRepresentation"];
[&](){[&](){member.leastRepresentableValueForceUnormRepresentation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["floatRepresentation"];
[&](){[&](){member.floatRepresentation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["depthBiasExact"];
[&](){[&](){member.depthBiasExact=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDepthBiasControlFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDepthBiasControlFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rayTracingInvocationReorder"];
[&](){[&](){json_value=member.rayTracingInvocationReorder;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rayTracingInvocationReorder"];
[&](){[&](){member.rayTracingInvocationReorder=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rayTracingInvocationReorderReorderingHint"];
[&](){[&](){[&](){json_value=member.rayTracingInvocationReorderReorderingHint;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rayTracingInvocationReorderReorderingHint"];
[&](){[&](){VkRayTracingInvocationReorderModeNV temp_iEQEUgz[&](){temp_iEQEUgz=static_cast<int>(value_to<int>(json_value));}();member.rayTracingInvocationReorderReorderingHint=(VkRayTracingInvocationReorderModeNV)temp_iEQEUgz;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDirectDriverLoadingInfoLUNARG& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["pfnGetInstanceProcAddr"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_funcpointer(temp, member.pfnGetInstanceProcAddr);
            }();
}
void deserialize_struct(object& json, VkDirectDriverLoadingInfoLUNARG& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){VkDirectDriverLoadingFlagsLUNARG temp_MncWjCD[&](){temp_MncWjCD=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkDirectDriverLoadingFlagsLUNARG)temp_MncWjCD;}();}();
auto& json_value=json["pfnGetInstanceProcAddr"];
[&](){
#ifndef CLIENT
            auto& temp=json_value.as_object();
            deserialize_funcpointer(temp,member.pfnGetInstanceProcAddr);
            #endif
}();
}

    void serialize_pUserData(object& json, VkDirectDriverLoadingInfoLUNARG& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
json["PFN_vkGetInstanceProcAddrLUNARG"]=(uintptr_t)(member.pfnGetInstanceProcAddr);
}

    void deserialize_pUserData(object& json, VkDirectDriverLoadingInfoLUNARG& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();
pUserData.pfnGetInstanceProcAddr=(PFN_vkGetInstanceProcAddrLUNARG)(value_to<uintptr_t>(json["PFN_vkGetInstanceProcAddrLUNARG"]));

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDirectDriverLoadingListLUNARG& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["mode"];
[&](){[&](){[&](){json_value=member.mode;}();}();}();
auto& json_value=json["driverCount"];
[&](){json_value=member.driverCount;}();
auto& json_value=json["pDrivers"];
[&](){
            if (member.pDrivers==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int QRMHLjh=0; QRMHLjh < member.driverCount; QRMHLjh++){
            [&](){
            auto& temp=json_value[QRMHLjh].emplace_object();
            return serialize_struct(temp, member.pDrivers[QRMHLjh]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDirectDriverLoadingListLUNARG& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["mode"];
[&](){[&](){VkDirectDriverLoadingModeLUNARG temp_lnbEfkk[&](){temp_lnbEfkk=static_cast<int>(value_to<int>(json_value));}();member.mode=(VkDirectDriverLoadingModeLUNARG)temp_lnbEfkk;}();}();
auto& json_value=json["driverCount"];
[&](){member.driverCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pDrivers"];
[&](){ VkDirectDriverLoadingInfoLUNARG* temp_AlNMFhd[&](){
            if (!json_value.as_array().size()==0){
                temp_AlNMFhd=NULL;
            return; }temp_AlNMFhd=(VkDirectDriverLoadingInfoLUNARG*)malloc(member.driverCount*sizeof(VkDirectDriverLoadingInfoLUNARG));
        auto& arr=json_value.as_array();
        for(int auWfUrZ=0; auWfUrZ < member.driverCount; auWfUrZ++){
            [&](){
            auto& temp=json_value[auWfUrZ].as_object();
            deserialize_struct(temp,temp_AlNMFhd[auWfUrZ]);
            }();
        }
        }();member.pDrivers=temp_AlNMFhd;}();
}

    void serialize_pUserData(object& json, VkDirectDriverLoadingListLUNARG& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDirectDriverLoadingListLUNARG& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["multiviewPerViewViewports"];
[&](){[&](){json_value=member.multiviewPerViewViewports;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["multiviewPerViewViewports"];
[&](){[&](){member.multiviewPerViewViewports=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["rayTracingPositionFetch"];
[&](){[&](){json_value=member.rayTracingPositionFetch;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["rayTracingPositionFetch"];
[&](){[&](){member.rayTracingPositionFetch=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkDeviceImageSubresourceInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pCreateInfo"];
[&](){
            if (member.pCreateInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int pUPULkH=0; pUPULkH < 1; pUPULkH++){
            [&](){
            auto& temp=json_value[pUPULkH].emplace_object();
            return serialize_struct(temp, member.pCreateInfo[pUPULkH]);
            }();
        }
        }();
auto& json_value=json["pSubresource"];
[&](){
            if (member.pSubresource==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int iRoNHuq=0; iRoNHuq < 1; iRoNHuq++){
            [&](){
            auto& temp=json_value[iRoNHuq].emplace_object();
            return serialize_struct(temp, member.pSubresource[iRoNHuq]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkDeviceImageSubresourceInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pCreateInfo"];
[&](){ VkImageCreateInfo* temp_GaGgIvU[&](){
            if (!json_value.as_array().size()==0){
                temp_GaGgIvU=NULL;
            return; }temp_GaGgIvU=(VkImageCreateInfo*)malloc(1*sizeof(VkImageCreateInfo));
        auto& arr=json_value.as_array();
        for(int OCzXYbh=0; OCzXYbh < 1; OCzXYbh++){
            [&](){
            auto& temp=json_value[OCzXYbh].as_object();
            deserialize_struct(temp,temp_GaGgIvU[OCzXYbh]);
            }();
        }
        }();member.pCreateInfo=temp_GaGgIvU;}();
auto& json_value=json["pSubresource"];
[&](){ VkImageSubresource2KHR* temp_bPPrxdS[&](){
            if (!json_value.as_array().size()==0){
                temp_bPPrxdS=NULL;
            return; }temp_bPPrxdS=(VkImageSubresource2KHR*)malloc(1*sizeof(VkImageSubresource2KHR));
        auto& arr=json_value.as_array();
        for(int palwAFi=0; palwAFi < 1; palwAFi++){
            [&](){
            auto& temp=json_value[palwAFi].as_object();
            deserialize_struct(temp,temp_bPPrxdS[palwAFi]);
            }();
        }
        }();member.pSubresource=temp_bPPrxdS;}();
}

    void serialize_pUserData(object& json, VkDeviceImageSubresourceInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkDeviceImageSubresourceInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderCorePropertiesARM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pixelRate"];
[&](){json_value=member.pixelRate;}();
auto& json_value=json["texelRate"];
[&](){json_value=member.texelRate;}();
auto& json_value=json["fmaRate"];
[&](){json_value=member.fmaRate;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderCorePropertiesARM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["pixelRate"];
[&](){member.pixelRate=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["texelRate"];
[&](){member.texelRate=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["fmaRate"];
[&](){member.fmaRate=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderCorePropertiesARM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderCorePropertiesARM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["multiviewPerViewRenderAreas"];
[&](){[&](){json_value=member.multiviewPerViewRenderAreas;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["multiviewPerViewRenderAreas"];
[&](){[&](){member.multiviewPerViewRenderAreas=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["perViewRenderAreaCount"];
[&](){json_value=member.perViewRenderAreaCount;}();
auto& json_value=json["pPerViewRenderAreas"];
[&](){
            if (member.pPerViewRenderAreas==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int BKTmmXF=0; BKTmmXF < member.perViewRenderAreaCount; BKTmmXF++){
            [&](){
            auto& temp=json_value[BKTmmXF].emplace_object();
            return serialize_struct(temp, member.pPerViewRenderAreas[BKTmmXF]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["perViewRenderAreaCount"];
[&](){member.perViewRenderAreaCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPerViewRenderAreas"];
[&](){ VkRect2D* temp_pGetTBR[&](){
            if (!json_value.as_array().size()==0){
                temp_pGetTBR=NULL;
            return; }temp_pGetTBR=(VkRect2D*)malloc(member.perViewRenderAreaCount*sizeof(VkRect2D));
        auto& arr=json_value.as_array();
        for(int MYXytcc=0; MYXytcc < member.perViewRenderAreaCount; MYXytcc++){
            [&](){
            auto& temp=json_value[MYXytcc].as_object();
            deserialize_struct(temp,temp_pGetTBR[MYXytcc]);
            }();
        }
        }();member.pPerViewRenderAreas=temp_pGetTBR;}();
}

    void serialize_pUserData(object& json, VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkQueryLowLatencySupportNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["pQueriedLowLatencyData"];
[&](){
            if (member.pQueriedLowLatencyData==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pQueriedLowLatencyData)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int uSAhzUM=0; uSAhzUM < strlen((char*)(member.pQueriedLowLatencyData))+1; uSAhzUM++){
            [&](){json_value[uSAhzUM]=(char*)(member.pQueriedLowLatencyData)[uSAhzUM];}();
        }
        }();}();
}
void deserialize_struct(object& json, VkQueryLowLatencySupportNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["pQueriedLowLatencyData"];
[&](){
            if (!json_value.as_array().size()==0){
                member.pQueriedLowLatencyData=NULL;
            return; }char* temp_AKpUPHp;[&](){
            if (!json_value.as_array().size()==0){
                member.pQueriedLowLatencyData=NULL;
            return; }member.pQueriedLowLatencyData=(char*)malloc(member.pQueriedLowLatencyData.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int uSAhzUM=0; uSAhzUM < member.pQueriedLowLatencyData.as_array().size();; uSAhzUM++){
            [&](){member.pQueriedLowLatencyData[uSAhzUM]=static_cast<char>(value_to<int>(json_value[uSAhzUM]));}();
        }
        }();member.pQueriedLowLatencyData=temp_AKpUPHp;}();
}

    void serialize_pUserData(object& json, VkQueryLowLatencySupportNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkQueryLowLatencySupportNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryMapInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
auto& json_value=json["offset"];
[&](){[&](){json_value=member.offset;}();}();
auto& json_value=json["size"];
[&](){[&](){json_value=member.size;}();}();
}
void deserialize_struct(object& json, VkMemoryMapInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkMemoryMapFlags temp_efNenGn[&](){temp_efNenGn=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkMemoryMapFlags)temp_efNenGn;}();}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
auto& json_value=json["offset"];
[&](){[&](){member.offset=static_cast<uint64_t>(value_to<int>(json_value));}();}();
auto& json_value=json["size"];
[&](){[&](){member.size=static_cast<uint64_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkMemoryMapInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryMapInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkMemoryUnmapInfoKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["memory"];
[&](){serialize_handle(json_value,member.memory);}();
}
void deserialize_struct(object& json, VkMemoryUnmapInfoKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkMemoryUnmapFlagsKHR temp_keCpyEs[&](){temp_keCpyEs=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkMemoryUnmapFlagsKHR)temp_keCpyEs;}();}();
auto& json_value=json["memory"];
[&](){deserialize_handle(json_value, member.memory);}();
}

    void serialize_pUserData(object& json, VkMemoryUnmapInfoKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkMemoryUnmapInfoKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderObjectFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderObject"];
[&](){[&](){json_value=member.shaderObject;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderObjectFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderObject"];
[&](){[&](){member.shaderObject=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderObjectFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderObjectFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderObjectPropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderBinaryUUID"];
[&](){
        auto& arr=json_value.emplace_array();
        for(int ECztgMK=0; ECztgMK < VK_UUID_SIZE; ECztgMK++){
            [&](){json_value[ECztgMK]=member.shaderBinaryUUID[ECztgMK];}();
        }
        }();
auto& json_value=json["shaderBinaryVersion"];
[&](){json_value=member.shaderBinaryVersion;}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderObjectPropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderBinaryUUID"];
[&](){
        auto& arr=json_value.as_array();
        for(int ECztgMK=0; ECztgMK < VK_UUID_SIZE; ECztgMK++){
            [&](){member.shaderBinaryUUID[ECztgMK]=static_cast<uint8_t>(value_to<int>(json_value[ECztgMK]));}();
        }
        }();
auto& json_value=json["shaderBinaryVersion"];
[&](){member.shaderBinaryVersion=static_cast<uint32_t>(value_to<int>(json_value));}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderObjectPropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderObjectPropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkShaderCreateInfoEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["flags"];
[&](){[&](){[&](){json_value=member.flags;}();}();}();
auto& json_value=json["stage"];
[&](){[&](){[&](){json_value=member.stage;}();}();}();
auto& json_value=json["nextStage"];
[&](){[&](){[&](){json_value=member.nextStage;}();}();}();
auto& json_value=json["codeType"];
[&](){[&](){[&](){json_value=member.codeType;}();}();}();
auto& json_value=json["codeSize"];
[&](){json_value=member.codeSize;}();
auto& json_value=json["pCode"];
[&](){
            if (member.pCode==NULL){
                json_value=array();
            return; }[&](){
            if ((char*)(member.pCode)==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int LndDMvv=0; LndDMvv < member.codeSize; LndDMvv++){
            [&](){json_value[LndDMvv]=(char*)(member.pCode)[LndDMvv];}();
        }
        }();}();
auto& json_value=json["pName"];
[&](){
            if (member.pName==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int opTkazg=0; opTkazg < strlen(member.pName)+1; opTkazg++){
            [&](){json_value[opTkazg]=member.pName[opTkazg];}();
        }
        }();
auto& json_value=json["setLayoutCount"];
[&](){json_value=member.setLayoutCount;}();
auto& json_value=json["pSetLayouts"];
[&](){
            if (member.pSetLayouts==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int gfILRjy=0; gfILRjy < member.setLayoutCount; gfILRjy++){
            [&](){serialize_handle(json_value[gfILRjy],member.pSetLayouts[gfILRjy]);}();
        }
        }();
auto& json_value=json["pushConstantRangeCount"];
[&](){json_value=member.pushConstantRangeCount;}();
auto& json_value=json["pPushConstantRanges"];
[&](){
            if (member.pPushConstantRanges==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int fStWwBo=0; fStWwBo < member.pushConstantRangeCount; fStWwBo++){
            [&](){
            auto& temp=json_value[fStWwBo].emplace_object();
            return serialize_struct(temp, member.pPushConstantRanges[fStWwBo]);
            }();
        }
        }();
auto& json_value=json["pSpecializationInfo"];
[&](){
            if (member.pSpecializationInfo==NULL){
                json_value=array();
            return; }
        auto& arr=json_value.emplace_array();
        for(int xbxpxgP=0; xbxpxgP < 1; xbxpxgP++){
            [&](){
            auto& temp=json_value[xbxpxgP].emplace_object();
            return serialize_struct(temp, member.pSpecializationInfo[xbxpxgP]);
            }();
        }
        }();
}
void deserialize_struct(object& json, VkShaderCreateInfoEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["flags"];
[&](){[&](){VkShaderCreateFlagsEXT temp_wjByArJ[&](){temp_wjByArJ=static_cast<int>(value_to<int>(json_value));}();member.flags=(VkShaderCreateFlagsEXT)temp_wjByArJ;}();}();
auto& json_value=json["stage"];
[&](){[&](){VkShaderStageFlagBits temp_oHinyRT[&](){temp_oHinyRT=static_cast<int>(value_to<int>(json_value));}();member.stage=(VkShaderStageFlagBits)temp_oHinyRT;}();}();
auto& json_value=json["nextStage"];
[&](){[&](){VkShaderStageFlags temp_HoteWYM[&](){temp_HoteWYM=static_cast<int>(value_to<int>(json_value));}();member.nextStage=(VkShaderStageFlags)temp_HoteWYM;}();}();
auto& json_value=json["codeType"];
[&](){[&](){VkShaderCodeTypeEXT temp_YGMkduI[&](){temp_YGMkduI=static_cast<int>(value_to<int>(json_value));}();member.codeType=(VkShaderCodeTypeEXT)temp_YGMkduI;}();}();
auto& json_value=json["codeSize"];
[&](){member.codeSize=static_cast<size_t>(value_to<int>(json_value));}();
auto& json_value=json["pCode"];
[&](){ void* temp_NzEyspr[&](){
            if (!json_value.as_array().size()==0){
                temp_NzEyspr=NULL;
            return; }char* temp_xkojwyy;[&](){
            if (!json_value.as_array().size()==0){
                temp_NzEyspr=NULL;
            return; }temp_NzEyspr=(char*)malloc(member.codeSize*sizeof(char));
        auto& arr=json_value.as_array();
        for(int NLBJMlE=0; NLBJMlE < member.codeSize; NLBJMlE++){
            [&](){temp_NzEyspr[NLBJMlE]=static_cast<char>(value_to<int>(json_value[NLBJMlE]));}();
        }
        }();temp_NzEyspr=temp_xkojwyy;}();member.pCode=temp_NzEyspr;}();
auto& json_value=json["pName"];
[&](){ char* temp_xDKNBiw[&](){
            if (!json_value.as_array().size()==0){
                temp_xDKNBiw=NULL;
            return; }temp_xDKNBiw=(char*)malloc(temp_xDKNBiw.as_array().size();*sizeof(char));
        auto& arr=json_value.as_array();
        for(int zzMOHXu=0; zzMOHXu < temp_xDKNBiw.as_array().size();; zzMOHXu++){
            [&](){temp_xDKNBiw[zzMOHXu]=static_cast<char>(value_to<int>(json_value[zzMOHXu]));}();
        }
        }();member.pName=temp_xDKNBiw;}();
auto& json_value=json["setLayoutCount"];
[&](){member.setLayoutCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pSetLayouts"];
[&](){ VkDescriptorSetLayout* temp_IEhvBMI[&](){
            if (!json_value.as_array().size()==0){
                temp_IEhvBMI=NULL;
            return; }temp_IEhvBMI=(VkDescriptorSetLayout*)malloc(member.setLayoutCount*sizeof(VkDescriptorSetLayout));
        auto& arr=json_value.as_array();
        for(int kjCEeqP=0; kjCEeqP < member.setLayoutCount; kjCEeqP++){
            [&](){deserialize_handle(json_value[kjCEeqP], temp_IEhvBMI[kjCEeqP]);}();
        }
        }();member.pSetLayouts=temp_IEhvBMI;}();
auto& json_value=json["pushConstantRangeCount"];
[&](){member.pushConstantRangeCount=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["pPushConstantRanges"];
[&](){ VkPushConstantRange* temp_gomfdHY[&](){
            if (!json_value.as_array().size()==0){
                temp_gomfdHY=NULL;
            return; }temp_gomfdHY=(VkPushConstantRange*)malloc(member.pushConstantRangeCount*sizeof(VkPushConstantRange));
        auto& arr=json_value.as_array();
        for(int xSoqBwb=0; xSoqBwb < member.pushConstantRangeCount; xSoqBwb++){
            [&](){
            auto& temp=json_value[xSoqBwb].as_object();
            deserialize_struct(temp,temp_gomfdHY[xSoqBwb]);
            }();
        }
        }();member.pPushConstantRanges=temp_gomfdHY;}();
auto& json_value=json["pSpecializationInfo"];
[&](){ VkSpecializationInfo* temp_mZLjDhf[&](){
            if (!json_value.as_array().size()==0){
                temp_mZLjDhf=NULL;
            return; }temp_mZLjDhf=(VkSpecializationInfo*)malloc(1*sizeof(VkSpecializationInfo));
        auto& arr=json_value.as_array();
        for(int ZWKvpYr=0; ZWKvpYr < 1; ZWKvpYr++){
            [&](){
            auto& temp=json_value[ZWKvpYr].as_object();
            deserialize_struct(temp,temp_mZLjDhf[ZWKvpYr]);
            }();
        }
        }();member.pSpecializationInfo=temp_mZLjDhf;}();
}

    void serialize_pUserData(object& json, VkShaderCreateInfoEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkShaderCreateInfoEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderTileImageFeaturesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderTileImageColorReadAccess"];
[&](){[&](){json_value=member.shaderTileImageColorReadAccess;}();}();
auto& json_value=json["shaderTileImageDepthReadAccess"];
[&](){[&](){json_value=member.shaderTileImageDepthReadAccess;}();}();
auto& json_value=json["shaderTileImageStencilReadAccess"];
[&](){[&](){json_value=member.shaderTileImageStencilReadAccess;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderTileImageFeaturesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderTileImageColorReadAccess"];
[&](){[&](){member.shaderTileImageColorReadAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderTileImageDepthReadAccess"];
[&](){[&](){member.shaderTileImageDepthReadAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderTileImageStencilReadAccess"];
[&](){[&](){member.shaderTileImageStencilReadAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderTileImageFeaturesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderTileImageFeaturesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceShaderTileImagePropertiesEXT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["shaderTileImageCoherentReadAccelerated"];
[&](){[&](){json_value=member.shaderTileImageCoherentReadAccelerated;}();}();
auto& json_value=json["shaderTileImageReadSampleFromPixelRateInvocation"];
[&](){[&](){json_value=member.shaderTileImageReadSampleFromPixelRateInvocation;}();}();
auto& json_value=json["shaderTileImageReadFromHelperInvocation"];
[&](){[&](){json_value=member.shaderTileImageReadFromHelperInvocation;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceShaderTileImagePropertiesEXT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["shaderTileImageCoherentReadAccelerated"];
[&](){[&](){member.shaderTileImageCoherentReadAccelerated=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderTileImageReadSampleFromPixelRateInvocation"];
[&](){[&](){member.shaderTileImageReadSampleFromPixelRateInvocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["shaderTileImageReadFromHelperInvocation"];
[&](){[&](){member.shaderTileImageReadFromHelperInvocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceShaderTileImagePropertiesEXT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceShaderTileImagePropertiesEXT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cooperativeMatrix"];
[&](){[&](){json_value=member.cooperativeMatrix;}();}();
auto& json_value=json["cooperativeMatrixRobustBufferAccess"];
[&](){[&](){json_value=member.cooperativeMatrixRobustBufferAccess;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["cooperativeMatrix"];
[&](){[&](){member.cooperativeMatrix=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["cooperativeMatrixRobustBufferAccess"];
[&](){[&](){member.cooperativeMatrixRobustBufferAccess=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixFeaturesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkCooperativeMatrixPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["MSize"];
[&](){json_value=member.MSize;}();
auto& json_value=json["NSize"];
[&](){json_value=member.NSize;}();
auto& json_value=json["KSize"];
[&](){json_value=member.KSize;}();
auto& json_value=json["AType"];
[&](){[&](){[&](){json_value=member.AType;}();}();}();
auto& json_value=json["BType"];
[&](){[&](){[&](){json_value=member.BType;}();}();}();
auto& json_value=json["CType"];
[&](){[&](){[&](){json_value=member.CType;}();}();}();
auto& json_value=json["ResultType"];
[&](){[&](){[&](){json_value=member.ResultType;}();}();}();
auto& json_value=json["saturatingAccumulation"];
[&](){[&](){json_value=member.saturatingAccumulation;}();}();
auto& json_value=json["scope"];
[&](){[&](){[&](){json_value=member.scope;}();}();}();
}
void deserialize_struct(object& json, VkCooperativeMatrixPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["MSize"];
[&](){member.MSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["NSize"];
[&](){member.NSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["KSize"];
[&](){member.KSize=static_cast<uint32_t>(value_to<int>(json_value));}();
auto& json_value=json["AType"];
[&](){[&](){VkComponentTypeKHR temp_BdEGVSc[&](){temp_BdEGVSc=static_cast<int>(value_to<int>(json_value));}();member.AType=(VkComponentTypeKHR)temp_BdEGVSc;}();}();
auto& json_value=json["BType"];
[&](){[&](){VkComponentTypeKHR temp_ryeBUgx[&](){temp_ryeBUgx=static_cast<int>(value_to<int>(json_value));}();member.BType=(VkComponentTypeKHR)temp_ryeBUgx;}();}();
auto& json_value=json["CType"];
[&](){[&](){VkComponentTypeKHR temp_ZPMHJRY[&](){temp_ZPMHJRY=static_cast<int>(value_to<int>(json_value));}();member.CType=(VkComponentTypeKHR)temp_ZPMHJRY;}();}();
auto& json_value=json["ResultType"];
[&](){[&](){VkComponentTypeKHR temp_RhHpzlT[&](){temp_RhHpzlT=static_cast<int>(value_to<int>(json_value));}();member.ResultType=(VkComponentTypeKHR)temp_RhHpzlT;}();}();
auto& json_value=json["saturatingAccumulation"];
[&](){[&](){member.saturatingAccumulation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["scope"];
[&](){[&](){VkScopeKHR temp_qjerdkU[&](){temp_qjerdkU=static_cast<int>(value_to<int>(json_value));}();member.scope=(VkScopeKHR)temp_qjerdkU;}();}();
}

    void serialize_pUserData(object& json, VkCooperativeMatrixPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkCooperativeMatrixPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesKHR& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cooperativeMatrixSupportedStages"];
[&](){[&](){[&](){json_value=member.cooperativeMatrixSupportedStages;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesKHR& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["cooperativeMatrixSupportedStages"];
[&](){[&](){VkShaderStageFlags temp_fOeQfMa[&](){temp_fOeQfMa=static_cast<int>(value_to<int>(json_value));}();member.cooperativeMatrixSupportedStages=(VkShaderStageFlags)temp_fOeQfMa;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesKHR& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCooperativeMatrixPropertiesKHR& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCubicClampFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cubicRangeClamp"];
[&](){[&](){json_value=member.cubicRangeClamp;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCubicClampFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["cubicRangeClamp"];
[&](){[&](){member.cubicRangeClamp=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCubicClampFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCubicClampFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceYcbcrDegammaFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["ycbcrDegamma"];
[&](){[&](){json_value=member.ycbcrDegamma;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceYcbcrDegammaFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["ycbcrDegamma"];
[&](){[&](){member.ycbcrDegamma=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceYcbcrDegammaFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceYcbcrDegammaFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["enableYDegamma"];
[&](){[&](){json_value=member.enableYDegamma;}();}();
auto& json_value=json["enableCbCrDegamma"];
[&](){[&](){json_value=member.enableCbCrDegamma;}();}();
}
void deserialize_struct(object& json, VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["enableYDegamma"];
[&](){[&](){member.enableYDegamma=static_cast<uint32_t>(value_to<int>(json_value));}();}();
auto& json_value=json["enableCbCrDegamma"];
[&](){[&](){member.enableCbCrDegamma=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceCubicWeightsFeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["selectableCubicWeights"];
[&](){[&](){json_value=member.selectableCubicWeights;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceCubicWeightsFeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["selectableCubicWeights"];
[&](){[&](){member.selectableCubicWeights=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceCubicWeightsFeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceCubicWeightsFeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerCubicWeightsCreateInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cubicWeights"];
[&](){[&](){[&](){json_value=member.cubicWeights;}();}();}();
}
void deserialize_struct(object& json, VkSamplerCubicWeightsCreateInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["cubicWeights"];
[&](){[&](){VkCubicFilterWeightsQCOM temp_fWsNxgb[&](){temp_fWsNxgb=static_cast<int>(value_to<int>(json_value));}();member.cubicWeights=(VkCubicFilterWeightsQCOM)temp_fWsNxgb;}();}();
}

    void serialize_pUserData(object& json, VkSamplerCubicWeightsCreateInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerCubicWeightsCreateInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkBlitImageCubicWeightsInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["cubicWeights"];
[&](){[&](){[&](){json_value=member.cubicWeights;}();}();}();
}
void deserialize_struct(object& json, VkBlitImageCubicWeightsInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["cubicWeights"];
[&](){[&](){VkCubicFilterWeightsQCOM temp_fWsNxgb[&](){temp_fWsNxgb=static_cast<int>(value_to<int>(json_value));}();member.cubicWeights=(VkCubicFilterWeightsQCOM)temp_fWsNxgb;}();}();
}

    void serialize_pUserData(object& json, VkBlitImageCubicWeightsInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkBlitImageCubicWeightsInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageProcessing2FeaturesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["textureBlockMatch2"];
[&](){[&](){json_value=member.textureBlockMatch2;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageProcessing2FeaturesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["textureBlockMatch2"];
[&](){[&](){member.textureBlockMatch2=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageProcessing2FeaturesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageProcessing2FeaturesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceImageProcessing2PropertiesQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["maxBlockMatchWindow"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.maxBlockMatchWindow);
            }();
}
void deserialize_struct(object& json, VkPhysicalDeviceImageProcessing2PropertiesQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["maxBlockMatchWindow"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.maxBlockMatchWindow);
            }();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceImageProcessing2PropertiesQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceImageProcessing2PropertiesQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkSamplerBlockMatchWindowCreateInfoQCOM& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["windowExtent"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.windowExtent);
            }();
auto& json_value=json["windowCompareMode"];
[&](){[&](){[&](){json_value=member.windowCompareMode;}();}();}();
}
void deserialize_struct(object& json, VkSamplerBlockMatchWindowCreateInfoQCOM& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){ void* temp_pBVSXDo[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,temp_pBVSXDo);
            }();member.pNext=temp_pBVSXDo;}();
auto& json_value=json["windowExtent"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.windowExtent);
            }();
auto& json_value=json["windowCompareMode"];
[&](){[&](){VkBlockMatchWindowCompareModeQCOM temp_PqwKnwZ[&](){temp_PqwKnwZ=static_cast<int>(value_to<int>(json_value));}();member.windowCompareMode=(VkBlockMatchWindowCompareModeQCOM)temp_PqwKnwZ;}();}();
}

    void serialize_pUserData(object& json, VkSamplerBlockMatchWindowCreateInfoQCOM& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkSamplerBlockMatchWindowCreateInfoQCOM& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["descriptorPoolOverallocation"];
[&](){[&](){json_value=member.descriptorPoolOverallocation;}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["descriptorPoolOverallocation"];
[&](){[&](){member.descriptorPoolOverallocation=static_cast<uint32_t>(value_to<int>(json_value));}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    

    void serialize_struct(object& json, VkPhysicalDeviceLayeredDriverPropertiesMSFT& member){
        
    
auto& json_value=json["sType"];
[&](){[&](){[&](){json_value=member.sType;}();}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.emplace_object();
            return serialize_struct(temp, member.pNext);
            }();
auto& json_value=json["underlyingAPI"];
[&](){[&](){[&](){json_value=member.underlyingAPI;}();}();}();
}
void deserialize_struct(object& json, VkPhysicalDeviceLayeredDriverPropertiesMSFT& member){
auto& json_value=json["sType"];
[&](){[&](){VkStructureType temp_iEQyhgT[&](){temp_iEQyhgT=static_cast<int>(value_to<int>(json_value));}();member.sType=(VkStructureType)temp_iEQyhgT;}();}();
auto& json_value=json["pNext"];
[&](){
            auto& temp=json_value.as_object();
            deserialize_struct(temp,member.pNext);
            }();
auto& json_value=json["underlyingAPI"];
[&](){[&](){VkLayeredDriverUnderlyingApiMSFT temp_SzJcAwL[&](){temp_SzJcAwL=static_cast<int>(value_to<int>(json_value));}();member.underlyingAPI=(VkLayeredDriverUnderlyingApiMSFT)temp_SzJcAwL;}();}();
}

    void serialize_pUserData(object& json, VkPhysicalDeviceLayeredDriverPropertiesMSFT& member){
    
[&](){
            if (member.pUserData==NULL){
                json["pUserData"].emplace_object()=array();
            return; }[&](){
            if ((char*)(member.pUserData)==NULL){
                json["pUserData"].emplace_object()=array();
            return; }
        auto& arr=json["pUserData"].emplace_object().emplace_array();
        for(int lQswvtW=0; lQswvtW < strlen((char*)(member.pUserData))+1; lQswvtW++){
            [&](){json["pUserData"].emplace_object()[lQswvtW]=(char*)(member.pUserData)[lQswvtW];}();
        }
        }();}();
}

    void deserialize_pUserData(object& json, VkPhysicalDeviceLayeredDriverPropertiesMSFT& member){
        #ifdef CLIENT
           void* pUserData;
           [&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData=temp_YghEUhF;}();
        #else
            pUserData=new pUserData();
    
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }char* temp_YghEUhF;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData.pUserData=NULL;
            return; }pUserData.pUserData=(char*)malloc(pUserData.pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int lQswvtW=0; lQswvtW < pUserData.pUserData.as_array().size();; lQswvtW++){
            [&](){pUserData.pUserData[lQswvtW]=static_cast<char>(value_to<int>(json["pUserData"][lQswvtW]));}();
        }
        }();pUserData.pUserData=temp_YghEUhF;}();

    #endif
    member.pUserData=pUserData;
    }
    
std::map<uintptr_t,PFN_vkInternalAllocationNotification> id_to_PFN_vkInternalAllocationNotification;

    void serialize_funcpointer(object&, PFN_vkInternalAllocationNotification&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkInternalAllocationNotification& member){
            //Will only be called by the server
            
            member=PFN_vkInternalAllocationNotification_wrapper;
            };
        

        auto PFN_vkInternalAllocationNotification_wrapper( void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKINTERNALALLOCATIONNOTIFICATION;
        
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){[&](){[&](){json["allocationType"]=allocationType;}();}();}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkInternalAllocationNotification;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        void result;
        
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
[&](){[&](){VkInternalAllocationType temp_ThhQBms[&](){temp_ThhQBms=static_cast<int>(value_to<int>(json["allocationType"]));}();allocationType=(VkInternalAllocationType)temp_ThhQBms;}();}();
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();

json.clear();
json.erase("mem");

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

            void handle_PFN_vkInternalAllocationNotification(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkInternalAllocationNotification wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkInternalAllocationNotification[value_to<uintptr_t>(json["id"])];
        
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
size_t size;
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
VkInternalAllocationType allocationType;
[&](){[&](){VkInternalAllocationType temp_ThhQBms[&](){temp_ThhQBms=static_cast<int>(value_to<int>(json["allocationType"]));}();allocationType=(VkInternalAllocationType)temp_ThhQBms;}();}();
VkSystemAllocationScope allocationScope;
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();
funcpointer(pUserData,size,allocationType,allocationScope);
json.clear();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){[&](){[&](){json["allocationType"]=allocationType;}();}();}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();

writeToConn(json);
};
std::map<uintptr_t,PFN_vkInternalFreeNotification> id_to_PFN_vkInternalFreeNotification;

    void serialize_funcpointer(object&, PFN_vkInternalFreeNotification&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkInternalFreeNotification& member){
            //Will only be called by the server
            
            member=PFN_vkInternalFreeNotification_wrapper;
            };
        

        auto PFN_vkInternalFreeNotification_wrapper( void* pUserData, size_t size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKINTERNALFREENOTIFICATION;
        
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){[&](){[&](){json["allocationType"]=allocationType;}();}();}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkInternalFreeNotification;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        void result;
        
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
[&](){[&](){VkInternalAllocationType temp_ThhQBms[&](){temp_ThhQBms=static_cast<int>(value_to<int>(json["allocationType"]));}();allocationType=(VkInternalAllocationType)temp_ThhQBms;}();}();
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();

json.clear();
json.erase("mem");

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

            void handle_PFN_vkInternalFreeNotification(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkInternalFreeNotification wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkInternalFreeNotification[value_to<uintptr_t>(json["id"])];
        
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
size_t size;
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
VkInternalAllocationType allocationType;
[&](){[&](){VkInternalAllocationType temp_ThhQBms[&](){temp_ThhQBms=static_cast<int>(value_to<int>(json["allocationType"]));}();allocationType=(VkInternalAllocationType)temp_ThhQBms;}();}();
VkSystemAllocationScope allocationScope;
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();
funcpointer(pUserData,size,allocationType,allocationScope);
json.clear();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){[&](){[&](){json["allocationType"]=allocationType;}();}();}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();

writeToConn(json);
};
std::map<uintptr_t,PFN_vkReallocationFunction> id_to_PFN_vkReallocationFunction;

    void serialize_funcpointer(object&, PFN_vkReallocationFunction&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkReallocationFunction& member){
            //Will only be called by the server
            
            member=PFN_vkReallocationFunction_wrapper;
            };
        

        auto PFN_vkReallocationFunction_wrapper( void* pUserData, void* pOriginal, size_t size, size_t alignment, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKREALLOCATIONFUNCTION;
        
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){
            if (pOriginal==NULL){
                json["pOriginal"]=array();
            return; }[&](){
            if ((char*)(pOriginal)==NULL){
                json["pOriginal"]=array();
            return; }
        auto& arr=json["pOriginal"].emplace_array();
        for(int CPzsPmw=0; CPzsPmw < strlen((char*)(pOriginal))+1; CPzsPmw++){
            [&](){json["pOriginal"][CPzsPmw]=(char*)(pOriginal)[CPzsPmw];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){json["alignment"]=alignment;}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkReallocationFunction;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        void* result;
        
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
[&](){
            if (!json["pOriginal"].as_array().size()==0){
                pOriginal=NULL;
            return; }char* temp_wDhHXsx;[&](){
            if (!json["pOriginal"].as_array().size()==0){
                pOriginal=NULL;
            return; }
        auto& arr=json["pOriginal"].as_array();
        for(int CPzsPmw=0; CPzsPmw < pOriginal.as_array().size();; CPzsPmw++){
            [&](){pOriginal[CPzsPmw]=static_cast<char>(value_to<int>(json["pOriginal"][CPzsPmw]));}();
        }
        }();pOriginal=temp_wDhHXsx;}();
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
[&](){alignment=static_cast<size_t>(value_to<int>(json["alignment"]));}();
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();
[&](){
            if (!json["result"].as_array().size()==0){
                result=NULL;
            return; }char* temp_bhzzLTE;[&](){
            if (!json["result"].as_array().size()==0){
                result=NULL;
            return; }
        auto& arr=json["result"].as_array();
        for(int OCljRPK=0; OCljRPK < result.as_array().size();; OCljRPK++){
            [&](){result[OCljRPK]=static_cast<char>(value_to<int>(json["result"][OCljRPK]));}();
        }
        }();result=temp_bhzzLTE;}();
json.clear();
registerAllocatedMem(result,size);
json["mem"](uintptr_t)result;

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

            void handle_PFN_vkReallocationFunction(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkReallocationFunction wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkReallocationFunction[value_to<uintptr_t>(json["id"])];
        
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
void* pOriginal;
[&](){
            if (!json["pOriginal"].as_array().size()==0){
                pOriginal=NULL;
            return; }char* temp_wDhHXsx;[&](){
            if (!json["pOriginal"].as_array().size()==0){
                pOriginal=NULL;
            return; }pOriginal=(char*)malloc(pOriginal.as_array().size();*sizeof(char));
        auto& arr=json["pOriginal"].as_array();
        for(int CPzsPmw=0; CPzsPmw < pOriginal.as_array().size();; CPzsPmw++){
            [&](){pOriginal[CPzsPmw]=static_cast<char>(value_to<int>(json["pOriginal"][CPzsPmw]));}();
        }
        }();pOriginal=temp_wDhHXsx;}();
size_t size;
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
size_t alignment;
[&](){alignment=static_cast<size_t>(value_to<int>(json["alignment"]));}();
VkSystemAllocationScope allocationScope;
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();
auto result=funcpointer(pUserData,pOriginal,size,alignment,allocationScope);
json.clear();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){
            if (pOriginal==NULL){
                json["pOriginal"]=array();
            return; }[&](){
            if ((char*)(pOriginal)==NULL){
                json["pOriginal"]=array();
            return; }
        auto& arr=json["pOriginal"].emplace_array();
        for(int CPzsPmw=0; CPzsPmw < strlen((char*)(pOriginal))+1; CPzsPmw++){
            [&](){json["pOriginal"][CPzsPmw]=(char*)(pOriginal)[CPzsPmw];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){json["alignment"]=alignment;}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();
[&](){
            if (result==NULL){
                json["result"]=array();
            return; }[&](){
            if ((char*)(result)==NULL){
                json["result"]=array();
            return; }
        auto& arr=json["result"].emplace_array();
        for(int OCljRPK=0; OCljRPK < strlen((char*)(result))+1; OCljRPK++){
            [&](){json["result"][OCljRPK]=(char*)(result)[OCljRPK];}();
        }
        }();}();
writeToConn(json);

            json=readFromConn();
            registerClientServerMemoryMapping((uintptr_t)result, value_to<uintptr_t>(json["mem"]) );
            
            json.clear();
            writeConn(json); //Send empty message to signal to the server the mapping is done.
            
};
std::map<uintptr_t,PFN_vkAllocationFunction> id_to_PFN_vkAllocationFunction;

    void serialize_funcpointer(object&, PFN_vkAllocationFunction&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkAllocationFunction& member){
            //Will only be called by the server
            
            member=PFN_vkAllocationFunction_wrapper;
            };
        

        auto PFN_vkAllocationFunction_wrapper( void* pUserData, size_t size, size_t alignment, VkSystemAllocationScope allocationScope){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKALLOCATIONFUNCTION;
        
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){json["alignment"]=alignment;}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkAllocationFunction;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        void* result;
        
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
[&](){alignment=static_cast<size_t>(value_to<int>(json["alignment"]));}();
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();
[&](){
            if (!json["result"].as_array().size()==0){
                result=NULL;
            return; }char* temp_cdnKrSV;[&](){
            if (!json["result"].as_array().size()==0){
                result=NULL;
            return; }
        auto& arr=json["result"].as_array();
        for(int xALmVrM=0; xALmVrM < size; xALmVrM++){
            [&](){result[xALmVrM]=static_cast<char>(value_to<int>(json["result"][xALmVrM]));}();
        }
        }();result=temp_cdnKrSV;}();
json.clear();
registerAllocatedMem(result,size);
json["mem"](uintptr_t)result;

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

            void handle_PFN_vkAllocationFunction(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkAllocationFunction wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkAllocationFunction[value_to<uintptr_t>(json["id"])];
        
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
size_t size;
[&](){size=static_cast<size_t>(value_to<int>(json["size"]));}();
size_t alignment;
[&](){alignment=static_cast<size_t>(value_to<int>(json["alignment"]));}();
VkSystemAllocationScope allocationScope;
[&](){[&](){VkSystemAllocationScope temp_tdclmZW[&](){temp_tdclmZW=static_cast<int>(value_to<int>(json["allocationScope"]));}();allocationScope=(VkSystemAllocationScope)temp_tdclmZW;}();}();
auto result=funcpointer(pUserData,size,alignment,allocationScope);
json.clear();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){json["size"]=size;}();
[&](){json["alignment"]=alignment;}();
[&](){[&](){[&](){json["allocationScope"]=allocationScope;}();}();}();
[&](){
            if (result==NULL){
                json["result"]=array();
            return; }[&](){
            if ((char*)(result)==NULL){
                json["result"]=array();
            return; }
        auto& arr=json["result"].emplace_array();
        for(int xALmVrM=0; xALmVrM < size; xALmVrM++){
            [&](){json["result"][xALmVrM]=(char*)(result)[xALmVrM];}();
        }
        }();}();
writeToConn(json);

            json=readFromConn();
            registerClientServerMemoryMapping((uintptr_t)result, value_to<uintptr_t>(json["mem"]) );
            
            json.clear();
            writeConn(json); //Send empty message to signal to the server the mapping is done.
            
};
std::map<uintptr_t,PFN_vkFreeFunction> id_to_PFN_vkFreeFunction;

    void serialize_funcpointer(object&, PFN_vkFreeFunction&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkFreeFunction& member){
            //Will only be called by the server
            
            member=PFN_vkFreeFunction_wrapper;
            };
        

        auto PFN_vkFreeFunction_wrapper( void* pUserData, void* pMemory){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKFREEFUNCTION;
        
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){
            if (pMemory==NULL){
                json["pMemory"]=array();
            return; }[&](){
            if ((char*)(pMemory)==NULL){
                json["pMemory"]=array();
            return; }
        auto& arr=json["pMemory"].emplace_array();
        for(int jqNEFTO=0; jqNEFTO < strlen((char*)(pMemory))+1; jqNEFTO++){
            [&](){json["pMemory"][jqNEFTO]=(char*)(pMemory)[jqNEFTO];}();
        }
        }();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkFreeFunction;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        void result;
        
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
[&](){
            if (!json["pMemory"].as_array().size()==0){
                pMemory=NULL;
            return; }char* temp_RvsBVnz;[&](){
            if (!json["pMemory"].as_array().size()==0){
                pMemory=NULL;
            return; }
        auto& arr=json["pMemory"].as_array();
        for(int jqNEFTO=0; jqNEFTO < pMemory.as_array().size();; jqNEFTO++){
            [&](){pMemory[jqNEFTO]=static_cast<char>(value_to<int>(json["pMemory"][jqNEFTO]));}();
        }
        }();pMemory=temp_RvsBVnz;}();

json.clear();
json.erase("mem");

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

            void handle_PFN_vkFreeFunction(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkFreeFunction wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkFreeFunction[value_to<uintptr_t>(json["id"])];
        
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
void* pMemory;
[&](){
            if (!json["pMemory"].as_array().size()==0){
                pMemory=NULL;
            return; }char* temp_RvsBVnz;[&](){
            if (!json["pMemory"].as_array().size()==0){
                pMemory=NULL;
            return; }pMemory=(char*)malloc(pMemory.as_array().size();*sizeof(char));
        auto& arr=json["pMemory"].as_array();
        for(int jqNEFTO=0; jqNEFTO < pMemory.as_array().size();; jqNEFTO++){
            [&](){pMemory[jqNEFTO]=static_cast<char>(value_to<int>(json["pMemory"][jqNEFTO]));}();
        }
        }();pMemory=temp_RvsBVnz;}();
funcpointer(pUserData,pMemory);
json.clear();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){
            if (pMemory==NULL){
                json["pMemory"]=array();
            return; }[&](){
            if ((char*)(pMemory)==NULL){
                json["pMemory"]=array();
            return; }
        auto& arr=json["pMemory"].emplace_array();
        for(int jqNEFTO=0; jqNEFTO < strlen((char*)(pMemory))+1; jqNEFTO++){
            [&](){json["pMemory"][jqNEFTO]=(char*)(pMemory)[jqNEFTO];}();
        }
        }();}();

writeToConn(json);
};
std::map<uintptr_t,PFN_vkDebugReportCallbackEXT> id_to_PFN_vkDebugReportCallbackEXT;

    void serialize_funcpointer(object&, PFN_vkDebugReportCallbackEXT&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkDebugReportCallbackEXT& member){
            //Will only be called by the server
            
            member=PFN_vkDebugReportCallbackEXT_wrapper;
            };
        

        auto PFN_vkDebugReportCallbackEXT_wrapper( VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage, void* pUserData){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKDEBUGREPORTCALLBACKEXT;
        
[&](){[&](){[&](){json["flags"]=flags;}();}();}();
[&](){[&](){[&](){json["objectType"]=objectType;}();}();}();
[&](){json["object"]=object;}();
[&](){json["location"]=location;}();
[&](){json["messageCode"]=messageCode;}();
[&](){
            if (pLayerPrefix==NULL){
                json["pLayerPrefix"]=array();
            return; }
        auto& arr=json["pLayerPrefix"].emplace_array();
        for(int EvbekCn=0; EvbekCn < strlen(pLayerPrefix)+1; EvbekCn++){
            [&](){json["pLayerPrefix"][EvbekCn]=pLayerPrefix[EvbekCn];}();
        }
        }();
[&](){
            if (pMessage==NULL){
                json["pMessage"]=array();
            return; }
        auto& arr=json["pMessage"].emplace_array();
        for(int zqBMvjH=0; zqBMvjH < strlen(pMessage)+1; zqBMvjH++){
            [&](){json["pMessage"][zqBMvjH]=pMessage[zqBMvjH];}();
        }
        }();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkDebugReportCallbackEXT;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        VkBool32 result;
        
[&](){[&](){VkDebugReportFlagsEXT temp_yKbaVqA[&](){temp_yKbaVqA=static_cast<int>(value_to<int>(json["flags"]));}();flags=(VkDebugReportFlagsEXT)temp_yKbaVqA;}();}();
[&](){[&](){VkDebugReportObjectTypeEXT temp_DXXbuzx[&](){temp_DXXbuzx=static_cast<int>(value_to<int>(json["objectType"]));}();objectType=(VkDebugReportObjectTypeEXT)temp_DXXbuzx;}();}();
[&](){object=static_cast<uint64_t>(value_to<int>(json["object"]));}();
[&](){location=static_cast<size_t>(value_to<int>(json["location"]));}();
[&](){messageCode=static_cast<int32_t>(value_to<int>(json["messageCode"]));}();


[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
[&](){[&](){result=static_cast<uint32_t>(value_to<int>(json["result"]));}();}();
json.clear();
json.erase("mem");

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

            void handle_PFN_vkDebugReportCallbackEXT(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkDebugReportCallbackEXT wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkDebugReportCallbackEXT[value_to<uintptr_t>(json["id"])];
        
VkDebugReportFlagsEXT flags;
[&](){[&](){VkDebugReportFlagsEXT temp_yKbaVqA[&](){temp_yKbaVqA=static_cast<int>(value_to<int>(json["flags"]));}();flags=(VkDebugReportFlagsEXT)temp_yKbaVqA;}();}();
VkDebugReportObjectTypeEXT objectType;
[&](){[&](){VkDebugReportObjectTypeEXT temp_DXXbuzx[&](){temp_DXXbuzx=static_cast<int>(value_to<int>(json["objectType"]));}();objectType=(VkDebugReportObjectTypeEXT)temp_DXXbuzx;}();}();
uint64_t object;
[&](){object=static_cast<uint64_t>(value_to<int>(json["object"]));}();
size_t location;
[&](){location=static_cast<size_t>(value_to<int>(json["location"]));}();
int32_t messageCode;
[&](){messageCode=static_cast<int32_t>(value_to<int>(json["messageCode"]));}();
const char* pLayerPrefix;
[&](){ char* temp_QPuseiC[&](){
            if (!json["pLayerPrefix"].as_array().size()==0){
                temp_QPuseiC=NULL;
            return; }temp_QPuseiC=(char*)malloc(temp_QPuseiC.as_array().size();*sizeof(char));
        auto& arr=json["pLayerPrefix"].as_array();
        for(int pFiaGQG=0; pFiaGQG < temp_QPuseiC.as_array().size();; pFiaGQG++){
            [&](){temp_QPuseiC[pFiaGQG]=static_cast<char>(value_to<int>(json["pLayerPrefix"][pFiaGQG]));}();
        }
        }();pLayerPrefix=temp_QPuseiC;}();
const char* pMessage;
[&](){ char* temp_apslgql[&](){
            if (!json["pMessage"].as_array().size()==0){
                temp_apslgql=NULL;
            return; }temp_apslgql=(char*)malloc(temp_apslgql.as_array().size();*sizeof(char));
        auto& arr=json["pMessage"].as_array();
        for(int oUIcmMP=0; oUIcmMP < temp_apslgql.as_array().size();; oUIcmMP++){
            [&](){temp_apslgql[oUIcmMP]=static_cast<char>(value_to<int>(json["pMessage"][oUIcmMP]));}();
        }
        }();pMessage=temp_apslgql;}();
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
auto result=funcpointer(flags,objectType,object,location,messageCode,pLayerPrefix,pMessage,pUserData);
json.clear();
[&](){[&](){[&](){json["flags"]=flags;}();}();}();
[&](){[&](){[&](){json["objectType"]=objectType;}();}();}();
[&](){json["object"]=object;}();
[&](){json["location"]=location;}();
[&](){json["messageCode"]=messageCode;}();
[&](){
            if (pLayerPrefix==NULL){
                json["pLayerPrefix"]=array();
            return; }
        auto& arr=json["pLayerPrefix"].emplace_array();
        for(int EvbekCn=0; EvbekCn < strlen(pLayerPrefix)+1; EvbekCn++){
            [&](){json["pLayerPrefix"][EvbekCn]=pLayerPrefix[EvbekCn];}();
        }
        }();
[&](){
            if (pMessage==NULL){
                json["pMessage"]=array();
            return; }
        auto& arr=json["pMessage"].emplace_array();
        for(int zqBMvjH=0; zqBMvjH < strlen(pMessage)+1; zqBMvjH++){
            [&](){json["pMessage"][zqBMvjH]=pMessage[zqBMvjH];}();
        }
        }();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){[&](){json["result"]=result;}();}();
writeToConn(json);
};
std::map<uintptr_t,PFN_vkDebugUtilsMessengerCallbackEXT> id_to_PFN_vkDebugUtilsMessengerCallbackEXT;

    void serialize_funcpointer(object&, PFN_vkDebugUtilsMessengerCallbackEXT&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkDebugUtilsMessengerCallbackEXT& member){
            //Will only be called by the server
            
            member=PFN_vkDebugUtilsMessengerCallbackEXT_wrapper;
            };
        

        auto PFN_vkDebugUtilsMessengerCallbackEXT_wrapper( VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKDEBUGUTILSMESSENGERCALLBACKEXT;
        
[&](){[&](){[&](){json["messageSeverity"]=messageSeverity;}();}();}();
[&](){[&](){[&](){json["messageTypes"]=messageTypes;}();}();}();
[&](){
            if (pCallbackData==NULL){
                json["pCallbackData"]=array();
            return; }
        auto& arr=json["pCallbackData"].emplace_array();
        for(int SAnJMKd=0; SAnJMKd < 1; SAnJMKd++){
            [&](){
            auto& temp=json["pCallbackData"][SAnJMKd].emplace_object();
            return serialize_struct(temp, pCallbackData[SAnJMKd]);
            }();
        }
        }();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkDebugUtilsMessengerCallbackEXT;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        VkBool32 result;
        
[&](){[&](){VkDebugUtilsMessageSeverityFlagBitsEXT temp_fIBrrKd[&](){temp_fIBrrKd=static_cast<int>(value_to<int>(json["messageSeverity"]));}();messageSeverity=(VkDebugUtilsMessageSeverityFlagBitsEXT)temp_fIBrrKd;}();}();
[&](){[&](){VkDebugUtilsMessageTypeFlagsEXT temp_IpOxjAM[&](){temp_IpOxjAM=static_cast<int>(value_to<int>(json["messageTypes"]));}();messageTypes=(VkDebugUtilsMessageTypeFlagsEXT)temp_IpOxjAM;}();}();

[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
[&](){[&](){result=static_cast<uint32_t>(value_to<int>(json["result"]));}();}();
json.clear();
json.erase("mem");

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return result;
}

            void handle_PFN_vkDebugUtilsMessengerCallbackEXT(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkDebugUtilsMessengerCallbackEXT wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkDebugUtilsMessengerCallbackEXT[value_to<uintptr_t>(json["id"])];
        
VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity;
[&](){[&](){VkDebugUtilsMessageSeverityFlagBitsEXT temp_fIBrrKd[&](){temp_fIBrrKd=static_cast<int>(value_to<int>(json["messageSeverity"]));}();messageSeverity=(VkDebugUtilsMessageSeverityFlagBitsEXT)temp_fIBrrKd;}();}();
VkDebugUtilsMessageTypeFlagsEXT messageTypes;
[&](){[&](){VkDebugUtilsMessageTypeFlagsEXT temp_IpOxjAM[&](){temp_IpOxjAM=static_cast<int>(value_to<int>(json["messageTypes"]));}();messageTypes=(VkDebugUtilsMessageTypeFlagsEXT)temp_IpOxjAM;}();}();
const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData;
[&](){ VkDebugUtilsMessengerCallbackDataEXT* temp_IuzNdgl[&](){
            if (!json["pCallbackData"].as_array().size()==0){
                temp_IuzNdgl=NULL;
            return; }temp_IuzNdgl=(VkDebugUtilsMessengerCallbackDataEXT*)malloc(1*sizeof(VkDebugUtilsMessengerCallbackDataEXT));
        auto& arr=json["pCallbackData"].as_array();
        for(int JIoxlDg=0; JIoxlDg < 1; JIoxlDg++){
            [&](){
            auto& temp=json["pCallbackData"][JIoxlDg].as_object();
            deserialize_struct(temp,temp_IuzNdgl[JIoxlDg]);
            }();
        }
        }();pCallbackData=temp_IuzNdgl;}();
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
auto result=funcpointer(messageSeverity,messageTypes,pCallbackData,pUserData);
json.clear();
[&](){[&](){[&](){json["messageSeverity"]=messageSeverity;}();}();}();
[&](){[&](){[&](){json["messageTypes"]=messageTypes;}();}();}();
[&](){
            if (pCallbackData==NULL){
                json["pCallbackData"]=array();
            return; }
        auto& arr=json["pCallbackData"].emplace_array();
        for(int SAnJMKd=0; SAnJMKd < 1; SAnJMKd++){
            [&](){
            auto& temp=json["pCallbackData"][SAnJMKd].emplace_object();
            return serialize_struct(temp, pCallbackData[SAnJMKd]);
            }();
        }
        }();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();
[&](){[&](){json["result"]=result;}();}();
writeToConn(json);
};
std::map<uintptr_t,PFN_vkDeviceMemoryReportCallbackEXT> id_to_PFN_vkDeviceMemoryReportCallbackEXT;

    void serialize_funcpointer(object&, PFN_vkDeviceMemoryReportCallbackEXT&){
        //Will only be called by the client
        return;
    }
    

        void deserialize_funcpointer(object& json, PFN_vkDeviceMemoryReportCallbackEXT& member){
            //Will only be called by the server
            
            member=PFN_vkDeviceMemoryReportCallbackEXT_wrapper;
            };
        

        auto PFN_vkDeviceMemoryReportCallbackEXT_wrapper( const VkDeviceMemoryReportCallbackDataEXT* pCallbackData, void* pUserData){
        //Will only be called by the server
        
        object& json;
        json["type"]=PFN_VKDEVICEMEMORYREPORTCALLBACKEXT;
        
[&](){
            if (pCallbackData==NULL){
                json["pCallbackData"]=array();
            return; }
        auto& arr=json["pCallbackData"].emplace_array();
        for(int visaHGl=0; visaHGl < 1; visaHGl++){
            [&](){
            auto& temp=json["pCallbackData"][visaHGl].emplace_object();
            return serialize_struct(temp, pCallbackData[visaHGl]);
            }();
        }
        }();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();

        json["id"]=((pUserData*)pUserData)->PFN_vkDeviceMemoryReportCallbackEXT;
        
        writeToConn(json); //Send request
        json=readFromConn(); //Recieve response
        void result;
        

[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();

json.clear();
json.erase("mem");

        writeToConn(json); //Send (possible) memory to client so it can store it
        readFromConn(); //Get the confirmation that the client has registered the memory
        
SyncAllocations();
return;
}

            void handle_PFN_vkDeviceMemoryReportCallbackEXT(object& json){
            //Will only be called by the client
            
            // Recieved data from server's PFN_vkDeviceMemoryReportCallbackEXT wrapper, and will execute the actual function
            auto funcpointer=id_to_PFN_vkDeviceMemoryReportCallbackEXT[value_to<uintptr_t>(json["id"])];
        
const VkDeviceMemoryReportCallbackDataEXT* pCallbackData;
[&](){ VkDeviceMemoryReportCallbackDataEXT* temp_fgmmfZS[&](){
            if (!json["pCallbackData"].as_array().size()==0){
                temp_fgmmfZS=NULL;
            return; }temp_fgmmfZS=(VkDeviceMemoryReportCallbackDataEXT*)malloc(1*sizeof(VkDeviceMemoryReportCallbackDataEXT));
        auto& arr=json["pCallbackData"].as_array();
        for(int bZjeYjg=0; bZjeYjg < 1; bZjeYjg++){
            [&](){
            auto& temp=json["pCallbackData"][bZjeYjg].as_object();
            deserialize_struct(temp,temp_fgmmfZS[bZjeYjg]);
            }();
        }
        }();pCallbackData=temp_fgmmfZS;}();
void* pUserData;
[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }char* temp_cDeMJHe;[&](){
            if (!json["pUserData"].as_array().size()==0){
                pUserData=NULL;
            return; }pUserData=(char*)malloc(pUserData.as_array().size();*sizeof(char));
        auto& arr=json["pUserData"].as_array();
        for(int GzbOwAQ=0; GzbOwAQ < pUserData.as_array().size();; GzbOwAQ++){
            [&](){pUserData[GzbOwAQ]=static_cast<char>(value_to<int>(json["pUserData"][GzbOwAQ]));}();
        }
        }();pUserData=temp_cDeMJHe;}();
funcpointer(pCallbackData,pUserData);
json.clear();
[&](){
            if (pCallbackData==NULL){
                json["pCallbackData"]=array();
            return; }
        auto& arr=json["pCallbackData"].emplace_array();
        for(int visaHGl=0; visaHGl < 1; visaHGl++){
            [&](){
            auto& temp=json["pCallbackData"][visaHGl].emplace_object();
            return serialize_struct(temp, pCallbackData[visaHGl]);
            }();
        }
        }();
[&](){
            if (pUserData==NULL){
                json["pUserData"]=array();
            return; }[&](){
            if ((char*)(pUserData)==NULL){
                json["pUserData"]=array();
            return; }
        auto& arr=json["pUserData"].emplace_array();
        for(int GzbOwAQ=0; GzbOwAQ < strlen((char*)(pUserData))+1; GzbOwAQ++){
            [&](){json["pUserData"][GzbOwAQ]=(char*)(pUserData)[GzbOwAQ];}();
        }
        }();}();

writeToConn(json);
};
std::map<uintptr_t,PFN_vkGetInstanceProcAddrLUNARG> id_to_PFN_vkGetInstanceProcAddrLUNARG;

    void serialize_funcpointer(object&, PFN_vkGetInstanceProcAddrLUNARG&){
        //Will only be called by the client
        return;
    }
    

            void deserialize_funcpointer(object& json, PFN_vkGetInstanceProcAddrLUNARG& member){
            //Will only be called by the server
            
            member=vkGetInstanceProcAddr;
            };
        

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkInstance_to_server_VkInstance;
            std::map<uintptr_t,uintptr_t> server_VkInstance_to_client_VkInstance;
            
        #endif
        

        void serialize_handle(object& json, VkInstance& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkInstance_to_server_VkInstance.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkInstance %p not found!\n",data);
                    }
                     debug_printf("Serializing VkInstance %p...\n",(VkInstance)client_VkInstance_to_server_VkInstance[(uintptr_t)data]);
                    result=client_VkInstance_to_server_VkInstance[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkInstance& member){
                VkInstance result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkInstance)data);
                    if (server_VkInstance_to_client_VkInstance.contains(data)){
                        result=(VkInstance)server_VkInstance_to_client_VkInstance[data];
                        debug_printf("Deserializing to VkInstance %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkInstance));
                        debug_printf("Mapping to VkInstance %p...\n",handle);
                        server_VkInstance_to_client_VkInstance[data]=(uintptr_t)handle;
                        client_VkInstance_to_server_VkInstance[(uintptr_t)handle]=data;
                        
                        result=(VkInstance)handle; //This is highly dangerous -- I'm basically casting VkInstance* to VkInstance. I should do *((VkInstance*)alloc_icd_object())
                    }
                #else
                    result=(VkInstance)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPhysicalDevice_to_server_VkPhysicalDevice;
            std::map<uintptr_t,uintptr_t> server_VkPhysicalDevice_to_client_VkPhysicalDevice;
            
        #endif
        

        void serialize_handle(object& json, VkPhysicalDevice& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPhysicalDevice_to_server_VkPhysicalDevice.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPhysicalDevice %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPhysicalDevice %p...\n",(VkPhysicalDevice)client_VkPhysicalDevice_to_server_VkPhysicalDevice[(uintptr_t)data]);
                    result=client_VkPhysicalDevice_to_server_VkPhysicalDevice[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkPhysicalDevice& member){
                VkPhysicalDevice result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPhysicalDevice)data);
                    if (server_VkPhysicalDevice_to_client_VkPhysicalDevice.contains(data)){
                        result=(VkPhysicalDevice)server_VkPhysicalDevice_to_client_VkPhysicalDevice[data];
                        debug_printf("Deserializing to VkPhysicalDevice %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPhysicalDevice));
                        debug_printf("Mapping to VkPhysicalDevice %p...\n",handle);
                        server_VkPhysicalDevice_to_client_VkPhysicalDevice[data]=(uintptr_t)handle;
                        client_VkPhysicalDevice_to_server_VkPhysicalDevice[(uintptr_t)handle]=data;
                        
                        result=(VkPhysicalDevice)handle; //This is highly dangerous -- I'm basically casting VkPhysicalDevice* to VkPhysicalDevice. I should do *((VkPhysicalDevice*)alloc_icd_object())
                    }
                #else
                    result=(VkPhysicalDevice)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDevice_to_server_VkDevice;
            std::map<uintptr_t,uintptr_t> server_VkDevice_to_client_VkDevice;
            
        #endif
        

        void serialize_handle(object& json, VkDevice& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDevice_to_server_VkDevice.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDevice %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDevice %p...\n",(VkDevice)client_VkDevice_to_server_VkDevice[(uintptr_t)data]);
                    result=client_VkDevice_to_server_VkDevice[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDevice& member){
                VkDevice result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDevice)data);
                    if (server_VkDevice_to_client_VkDevice.contains(data)){
                        result=(VkDevice)server_VkDevice_to_client_VkDevice[data];
                        debug_printf("Deserializing to VkDevice %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDevice));
                        debug_printf("Mapping to VkDevice %p...\n",handle);
                        server_VkDevice_to_client_VkDevice[data]=(uintptr_t)handle;
                        client_VkDevice_to_server_VkDevice[(uintptr_t)handle]=data;
                        
                        result=(VkDevice)handle; //This is highly dangerous -- I'm basically casting VkDevice* to VkDevice. I should do *((VkDevice*)alloc_icd_object())
                    }
                #else
                    result=(VkDevice)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkQueue_to_server_VkQueue;
            std::map<uintptr_t,uintptr_t> server_VkQueue_to_client_VkQueue;
            
        #endif
        

        void serialize_handle(object& json, VkQueue& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkQueue_to_server_VkQueue.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkQueue %p not found!\n",data);
                    }
                     debug_printf("Serializing VkQueue %p...\n",(VkQueue)client_VkQueue_to_server_VkQueue[(uintptr_t)data]);
                    result=client_VkQueue_to_server_VkQueue[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkQueue& member){
                VkQueue result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkQueue)data);
                    if (server_VkQueue_to_client_VkQueue.contains(data)){
                        result=(VkQueue)server_VkQueue_to_client_VkQueue[data];
                        debug_printf("Deserializing to VkQueue %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkQueue));
                        debug_printf("Mapping to VkQueue %p...\n",handle);
                        server_VkQueue_to_client_VkQueue[data]=(uintptr_t)handle;
                        client_VkQueue_to_server_VkQueue[(uintptr_t)handle]=data;
                        
                        result=(VkQueue)handle; //This is highly dangerous -- I'm basically casting VkQueue* to VkQueue. I should do *((VkQueue*)alloc_icd_object())
                    }
                #else
                    result=(VkQueue)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCommandBuffer_to_server_VkCommandBuffer;
            std::map<uintptr_t,uintptr_t> server_VkCommandBuffer_to_client_VkCommandBuffer;
            
        #endif
        

        void serialize_handle(object& json, VkCommandBuffer& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCommandBuffer_to_server_VkCommandBuffer.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCommandBuffer %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCommandBuffer %p...\n",(VkCommandBuffer)client_VkCommandBuffer_to_server_VkCommandBuffer[(uintptr_t)data]);
                    result=client_VkCommandBuffer_to_server_VkCommandBuffer[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkCommandBuffer& member){
                VkCommandBuffer result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCommandBuffer)data);
                    if (server_VkCommandBuffer_to_client_VkCommandBuffer.contains(data)){
                        result=(VkCommandBuffer)server_VkCommandBuffer_to_client_VkCommandBuffer[data];
                        debug_printf("Deserializing to VkCommandBuffer %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCommandBuffer));
                        debug_printf("Mapping to VkCommandBuffer %p...\n",handle);
                        server_VkCommandBuffer_to_client_VkCommandBuffer[data]=(uintptr_t)handle;
                        client_VkCommandBuffer_to_server_VkCommandBuffer[(uintptr_t)handle]=data;
                        
                        result=(VkCommandBuffer)handle; //This is highly dangerous -- I'm basically casting VkCommandBuffer* to VkCommandBuffer. I should do *((VkCommandBuffer*)alloc_icd_object())
                    }
                #else
                    result=(VkCommandBuffer)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDeviceMemory_to_server_VkDeviceMemory;
            std::map<uintptr_t,uintptr_t> server_VkDeviceMemory_to_client_VkDeviceMemory;
            
        #endif
        

        void serialize_handle(object& json, VkDeviceMemory& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDeviceMemory_to_server_VkDeviceMemory.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDeviceMemory %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDeviceMemory %p...\n",(VkDeviceMemory)client_VkDeviceMemory_to_server_VkDeviceMemory[(uintptr_t)data]);
                    result=client_VkDeviceMemory_to_server_VkDeviceMemory[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDeviceMemory& member){
                VkDeviceMemory result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDeviceMemory)data);
                    if (server_VkDeviceMemory_to_client_VkDeviceMemory.contains(data)){
                        result=(VkDeviceMemory)server_VkDeviceMemory_to_client_VkDeviceMemory[data];
                        debug_printf("Deserializing to VkDeviceMemory %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDeviceMemory));
                        debug_printf("Mapping to VkDeviceMemory %p...\n",handle);
                        server_VkDeviceMemory_to_client_VkDeviceMemory[data]=(uintptr_t)handle;
                        client_VkDeviceMemory_to_server_VkDeviceMemory[(uintptr_t)handle]=data;
                        
                        result=(VkDeviceMemory)handle; //This is highly dangerous -- I'm basically casting VkDeviceMemory* to VkDeviceMemory. I should do *((VkDeviceMemory*)alloc_icd_object())
                    }
                #else
                    result=(VkDeviceMemory)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCommandPool_to_server_VkCommandPool;
            std::map<uintptr_t,uintptr_t> server_VkCommandPool_to_client_VkCommandPool;
            
        #endif
        

        void serialize_handle(object& json, VkCommandPool& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCommandPool_to_server_VkCommandPool.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCommandPool %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCommandPool %p...\n",(VkCommandPool)client_VkCommandPool_to_server_VkCommandPool[(uintptr_t)data]);
                    result=client_VkCommandPool_to_server_VkCommandPool[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkCommandPool& member){
                VkCommandPool result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCommandPool)data);
                    if (server_VkCommandPool_to_client_VkCommandPool.contains(data)){
                        result=(VkCommandPool)server_VkCommandPool_to_client_VkCommandPool[data];
                        debug_printf("Deserializing to VkCommandPool %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCommandPool));
                        debug_printf("Mapping to VkCommandPool %p...\n",handle);
                        server_VkCommandPool_to_client_VkCommandPool[data]=(uintptr_t)handle;
                        client_VkCommandPool_to_server_VkCommandPool[(uintptr_t)handle]=data;
                        
                        result=(VkCommandPool)handle; //This is highly dangerous -- I'm basically casting VkCommandPool* to VkCommandPool. I should do *((VkCommandPool*)alloc_icd_object())
                    }
                #else
                    result=(VkCommandPool)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkBuffer_to_server_VkBuffer;
            std::map<uintptr_t,uintptr_t> server_VkBuffer_to_client_VkBuffer;
            
        #endif
        

        void serialize_handle(object& json, VkBuffer& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkBuffer_to_server_VkBuffer.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkBuffer %p not found!\n",data);
                    }
                     debug_printf("Serializing VkBuffer %p...\n",(VkBuffer)client_VkBuffer_to_server_VkBuffer[(uintptr_t)data]);
                    result=client_VkBuffer_to_server_VkBuffer[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkBuffer& member){
                VkBuffer result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkBuffer)data);
                    if (server_VkBuffer_to_client_VkBuffer.contains(data)){
                        result=(VkBuffer)server_VkBuffer_to_client_VkBuffer[data];
                        debug_printf("Deserializing to VkBuffer %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkBuffer));
                        debug_printf("Mapping to VkBuffer %p...\n",handle);
                        server_VkBuffer_to_client_VkBuffer[data]=(uintptr_t)handle;
                        client_VkBuffer_to_server_VkBuffer[(uintptr_t)handle]=data;
                        
                        result=(VkBuffer)handle; //This is highly dangerous -- I'm basically casting VkBuffer* to VkBuffer. I should do *((VkBuffer*)alloc_icd_object())
                    }
                #else
                    result=(VkBuffer)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkBufferView_to_server_VkBufferView;
            std::map<uintptr_t,uintptr_t> server_VkBufferView_to_client_VkBufferView;
            
        #endif
        

        void serialize_handle(object& json, VkBufferView& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkBufferView_to_server_VkBufferView.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkBufferView %p not found!\n",data);
                    }
                     debug_printf("Serializing VkBufferView %p...\n",(VkBufferView)client_VkBufferView_to_server_VkBufferView[(uintptr_t)data]);
                    result=client_VkBufferView_to_server_VkBufferView[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkBufferView& member){
                VkBufferView result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkBufferView)data);
                    if (server_VkBufferView_to_client_VkBufferView.contains(data)){
                        result=(VkBufferView)server_VkBufferView_to_client_VkBufferView[data];
                        debug_printf("Deserializing to VkBufferView %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkBufferView));
                        debug_printf("Mapping to VkBufferView %p...\n",handle);
                        server_VkBufferView_to_client_VkBufferView[data]=(uintptr_t)handle;
                        client_VkBufferView_to_server_VkBufferView[(uintptr_t)handle]=data;
                        
                        result=(VkBufferView)handle; //This is highly dangerous -- I'm basically casting VkBufferView* to VkBufferView. I should do *((VkBufferView*)alloc_icd_object())
                    }
                #else
                    result=(VkBufferView)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkImage_to_server_VkImage;
            std::map<uintptr_t,uintptr_t> server_VkImage_to_client_VkImage;
            
        #endif
        

        void serialize_handle(object& json, VkImage& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkImage_to_server_VkImage.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkImage %p not found!\n",data);
                    }
                     debug_printf("Serializing VkImage %p...\n",(VkImage)client_VkImage_to_server_VkImage[(uintptr_t)data]);
                    result=client_VkImage_to_server_VkImage[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkImage& member){
                VkImage result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkImage)data);
                    if (server_VkImage_to_client_VkImage.contains(data)){
                        result=(VkImage)server_VkImage_to_client_VkImage[data];
                        debug_printf("Deserializing to VkImage %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkImage));
                        debug_printf("Mapping to VkImage %p...\n",handle);
                        server_VkImage_to_client_VkImage[data]=(uintptr_t)handle;
                        client_VkImage_to_server_VkImage[(uintptr_t)handle]=data;
                        
                        result=(VkImage)handle; //This is highly dangerous -- I'm basically casting VkImage* to VkImage. I should do *((VkImage*)alloc_icd_object())
                    }
                #else
                    result=(VkImage)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkImageView_to_server_VkImageView;
            std::map<uintptr_t,uintptr_t> server_VkImageView_to_client_VkImageView;
            
        #endif
        

        void serialize_handle(object& json, VkImageView& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkImageView_to_server_VkImageView.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkImageView %p not found!\n",data);
                    }
                     debug_printf("Serializing VkImageView %p...\n",(VkImageView)client_VkImageView_to_server_VkImageView[(uintptr_t)data]);
                    result=client_VkImageView_to_server_VkImageView[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkImageView& member){
                VkImageView result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkImageView)data);
                    if (server_VkImageView_to_client_VkImageView.contains(data)){
                        result=(VkImageView)server_VkImageView_to_client_VkImageView[data];
                        debug_printf("Deserializing to VkImageView %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkImageView));
                        debug_printf("Mapping to VkImageView %p...\n",handle);
                        server_VkImageView_to_client_VkImageView[data]=(uintptr_t)handle;
                        client_VkImageView_to_server_VkImageView[(uintptr_t)handle]=data;
                        
                        result=(VkImageView)handle; //This is highly dangerous -- I'm basically casting VkImageView* to VkImageView. I should do *((VkImageView*)alloc_icd_object())
                    }
                #else
                    result=(VkImageView)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkShaderModule_to_server_VkShaderModule;
            std::map<uintptr_t,uintptr_t> server_VkShaderModule_to_client_VkShaderModule;
            
        #endif
        

        void serialize_handle(object& json, VkShaderModule& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkShaderModule_to_server_VkShaderModule.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkShaderModule %p not found!\n",data);
                    }
                     debug_printf("Serializing VkShaderModule %p...\n",(VkShaderModule)client_VkShaderModule_to_server_VkShaderModule[(uintptr_t)data]);
                    result=client_VkShaderModule_to_server_VkShaderModule[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkShaderModule& member){
                VkShaderModule result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkShaderModule)data);
                    if (server_VkShaderModule_to_client_VkShaderModule.contains(data)){
                        result=(VkShaderModule)server_VkShaderModule_to_client_VkShaderModule[data];
                        debug_printf("Deserializing to VkShaderModule %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkShaderModule));
                        debug_printf("Mapping to VkShaderModule %p...\n",handle);
                        server_VkShaderModule_to_client_VkShaderModule[data]=(uintptr_t)handle;
                        client_VkShaderModule_to_server_VkShaderModule[(uintptr_t)handle]=data;
                        
                        result=(VkShaderModule)handle; //This is highly dangerous -- I'm basically casting VkShaderModule* to VkShaderModule. I should do *((VkShaderModule*)alloc_icd_object())
                    }
                #else
                    result=(VkShaderModule)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPipeline_to_server_VkPipeline;
            std::map<uintptr_t,uintptr_t> server_VkPipeline_to_client_VkPipeline;
            
        #endif
        

        void serialize_handle(object& json, VkPipeline& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPipeline_to_server_VkPipeline.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPipeline %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPipeline %p...\n",(VkPipeline)client_VkPipeline_to_server_VkPipeline[(uintptr_t)data]);
                    result=client_VkPipeline_to_server_VkPipeline[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkPipeline& member){
                VkPipeline result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPipeline)data);
                    if (server_VkPipeline_to_client_VkPipeline.contains(data)){
                        result=(VkPipeline)server_VkPipeline_to_client_VkPipeline[data];
                        debug_printf("Deserializing to VkPipeline %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPipeline));
                        debug_printf("Mapping to VkPipeline %p...\n",handle);
                        server_VkPipeline_to_client_VkPipeline[data]=(uintptr_t)handle;
                        client_VkPipeline_to_server_VkPipeline[(uintptr_t)handle]=data;
                        
                        result=(VkPipeline)handle; //This is highly dangerous -- I'm basically casting VkPipeline* to VkPipeline. I should do *((VkPipeline*)alloc_icd_object())
                    }
                #else
                    result=(VkPipeline)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPipelineLayout_to_server_VkPipelineLayout;
            std::map<uintptr_t,uintptr_t> server_VkPipelineLayout_to_client_VkPipelineLayout;
            
        #endif
        

        void serialize_handle(object& json, VkPipelineLayout& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPipelineLayout_to_server_VkPipelineLayout.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPipelineLayout %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPipelineLayout %p...\n",(VkPipelineLayout)client_VkPipelineLayout_to_server_VkPipelineLayout[(uintptr_t)data]);
                    result=client_VkPipelineLayout_to_server_VkPipelineLayout[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkPipelineLayout& member){
                VkPipelineLayout result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPipelineLayout)data);
                    if (server_VkPipelineLayout_to_client_VkPipelineLayout.contains(data)){
                        result=(VkPipelineLayout)server_VkPipelineLayout_to_client_VkPipelineLayout[data];
                        debug_printf("Deserializing to VkPipelineLayout %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPipelineLayout));
                        debug_printf("Mapping to VkPipelineLayout %p...\n",handle);
                        server_VkPipelineLayout_to_client_VkPipelineLayout[data]=(uintptr_t)handle;
                        client_VkPipelineLayout_to_server_VkPipelineLayout[(uintptr_t)handle]=data;
                        
                        result=(VkPipelineLayout)handle; //This is highly dangerous -- I'm basically casting VkPipelineLayout* to VkPipelineLayout. I should do *((VkPipelineLayout*)alloc_icd_object())
                    }
                #else
                    result=(VkPipelineLayout)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSampler_to_server_VkSampler;
            std::map<uintptr_t,uintptr_t> server_VkSampler_to_client_VkSampler;
            
        #endif
        

        void serialize_handle(object& json, VkSampler& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSampler_to_server_VkSampler.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSampler %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSampler %p...\n",(VkSampler)client_VkSampler_to_server_VkSampler[(uintptr_t)data]);
                    result=client_VkSampler_to_server_VkSampler[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkSampler& member){
                VkSampler result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSampler)data);
                    if (server_VkSampler_to_client_VkSampler.contains(data)){
                        result=(VkSampler)server_VkSampler_to_client_VkSampler[data];
                        debug_printf("Deserializing to VkSampler %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSampler));
                        debug_printf("Mapping to VkSampler %p...\n",handle);
                        server_VkSampler_to_client_VkSampler[data]=(uintptr_t)handle;
                        client_VkSampler_to_server_VkSampler[(uintptr_t)handle]=data;
                        
                        result=(VkSampler)handle; //This is highly dangerous -- I'm basically casting VkSampler* to VkSampler. I should do *((VkSampler*)alloc_icd_object())
                    }
                #else
                    result=(VkSampler)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorSet_to_server_VkDescriptorSet;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorSet_to_client_VkDescriptorSet;
            
        #endif
        

        void serialize_handle(object& json, VkDescriptorSet& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorSet_to_server_VkDescriptorSet.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorSet %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorSet %p...\n",(VkDescriptorSet)client_VkDescriptorSet_to_server_VkDescriptorSet[(uintptr_t)data]);
                    result=client_VkDescriptorSet_to_server_VkDescriptorSet[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDescriptorSet& member){
                VkDescriptorSet result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorSet)data);
                    if (server_VkDescriptorSet_to_client_VkDescriptorSet.contains(data)){
                        result=(VkDescriptorSet)server_VkDescriptorSet_to_client_VkDescriptorSet[data];
                        debug_printf("Deserializing to VkDescriptorSet %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorSet));
                        debug_printf("Mapping to VkDescriptorSet %p...\n",handle);
                        server_VkDescriptorSet_to_client_VkDescriptorSet[data]=(uintptr_t)handle;
                        client_VkDescriptorSet_to_server_VkDescriptorSet[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorSet)handle; //This is highly dangerous -- I'm basically casting VkDescriptorSet* to VkDescriptorSet. I should do *((VkDescriptorSet*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorSet)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout;
            
        #endif
        

        void serialize_handle(object& json, VkDescriptorSetLayout& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorSetLayout %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorSetLayout %p...\n",(VkDescriptorSetLayout)client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout[(uintptr_t)data]);
                    result=client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDescriptorSetLayout& member){
                VkDescriptorSetLayout result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorSetLayout)data);
                    if (server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout.contains(data)){
                        result=(VkDescriptorSetLayout)server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout[data];
                        debug_printf("Deserializing to VkDescriptorSetLayout %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorSetLayout));
                        debug_printf("Mapping to VkDescriptorSetLayout %p...\n",handle);
                        server_VkDescriptorSetLayout_to_client_VkDescriptorSetLayout[data]=(uintptr_t)handle;
                        client_VkDescriptorSetLayout_to_server_VkDescriptorSetLayout[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorSetLayout)handle; //This is highly dangerous -- I'm basically casting VkDescriptorSetLayout* to VkDescriptorSetLayout. I should do *((VkDescriptorSetLayout*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorSetLayout)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorPool_to_server_VkDescriptorPool;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorPool_to_client_VkDescriptorPool;
            
        #endif
        

        void serialize_handle(object& json, VkDescriptorPool& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorPool_to_server_VkDescriptorPool.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorPool %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorPool %p...\n",(VkDescriptorPool)client_VkDescriptorPool_to_server_VkDescriptorPool[(uintptr_t)data]);
                    result=client_VkDescriptorPool_to_server_VkDescriptorPool[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDescriptorPool& member){
                VkDescriptorPool result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorPool)data);
                    if (server_VkDescriptorPool_to_client_VkDescriptorPool.contains(data)){
                        result=(VkDescriptorPool)server_VkDescriptorPool_to_client_VkDescriptorPool[data];
                        debug_printf("Deserializing to VkDescriptorPool %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorPool));
                        debug_printf("Mapping to VkDescriptorPool %p...\n",handle);
                        server_VkDescriptorPool_to_client_VkDescriptorPool[data]=(uintptr_t)handle;
                        client_VkDescriptorPool_to_server_VkDescriptorPool[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorPool)handle; //This is highly dangerous -- I'm basically casting VkDescriptorPool* to VkDescriptorPool. I should do *((VkDescriptorPool*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorPool)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkFence_to_server_VkFence;
            std::map<uintptr_t,uintptr_t> server_VkFence_to_client_VkFence;
            
        #endif
        

        void serialize_handle(object& json, VkFence& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkFence_to_server_VkFence.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkFence %p not found!\n",data);
                    }
                     debug_printf("Serializing VkFence %p...\n",(VkFence)client_VkFence_to_server_VkFence[(uintptr_t)data]);
                    result=client_VkFence_to_server_VkFence[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkFence& member){
                VkFence result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkFence)data);
                    if (server_VkFence_to_client_VkFence.contains(data)){
                        result=(VkFence)server_VkFence_to_client_VkFence[data];
                        debug_printf("Deserializing to VkFence %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkFence));
                        debug_printf("Mapping to VkFence %p...\n",handle);
                        server_VkFence_to_client_VkFence[data]=(uintptr_t)handle;
                        client_VkFence_to_server_VkFence[(uintptr_t)handle]=data;
                        
                        result=(VkFence)handle; //This is highly dangerous -- I'm basically casting VkFence* to VkFence. I should do *((VkFence*)alloc_icd_object())
                    }
                #else
                    result=(VkFence)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSemaphore_to_server_VkSemaphore;
            std::map<uintptr_t,uintptr_t> server_VkSemaphore_to_client_VkSemaphore;
            
        #endif
        

        void serialize_handle(object& json, VkSemaphore& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSemaphore_to_server_VkSemaphore.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSemaphore %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSemaphore %p...\n",(VkSemaphore)client_VkSemaphore_to_server_VkSemaphore[(uintptr_t)data]);
                    result=client_VkSemaphore_to_server_VkSemaphore[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkSemaphore& member){
                VkSemaphore result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSemaphore)data);
                    if (server_VkSemaphore_to_client_VkSemaphore.contains(data)){
                        result=(VkSemaphore)server_VkSemaphore_to_client_VkSemaphore[data];
                        debug_printf("Deserializing to VkSemaphore %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSemaphore));
                        debug_printf("Mapping to VkSemaphore %p...\n",handle);
                        server_VkSemaphore_to_client_VkSemaphore[data]=(uintptr_t)handle;
                        client_VkSemaphore_to_server_VkSemaphore[(uintptr_t)handle]=data;
                        
                        result=(VkSemaphore)handle; //This is highly dangerous -- I'm basically casting VkSemaphore* to VkSemaphore. I should do *((VkSemaphore*)alloc_icd_object())
                    }
                #else
                    result=(VkSemaphore)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkEvent_to_server_VkEvent;
            std::map<uintptr_t,uintptr_t> server_VkEvent_to_client_VkEvent;
            
        #endif
        

        void serialize_handle(object& json, VkEvent& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkEvent_to_server_VkEvent.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkEvent %p not found!\n",data);
                    }
                     debug_printf("Serializing VkEvent %p...\n",(VkEvent)client_VkEvent_to_server_VkEvent[(uintptr_t)data]);
                    result=client_VkEvent_to_server_VkEvent[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkEvent& member){
                VkEvent result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkEvent)data);
                    if (server_VkEvent_to_client_VkEvent.contains(data)){
                        result=(VkEvent)server_VkEvent_to_client_VkEvent[data];
                        debug_printf("Deserializing to VkEvent %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkEvent));
                        debug_printf("Mapping to VkEvent %p...\n",handle);
                        server_VkEvent_to_client_VkEvent[data]=(uintptr_t)handle;
                        client_VkEvent_to_server_VkEvent[(uintptr_t)handle]=data;
                        
                        result=(VkEvent)handle; //This is highly dangerous -- I'm basically casting VkEvent* to VkEvent. I should do *((VkEvent*)alloc_icd_object())
                    }
                #else
                    result=(VkEvent)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkQueryPool_to_server_VkQueryPool;
            std::map<uintptr_t,uintptr_t> server_VkQueryPool_to_client_VkQueryPool;
            
        #endif
        

        void serialize_handle(object& json, VkQueryPool& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkQueryPool_to_server_VkQueryPool.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkQueryPool %p not found!\n",data);
                    }
                     debug_printf("Serializing VkQueryPool %p...\n",(VkQueryPool)client_VkQueryPool_to_server_VkQueryPool[(uintptr_t)data]);
                    result=client_VkQueryPool_to_server_VkQueryPool[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkQueryPool& member){
                VkQueryPool result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkQueryPool)data);
                    if (server_VkQueryPool_to_client_VkQueryPool.contains(data)){
                        result=(VkQueryPool)server_VkQueryPool_to_client_VkQueryPool[data];
                        debug_printf("Deserializing to VkQueryPool %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkQueryPool));
                        debug_printf("Mapping to VkQueryPool %p...\n",handle);
                        server_VkQueryPool_to_client_VkQueryPool[data]=(uintptr_t)handle;
                        client_VkQueryPool_to_server_VkQueryPool[(uintptr_t)handle]=data;
                        
                        result=(VkQueryPool)handle; //This is highly dangerous -- I'm basically casting VkQueryPool* to VkQueryPool. I should do *((VkQueryPool*)alloc_icd_object())
                    }
                #else
                    result=(VkQueryPool)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkFramebuffer_to_server_VkFramebuffer;
            std::map<uintptr_t,uintptr_t> server_VkFramebuffer_to_client_VkFramebuffer;
            
        #endif
        

        void serialize_handle(object& json, VkFramebuffer& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkFramebuffer_to_server_VkFramebuffer.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkFramebuffer %p not found!\n",data);
                    }
                     debug_printf("Serializing VkFramebuffer %p...\n",(VkFramebuffer)client_VkFramebuffer_to_server_VkFramebuffer[(uintptr_t)data]);
                    result=client_VkFramebuffer_to_server_VkFramebuffer[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkFramebuffer& member){
                VkFramebuffer result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkFramebuffer)data);
                    if (server_VkFramebuffer_to_client_VkFramebuffer.contains(data)){
                        result=(VkFramebuffer)server_VkFramebuffer_to_client_VkFramebuffer[data];
                        debug_printf("Deserializing to VkFramebuffer %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkFramebuffer));
                        debug_printf("Mapping to VkFramebuffer %p...\n",handle);
                        server_VkFramebuffer_to_client_VkFramebuffer[data]=(uintptr_t)handle;
                        client_VkFramebuffer_to_server_VkFramebuffer[(uintptr_t)handle]=data;
                        
                        result=(VkFramebuffer)handle; //This is highly dangerous -- I'm basically casting VkFramebuffer* to VkFramebuffer. I should do *((VkFramebuffer*)alloc_icd_object())
                    }
                #else
                    result=(VkFramebuffer)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkRenderPass_to_server_VkRenderPass;
            std::map<uintptr_t,uintptr_t> server_VkRenderPass_to_client_VkRenderPass;
            
        #endif
        

        void serialize_handle(object& json, VkRenderPass& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkRenderPass_to_server_VkRenderPass.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkRenderPass %p not found!\n",data);
                    }
                     debug_printf("Serializing VkRenderPass %p...\n",(VkRenderPass)client_VkRenderPass_to_server_VkRenderPass[(uintptr_t)data]);
                    result=client_VkRenderPass_to_server_VkRenderPass[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkRenderPass& member){
                VkRenderPass result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkRenderPass)data);
                    if (server_VkRenderPass_to_client_VkRenderPass.contains(data)){
                        result=(VkRenderPass)server_VkRenderPass_to_client_VkRenderPass[data];
                        debug_printf("Deserializing to VkRenderPass %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkRenderPass));
                        debug_printf("Mapping to VkRenderPass %p...\n",handle);
                        server_VkRenderPass_to_client_VkRenderPass[data]=(uintptr_t)handle;
                        client_VkRenderPass_to_server_VkRenderPass[(uintptr_t)handle]=data;
                        
                        result=(VkRenderPass)handle; //This is highly dangerous -- I'm basically casting VkRenderPass* to VkRenderPass. I should do *((VkRenderPass*)alloc_icd_object())
                    }
                #else
                    result=(VkRenderPass)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPipelineCache_to_server_VkPipelineCache;
            std::map<uintptr_t,uintptr_t> server_VkPipelineCache_to_client_VkPipelineCache;
            
        #endif
        

        void serialize_handle(object& json, VkPipelineCache& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPipelineCache_to_server_VkPipelineCache.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPipelineCache %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPipelineCache %p...\n",(VkPipelineCache)client_VkPipelineCache_to_server_VkPipelineCache[(uintptr_t)data]);
                    result=client_VkPipelineCache_to_server_VkPipelineCache[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkPipelineCache& member){
                VkPipelineCache result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPipelineCache)data);
                    if (server_VkPipelineCache_to_client_VkPipelineCache.contains(data)){
                        result=(VkPipelineCache)server_VkPipelineCache_to_client_VkPipelineCache[data];
                        debug_printf("Deserializing to VkPipelineCache %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPipelineCache));
                        debug_printf("Mapping to VkPipelineCache %p...\n",handle);
                        server_VkPipelineCache_to_client_VkPipelineCache[data]=(uintptr_t)handle;
                        client_VkPipelineCache_to_server_VkPipelineCache[(uintptr_t)handle]=data;
                        
                        result=(VkPipelineCache)handle; //This is highly dangerous -- I'm basically casting VkPipelineCache* to VkPipelineCache. I should do *((VkPipelineCache*)alloc_icd_object())
                    }
                #else
                    result=(VkPipelineCache)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV;
            std::map<uintptr_t,uintptr_t> server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV;
            
        #endif
        

        void serialize_handle(object& json, VkIndirectCommandsLayoutNV& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkIndirectCommandsLayoutNV %p not found!\n",data);
                    }
                     debug_printf("Serializing VkIndirectCommandsLayoutNV %p...\n",(VkIndirectCommandsLayoutNV)client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV[(uintptr_t)data]);
                    result=client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkIndirectCommandsLayoutNV& member){
                VkIndirectCommandsLayoutNV result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkIndirectCommandsLayoutNV)data);
                    if (server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV.contains(data)){
                        result=(VkIndirectCommandsLayoutNV)server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV[data];
                        debug_printf("Deserializing to VkIndirectCommandsLayoutNV %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkIndirectCommandsLayoutNV));
                        debug_printf("Mapping to VkIndirectCommandsLayoutNV %p...\n",handle);
                        server_VkIndirectCommandsLayoutNV_to_client_VkIndirectCommandsLayoutNV[data]=(uintptr_t)handle;
                        client_VkIndirectCommandsLayoutNV_to_server_VkIndirectCommandsLayoutNV[(uintptr_t)handle]=data;
                        
                        result=(VkIndirectCommandsLayoutNV)handle; //This is highly dangerous -- I'm basically casting VkIndirectCommandsLayoutNV* to VkIndirectCommandsLayoutNV. I should do *((VkIndirectCommandsLayoutNV*)alloc_icd_object())
                    }
                #else
                    result=(VkIndirectCommandsLayoutNV)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate;
            
        #endif
        

        void serialize_handle(object& json, VkDescriptorUpdateTemplate& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorUpdateTemplate %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorUpdateTemplate %p...\n",(VkDescriptorUpdateTemplate)client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate[(uintptr_t)data]);
                    result=client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDescriptorUpdateTemplate& member){
                VkDescriptorUpdateTemplate result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorUpdateTemplate)data);
                    if (server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate.contains(data)){
                        result=(VkDescriptorUpdateTemplate)server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate[data];
                        debug_printf("Deserializing to VkDescriptorUpdateTemplate %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorUpdateTemplate));
                        debug_printf("Mapping to VkDescriptorUpdateTemplate %p...\n",handle);
                        server_VkDescriptorUpdateTemplate_to_client_VkDescriptorUpdateTemplate[data]=(uintptr_t)handle;
                        client_VkDescriptorUpdateTemplate_to_server_VkDescriptorUpdateTemplate[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorUpdateTemplate)handle; //This is highly dangerous -- I'm basically casting VkDescriptorUpdateTemplate* to VkDescriptorUpdateTemplate. I should do *((VkDescriptorUpdateTemplate*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorUpdateTemplate)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR;
            std::map<uintptr_t,uintptr_t> server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR;
            
        #endif
        

        void serialize_handle(object& json, VkDescriptorUpdateTemplateKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDescriptorUpdateTemplateKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDescriptorUpdateTemplateKHR %p...\n",(VkDescriptorUpdateTemplateKHR)client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR[(uintptr_t)data]);
                    result=client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDescriptorUpdateTemplateKHR& member){
                VkDescriptorUpdateTemplateKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDescriptorUpdateTemplateKHR)data);
                    if (server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR.contains(data)){
                        result=(VkDescriptorUpdateTemplateKHR)server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR[data];
                        debug_printf("Deserializing to VkDescriptorUpdateTemplateKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDescriptorUpdateTemplateKHR));
                        debug_printf("Mapping to VkDescriptorUpdateTemplateKHR %p...\n",handle);
                        server_VkDescriptorUpdateTemplateKHR_to_client_VkDescriptorUpdateTemplateKHR[data]=(uintptr_t)handle;
                        client_VkDescriptorUpdateTemplateKHR_to_server_VkDescriptorUpdateTemplateKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDescriptorUpdateTemplateKHR)handle; //This is highly dangerous -- I'm basically casting VkDescriptorUpdateTemplateKHR* to VkDescriptorUpdateTemplateKHR. I should do *((VkDescriptorUpdateTemplateKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDescriptorUpdateTemplateKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion;
            std::map<uintptr_t,uintptr_t> server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion;
            
        #endif
        

        void serialize_handle(object& json, VkSamplerYcbcrConversion& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSamplerYcbcrConversion %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSamplerYcbcrConversion %p...\n",(VkSamplerYcbcrConversion)client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion[(uintptr_t)data]);
                    result=client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkSamplerYcbcrConversion& member){
                VkSamplerYcbcrConversion result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSamplerYcbcrConversion)data);
                    if (server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion.contains(data)){
                        result=(VkSamplerYcbcrConversion)server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion[data];
                        debug_printf("Deserializing to VkSamplerYcbcrConversion %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSamplerYcbcrConversion));
                        debug_printf("Mapping to VkSamplerYcbcrConversion %p...\n",handle);
                        server_VkSamplerYcbcrConversion_to_client_VkSamplerYcbcrConversion[data]=(uintptr_t)handle;
                        client_VkSamplerYcbcrConversion_to_server_VkSamplerYcbcrConversion[(uintptr_t)handle]=data;
                        
                        result=(VkSamplerYcbcrConversion)handle; //This is highly dangerous -- I'm basically casting VkSamplerYcbcrConversion* to VkSamplerYcbcrConversion. I should do *((VkSamplerYcbcrConversion*)alloc_icd_object())
                    }
                #else
                    result=(VkSamplerYcbcrConversion)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR;
            std::map<uintptr_t,uintptr_t> server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR;
            
        #endif
        

        void serialize_handle(object& json, VkSamplerYcbcrConversionKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSamplerYcbcrConversionKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSamplerYcbcrConversionKHR %p...\n",(VkSamplerYcbcrConversionKHR)client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR[(uintptr_t)data]);
                    result=client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkSamplerYcbcrConversionKHR& member){
                VkSamplerYcbcrConversionKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSamplerYcbcrConversionKHR)data);
                    if (server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR.contains(data)){
                        result=(VkSamplerYcbcrConversionKHR)server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR[data];
                        debug_printf("Deserializing to VkSamplerYcbcrConversionKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSamplerYcbcrConversionKHR));
                        debug_printf("Mapping to VkSamplerYcbcrConversionKHR %p...\n",handle);
                        server_VkSamplerYcbcrConversionKHR_to_client_VkSamplerYcbcrConversionKHR[data]=(uintptr_t)handle;
                        client_VkSamplerYcbcrConversionKHR_to_server_VkSamplerYcbcrConversionKHR[(uintptr_t)handle]=data;
                        
                        result=(VkSamplerYcbcrConversionKHR)handle; //This is highly dangerous -- I'm basically casting VkSamplerYcbcrConversionKHR* to VkSamplerYcbcrConversionKHR. I should do *((VkSamplerYcbcrConversionKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkSamplerYcbcrConversionKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkValidationCacheEXT_to_server_VkValidationCacheEXT;
            std::map<uintptr_t,uintptr_t> server_VkValidationCacheEXT_to_client_VkValidationCacheEXT;
            
        #endif
        

        void serialize_handle(object& json, VkValidationCacheEXT& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkValidationCacheEXT_to_server_VkValidationCacheEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkValidationCacheEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkValidationCacheEXT %p...\n",(VkValidationCacheEXT)client_VkValidationCacheEXT_to_server_VkValidationCacheEXT[(uintptr_t)data]);
                    result=client_VkValidationCacheEXT_to_server_VkValidationCacheEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkValidationCacheEXT& member){
                VkValidationCacheEXT result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkValidationCacheEXT)data);
                    if (server_VkValidationCacheEXT_to_client_VkValidationCacheEXT.contains(data)){
                        result=(VkValidationCacheEXT)server_VkValidationCacheEXT_to_client_VkValidationCacheEXT[data];
                        debug_printf("Deserializing to VkValidationCacheEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkValidationCacheEXT));
                        debug_printf("Mapping to VkValidationCacheEXT %p...\n",handle);
                        server_VkValidationCacheEXT_to_client_VkValidationCacheEXT[data]=(uintptr_t)handle;
                        client_VkValidationCacheEXT_to_server_VkValidationCacheEXT[(uintptr_t)handle]=data;
                        
                        result=(VkValidationCacheEXT)handle; //This is highly dangerous -- I'm basically casting VkValidationCacheEXT* to VkValidationCacheEXT. I should do *((VkValidationCacheEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkValidationCacheEXT)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR;
            std::map<uintptr_t,uintptr_t> server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR;
            
        #endif
        

        void serialize_handle(object& json, VkAccelerationStructureKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkAccelerationStructureKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkAccelerationStructureKHR %p...\n",(VkAccelerationStructureKHR)client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR[(uintptr_t)data]);
                    result=client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkAccelerationStructureKHR& member){
                VkAccelerationStructureKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkAccelerationStructureKHR)data);
                    if (server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR.contains(data)){
                        result=(VkAccelerationStructureKHR)server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR[data];
                        debug_printf("Deserializing to VkAccelerationStructureKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkAccelerationStructureKHR));
                        debug_printf("Mapping to VkAccelerationStructureKHR %p...\n",handle);
                        server_VkAccelerationStructureKHR_to_client_VkAccelerationStructureKHR[data]=(uintptr_t)handle;
                        client_VkAccelerationStructureKHR_to_server_VkAccelerationStructureKHR[(uintptr_t)handle]=data;
                        
                        result=(VkAccelerationStructureKHR)handle; //This is highly dangerous -- I'm basically casting VkAccelerationStructureKHR* to VkAccelerationStructureKHR. I should do *((VkAccelerationStructureKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkAccelerationStructureKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV;
            std::map<uintptr_t,uintptr_t> server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV;
            
        #endif
        

        void serialize_handle(object& json, VkAccelerationStructureNV& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkAccelerationStructureNV %p not found!\n",data);
                    }
                     debug_printf("Serializing VkAccelerationStructureNV %p...\n",(VkAccelerationStructureNV)client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV[(uintptr_t)data]);
                    result=client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkAccelerationStructureNV& member){
                VkAccelerationStructureNV result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkAccelerationStructureNV)data);
                    if (server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV.contains(data)){
                        result=(VkAccelerationStructureNV)server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV[data];
                        debug_printf("Deserializing to VkAccelerationStructureNV %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkAccelerationStructureNV));
                        debug_printf("Mapping to VkAccelerationStructureNV %p...\n",handle);
                        server_VkAccelerationStructureNV_to_client_VkAccelerationStructureNV[data]=(uintptr_t)handle;
                        client_VkAccelerationStructureNV_to_server_VkAccelerationStructureNV[(uintptr_t)handle]=data;
                        
                        result=(VkAccelerationStructureNV)handle; //This is highly dangerous -- I'm basically casting VkAccelerationStructureNV* to VkAccelerationStructureNV. I should do *((VkAccelerationStructureNV*)alloc_icd_object())
                    }
                #else
                    result=(VkAccelerationStructureNV)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL;
            std::map<uintptr_t,uintptr_t> server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL;
            
        #endif
        

        void serialize_handle(object& json, VkPerformanceConfigurationINTEL& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPerformanceConfigurationINTEL %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPerformanceConfigurationINTEL %p...\n",(VkPerformanceConfigurationINTEL)client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL[(uintptr_t)data]);
                    result=client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkPerformanceConfigurationINTEL& member){
                VkPerformanceConfigurationINTEL result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPerformanceConfigurationINTEL)data);
                    if (server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL.contains(data)){
                        result=(VkPerformanceConfigurationINTEL)server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL[data];
                        debug_printf("Deserializing to VkPerformanceConfigurationINTEL %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPerformanceConfigurationINTEL));
                        debug_printf("Mapping to VkPerformanceConfigurationINTEL %p...\n",handle);
                        server_VkPerformanceConfigurationINTEL_to_client_VkPerformanceConfigurationINTEL[data]=(uintptr_t)handle;
                        client_VkPerformanceConfigurationINTEL_to_server_VkPerformanceConfigurationINTEL[(uintptr_t)handle]=data;
                        
                        result=(VkPerformanceConfigurationINTEL)handle; //This is highly dangerous -- I'm basically casting VkPerformanceConfigurationINTEL* to VkPerformanceConfigurationINTEL. I should do *((VkPerformanceConfigurationINTEL*)alloc_icd_object())
                    }
                #else
                    result=(VkPerformanceConfigurationINTEL)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR;
            std::map<uintptr_t,uintptr_t> server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR;
            
        #endif
        

        void serialize_handle(object& json, VkDeferredOperationKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDeferredOperationKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDeferredOperationKHR %p...\n",(VkDeferredOperationKHR)client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR[(uintptr_t)data]);
                    result=client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDeferredOperationKHR& member){
                VkDeferredOperationKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDeferredOperationKHR)data);
                    if (server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR.contains(data)){
                        result=(VkDeferredOperationKHR)server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR[data];
                        debug_printf("Deserializing to VkDeferredOperationKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDeferredOperationKHR));
                        debug_printf("Mapping to VkDeferredOperationKHR %p...\n",handle);
                        server_VkDeferredOperationKHR_to_client_VkDeferredOperationKHR[data]=(uintptr_t)handle;
                        client_VkDeferredOperationKHR_to_server_VkDeferredOperationKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDeferredOperationKHR)handle; //This is highly dangerous -- I'm basically casting VkDeferredOperationKHR* to VkDeferredOperationKHR. I should do *((VkDeferredOperationKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDeferredOperationKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPrivateDataSlot_to_server_VkPrivateDataSlot;
            std::map<uintptr_t,uintptr_t> server_VkPrivateDataSlot_to_client_VkPrivateDataSlot;
            
        #endif
        

        void serialize_handle(object& json, VkPrivateDataSlot& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPrivateDataSlot_to_server_VkPrivateDataSlot.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPrivateDataSlot %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPrivateDataSlot %p...\n",(VkPrivateDataSlot)client_VkPrivateDataSlot_to_server_VkPrivateDataSlot[(uintptr_t)data]);
                    result=client_VkPrivateDataSlot_to_server_VkPrivateDataSlot[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkPrivateDataSlot& member){
                VkPrivateDataSlot result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPrivateDataSlot)data);
                    if (server_VkPrivateDataSlot_to_client_VkPrivateDataSlot.contains(data)){
                        result=(VkPrivateDataSlot)server_VkPrivateDataSlot_to_client_VkPrivateDataSlot[data];
                        debug_printf("Deserializing to VkPrivateDataSlot %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPrivateDataSlot));
                        debug_printf("Mapping to VkPrivateDataSlot %p...\n",handle);
                        server_VkPrivateDataSlot_to_client_VkPrivateDataSlot[data]=(uintptr_t)handle;
                        client_VkPrivateDataSlot_to_server_VkPrivateDataSlot[(uintptr_t)handle]=data;
                        
                        result=(VkPrivateDataSlot)handle; //This is highly dangerous -- I'm basically casting VkPrivateDataSlot* to VkPrivateDataSlot. I should do *((VkPrivateDataSlot*)alloc_icd_object())
                    }
                #else
                    result=(VkPrivateDataSlot)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT;
            std::map<uintptr_t,uintptr_t> server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT;
            
        #endif
        

        void serialize_handle(object& json, VkPrivateDataSlotEXT& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkPrivateDataSlotEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkPrivateDataSlotEXT %p...\n",(VkPrivateDataSlotEXT)client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT[(uintptr_t)data]);
                    result=client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkPrivateDataSlotEXT& member){
                VkPrivateDataSlotEXT result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkPrivateDataSlotEXT)data);
                    if (server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT.contains(data)){
                        result=(VkPrivateDataSlotEXT)server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT[data];
                        debug_printf("Deserializing to VkPrivateDataSlotEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkPrivateDataSlotEXT));
                        debug_printf("Mapping to VkPrivateDataSlotEXT %p...\n",handle);
                        server_VkPrivateDataSlotEXT_to_client_VkPrivateDataSlotEXT[data]=(uintptr_t)handle;
                        client_VkPrivateDataSlotEXT_to_server_VkPrivateDataSlotEXT[(uintptr_t)handle]=data;
                        
                        result=(VkPrivateDataSlotEXT)handle; //This is highly dangerous -- I'm basically casting VkPrivateDataSlotEXT* to VkPrivateDataSlotEXT. I should do *((VkPrivateDataSlotEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkPrivateDataSlotEXT)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCuModuleNVX_to_server_VkCuModuleNVX;
            std::map<uintptr_t,uintptr_t> server_VkCuModuleNVX_to_client_VkCuModuleNVX;
            
        #endif
        

        void serialize_handle(object& json, VkCuModuleNVX& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCuModuleNVX_to_server_VkCuModuleNVX.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCuModuleNVX %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCuModuleNVX %p...\n",(VkCuModuleNVX)client_VkCuModuleNVX_to_server_VkCuModuleNVX[(uintptr_t)data]);
                    result=client_VkCuModuleNVX_to_server_VkCuModuleNVX[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkCuModuleNVX& member){
                VkCuModuleNVX result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCuModuleNVX)data);
                    if (server_VkCuModuleNVX_to_client_VkCuModuleNVX.contains(data)){
                        result=(VkCuModuleNVX)server_VkCuModuleNVX_to_client_VkCuModuleNVX[data];
                        debug_printf("Deserializing to VkCuModuleNVX %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCuModuleNVX));
                        debug_printf("Mapping to VkCuModuleNVX %p...\n",handle);
                        server_VkCuModuleNVX_to_client_VkCuModuleNVX[data]=(uintptr_t)handle;
                        client_VkCuModuleNVX_to_server_VkCuModuleNVX[(uintptr_t)handle]=data;
                        
                        result=(VkCuModuleNVX)handle; //This is highly dangerous -- I'm basically casting VkCuModuleNVX* to VkCuModuleNVX. I should do *((VkCuModuleNVX*)alloc_icd_object())
                    }
                #else
                    result=(VkCuModuleNVX)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkCuFunctionNVX_to_server_VkCuFunctionNVX;
            std::map<uintptr_t,uintptr_t> server_VkCuFunctionNVX_to_client_VkCuFunctionNVX;
            
        #endif
        

        void serialize_handle(object& json, VkCuFunctionNVX& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkCuFunctionNVX_to_server_VkCuFunctionNVX.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkCuFunctionNVX %p not found!\n",data);
                    }
                     debug_printf("Serializing VkCuFunctionNVX %p...\n",(VkCuFunctionNVX)client_VkCuFunctionNVX_to_server_VkCuFunctionNVX[(uintptr_t)data]);
                    result=client_VkCuFunctionNVX_to_server_VkCuFunctionNVX[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkCuFunctionNVX& member){
                VkCuFunctionNVX result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkCuFunctionNVX)data);
                    if (server_VkCuFunctionNVX_to_client_VkCuFunctionNVX.contains(data)){
                        result=(VkCuFunctionNVX)server_VkCuFunctionNVX_to_client_VkCuFunctionNVX[data];
                        debug_printf("Deserializing to VkCuFunctionNVX %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkCuFunctionNVX));
                        debug_printf("Mapping to VkCuFunctionNVX %p...\n",handle);
                        server_VkCuFunctionNVX_to_client_VkCuFunctionNVX[data]=(uintptr_t)handle;
                        client_VkCuFunctionNVX_to_server_VkCuFunctionNVX[(uintptr_t)handle]=data;
                        
                        result=(VkCuFunctionNVX)handle; //This is highly dangerous -- I'm basically casting VkCuFunctionNVX* to VkCuFunctionNVX. I should do *((VkCuFunctionNVX*)alloc_icd_object())
                    }
                #else
                    result=(VkCuFunctionNVX)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV;
            std::map<uintptr_t,uintptr_t> server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV;
            
        #endif
        

        void serialize_handle(object& json, VkOpticalFlowSessionNV& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkOpticalFlowSessionNV %p not found!\n",data);
                    }
                     debug_printf("Serializing VkOpticalFlowSessionNV %p...\n",(VkOpticalFlowSessionNV)client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV[(uintptr_t)data]);
                    result=client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkOpticalFlowSessionNV& member){
                VkOpticalFlowSessionNV result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkOpticalFlowSessionNV)data);
                    if (server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV.contains(data)){
                        result=(VkOpticalFlowSessionNV)server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV[data];
                        debug_printf("Deserializing to VkOpticalFlowSessionNV %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkOpticalFlowSessionNV));
                        debug_printf("Mapping to VkOpticalFlowSessionNV %p...\n",handle);
                        server_VkOpticalFlowSessionNV_to_client_VkOpticalFlowSessionNV[data]=(uintptr_t)handle;
                        client_VkOpticalFlowSessionNV_to_server_VkOpticalFlowSessionNV[(uintptr_t)handle]=data;
                        
                        result=(VkOpticalFlowSessionNV)handle; //This is highly dangerous -- I'm basically casting VkOpticalFlowSessionNV* to VkOpticalFlowSessionNV. I should do *((VkOpticalFlowSessionNV*)alloc_icd_object())
                    }
                #else
                    result=(VkOpticalFlowSessionNV)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkMicromapEXT_to_server_VkMicromapEXT;
            std::map<uintptr_t,uintptr_t> server_VkMicromapEXT_to_client_VkMicromapEXT;
            
        #endif
        

        void serialize_handle(object& json, VkMicromapEXT& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkMicromapEXT_to_server_VkMicromapEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkMicromapEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkMicromapEXT %p...\n",(VkMicromapEXT)client_VkMicromapEXT_to_server_VkMicromapEXT[(uintptr_t)data]);
                    result=client_VkMicromapEXT_to_server_VkMicromapEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkMicromapEXT& member){
                VkMicromapEXT result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkMicromapEXT)data);
                    if (server_VkMicromapEXT_to_client_VkMicromapEXT.contains(data)){
                        result=(VkMicromapEXT)server_VkMicromapEXT_to_client_VkMicromapEXT[data];
                        debug_printf("Deserializing to VkMicromapEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkMicromapEXT));
                        debug_printf("Mapping to VkMicromapEXT %p...\n",handle);
                        server_VkMicromapEXT_to_client_VkMicromapEXT[data]=(uintptr_t)handle;
                        client_VkMicromapEXT_to_server_VkMicromapEXT[(uintptr_t)handle]=data;
                        
                        result=(VkMicromapEXT)handle; //This is highly dangerous -- I'm basically casting VkMicromapEXT* to VkMicromapEXT. I should do *((VkMicromapEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkMicromapEXT)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkShaderEXT_to_server_VkShaderEXT;
            std::map<uintptr_t,uintptr_t> server_VkShaderEXT_to_client_VkShaderEXT;
            
        #endif
        

        void serialize_handle(object& json, VkShaderEXT& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkShaderEXT_to_server_VkShaderEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkShaderEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkShaderEXT %p...\n",(VkShaderEXT)client_VkShaderEXT_to_server_VkShaderEXT[(uintptr_t)data]);
                    result=client_VkShaderEXT_to_server_VkShaderEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkShaderEXT& member){
                VkShaderEXT result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkShaderEXT)data);
                    if (server_VkShaderEXT_to_client_VkShaderEXT.contains(data)){
                        result=(VkShaderEXT)server_VkShaderEXT_to_client_VkShaderEXT[data];
                        debug_printf("Deserializing to VkShaderEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkShaderEXT));
                        debug_printf("Mapping to VkShaderEXT %p...\n",handle);
                        server_VkShaderEXT_to_client_VkShaderEXT[data]=(uintptr_t)handle;
                        client_VkShaderEXT_to_server_VkShaderEXT[(uintptr_t)handle]=data;
                        
                        result=(VkShaderEXT)handle; //This is highly dangerous -- I'm basically casting VkShaderEXT* to VkShaderEXT. I should do *((VkShaderEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkShaderEXT)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDisplayKHR_to_server_VkDisplayKHR;
            std::map<uintptr_t,uintptr_t> server_VkDisplayKHR_to_client_VkDisplayKHR;
            
        #endif
        

        void serialize_handle(object& json, VkDisplayKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDisplayKHR_to_server_VkDisplayKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDisplayKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDisplayKHR %p...\n",(VkDisplayKHR)client_VkDisplayKHR_to_server_VkDisplayKHR[(uintptr_t)data]);
                    result=client_VkDisplayKHR_to_server_VkDisplayKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDisplayKHR& member){
                VkDisplayKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDisplayKHR)data);
                    if (server_VkDisplayKHR_to_client_VkDisplayKHR.contains(data)){
                        result=(VkDisplayKHR)server_VkDisplayKHR_to_client_VkDisplayKHR[data];
                        debug_printf("Deserializing to VkDisplayKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDisplayKHR));
                        debug_printf("Mapping to VkDisplayKHR %p...\n",handle);
                        server_VkDisplayKHR_to_client_VkDisplayKHR[data]=(uintptr_t)handle;
                        client_VkDisplayKHR_to_server_VkDisplayKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDisplayKHR)handle; //This is highly dangerous -- I'm basically casting VkDisplayKHR* to VkDisplayKHR. I should do *((VkDisplayKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDisplayKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDisplayModeKHR_to_server_VkDisplayModeKHR;
            std::map<uintptr_t,uintptr_t> server_VkDisplayModeKHR_to_client_VkDisplayModeKHR;
            
        #endif
        

        void serialize_handle(object& json, VkDisplayModeKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDisplayModeKHR_to_server_VkDisplayModeKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDisplayModeKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDisplayModeKHR %p...\n",(VkDisplayModeKHR)client_VkDisplayModeKHR_to_server_VkDisplayModeKHR[(uintptr_t)data]);
                    result=client_VkDisplayModeKHR_to_server_VkDisplayModeKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDisplayModeKHR& member){
                VkDisplayModeKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDisplayModeKHR)data);
                    if (server_VkDisplayModeKHR_to_client_VkDisplayModeKHR.contains(data)){
                        result=(VkDisplayModeKHR)server_VkDisplayModeKHR_to_client_VkDisplayModeKHR[data];
                        debug_printf("Deserializing to VkDisplayModeKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDisplayModeKHR));
                        debug_printf("Mapping to VkDisplayModeKHR %p...\n",handle);
                        server_VkDisplayModeKHR_to_client_VkDisplayModeKHR[data]=(uintptr_t)handle;
                        client_VkDisplayModeKHR_to_server_VkDisplayModeKHR[(uintptr_t)handle]=data;
                        
                        result=(VkDisplayModeKHR)handle; //This is highly dangerous -- I'm basically casting VkDisplayModeKHR* to VkDisplayModeKHR. I should do *((VkDisplayModeKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkDisplayModeKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSurfaceKHR_to_server_VkSurfaceKHR;
            std::map<uintptr_t,uintptr_t> server_VkSurfaceKHR_to_client_VkSurfaceKHR;
            
        #endif
        

        void serialize_handle(object& json, VkSurfaceKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSurfaceKHR_to_server_VkSurfaceKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSurfaceKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSurfaceKHR %p...\n",(VkSurfaceKHR)client_VkSurfaceKHR_to_server_VkSurfaceKHR[(uintptr_t)data]);
                    result=client_VkSurfaceKHR_to_server_VkSurfaceKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkSurfaceKHR& member){
                VkSurfaceKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSurfaceKHR)data);
                    if (server_VkSurfaceKHR_to_client_VkSurfaceKHR.contains(data)){
                        result=(VkSurfaceKHR)server_VkSurfaceKHR_to_client_VkSurfaceKHR[data];
                        debug_printf("Deserializing to VkSurfaceKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSurfaceKHR));
                        debug_printf("Mapping to VkSurfaceKHR %p...\n",handle);
                        server_VkSurfaceKHR_to_client_VkSurfaceKHR[data]=(uintptr_t)handle;
                        client_VkSurfaceKHR_to_server_VkSurfaceKHR[(uintptr_t)handle]=data;
                        
                        result=(VkSurfaceKHR)handle; //This is highly dangerous -- I'm basically casting VkSurfaceKHR* to VkSurfaceKHR. I should do *((VkSurfaceKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkSurfaceKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkSwapchainKHR_to_server_VkSwapchainKHR;
            std::map<uintptr_t,uintptr_t> server_VkSwapchainKHR_to_client_VkSwapchainKHR;
            
        #endif
        

        void serialize_handle(object& json, VkSwapchainKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkSwapchainKHR_to_server_VkSwapchainKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkSwapchainKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkSwapchainKHR %p...\n",(VkSwapchainKHR)client_VkSwapchainKHR_to_server_VkSwapchainKHR[(uintptr_t)data]);
                    result=client_VkSwapchainKHR_to_server_VkSwapchainKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkSwapchainKHR& member){
                VkSwapchainKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkSwapchainKHR)data);
                    if (server_VkSwapchainKHR_to_client_VkSwapchainKHR.contains(data)){
                        result=(VkSwapchainKHR)server_VkSwapchainKHR_to_client_VkSwapchainKHR[data];
                        debug_printf("Deserializing to VkSwapchainKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkSwapchainKHR));
                        debug_printf("Mapping to VkSwapchainKHR %p...\n",handle);
                        server_VkSwapchainKHR_to_client_VkSwapchainKHR[data]=(uintptr_t)handle;
                        client_VkSwapchainKHR_to_server_VkSwapchainKHR[(uintptr_t)handle]=data;
                        
                        result=(VkSwapchainKHR)handle; //This is highly dangerous -- I'm basically casting VkSwapchainKHR* to VkSwapchainKHR. I should do *((VkSwapchainKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkSwapchainKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT;
            std::map<uintptr_t,uintptr_t> server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT;
            
        #endif
        

        void serialize_handle(object& json, VkDebugReportCallbackEXT& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDebugReportCallbackEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDebugReportCallbackEXT %p...\n",(VkDebugReportCallbackEXT)client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT[(uintptr_t)data]);
                    result=client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDebugReportCallbackEXT& member){
                VkDebugReportCallbackEXT result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDebugReportCallbackEXT)data);
                    if (server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT.contains(data)){
                        result=(VkDebugReportCallbackEXT)server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT[data];
                        debug_printf("Deserializing to VkDebugReportCallbackEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDebugReportCallbackEXT));
                        debug_printf("Mapping to VkDebugReportCallbackEXT %p...\n",handle);
                        server_VkDebugReportCallbackEXT_to_client_VkDebugReportCallbackEXT[data]=(uintptr_t)handle;
                        client_VkDebugReportCallbackEXT_to_server_VkDebugReportCallbackEXT[(uintptr_t)handle]=data;
                        
                        result=(VkDebugReportCallbackEXT)handle; //This is highly dangerous -- I'm basically casting VkDebugReportCallbackEXT* to VkDebugReportCallbackEXT. I should do *((VkDebugReportCallbackEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkDebugReportCallbackEXT)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT;
            std::map<uintptr_t,uintptr_t> server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT;
            
        #endif
        

        void serialize_handle(object& json, VkDebugUtilsMessengerEXT& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkDebugUtilsMessengerEXT %p not found!\n",data);
                    }
                     debug_printf("Serializing VkDebugUtilsMessengerEXT %p...\n",(VkDebugUtilsMessengerEXT)client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT[(uintptr_t)data]);
                    result=client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkDebugUtilsMessengerEXT& member){
                VkDebugUtilsMessengerEXT result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkDebugUtilsMessengerEXT)data);
                    if (server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT.contains(data)){
                        result=(VkDebugUtilsMessengerEXT)server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT[data];
                        debug_printf("Deserializing to VkDebugUtilsMessengerEXT %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkDebugUtilsMessengerEXT));
                        debug_printf("Mapping to VkDebugUtilsMessengerEXT %p...\n",handle);
                        server_VkDebugUtilsMessengerEXT_to_client_VkDebugUtilsMessengerEXT[data]=(uintptr_t)handle;
                        client_VkDebugUtilsMessengerEXT_to_server_VkDebugUtilsMessengerEXT[(uintptr_t)handle]=data;
                        
                        result=(VkDebugUtilsMessengerEXT)handle; //This is highly dangerous -- I'm basically casting VkDebugUtilsMessengerEXT* to VkDebugUtilsMessengerEXT. I should do *((VkDebugUtilsMessengerEXT*)alloc_icd_object())
                    }
                #else
                    result=(VkDebugUtilsMessengerEXT)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkVideoSessionKHR_to_server_VkVideoSessionKHR;
            std::map<uintptr_t,uintptr_t> server_VkVideoSessionKHR_to_client_VkVideoSessionKHR;
            
        #endif
        

        void serialize_handle(object& json, VkVideoSessionKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkVideoSessionKHR_to_server_VkVideoSessionKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkVideoSessionKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkVideoSessionKHR %p...\n",(VkVideoSessionKHR)client_VkVideoSessionKHR_to_server_VkVideoSessionKHR[(uintptr_t)data]);
                    result=client_VkVideoSessionKHR_to_server_VkVideoSessionKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkVideoSessionKHR& member){
                VkVideoSessionKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkVideoSessionKHR)data);
                    if (server_VkVideoSessionKHR_to_client_VkVideoSessionKHR.contains(data)){
                        result=(VkVideoSessionKHR)server_VkVideoSessionKHR_to_client_VkVideoSessionKHR[data];
                        debug_printf("Deserializing to VkVideoSessionKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkVideoSessionKHR));
                        debug_printf("Mapping to VkVideoSessionKHR %p...\n",handle);
                        server_VkVideoSessionKHR_to_client_VkVideoSessionKHR[data]=(uintptr_t)handle;
                        client_VkVideoSessionKHR_to_server_VkVideoSessionKHR[(uintptr_t)handle]=data;
                        
                        result=(VkVideoSessionKHR)handle; //This is highly dangerous -- I'm basically casting VkVideoSessionKHR* to VkVideoSessionKHR. I should do *((VkVideoSessionKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkVideoSessionKHR)data;
                #endif
                
                member=result;
       }

        #ifdef CLIENT
            std::map<uintptr_t,uintptr_t> client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR;
            std::map<uintptr_t,uintptr_t> server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR;
            
        #endif
        

        void serialize_handle(object& json, VkVideoSessionParametersKHR& data){
            uintptr_t result;
            #ifdef CLIENT
                if (data==NULL){
                    result=(uintptr_t)NULL;
                    debug_printf("Handle is NULL, serializing to %p...\n",result);
                }else{
                    if(!(client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR.contains( (uintptr_t)data ))){
                        debug_printf("Panic: VkVideoSessionParametersKHR %p not found!\n",data);
                    }
                     debug_printf("Serializing VkVideoSessionParametersKHR %p...\n",(VkVideoSessionParametersKHR)client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR[(uintptr_t)data]);
                    result=client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR[(uintptr_t)data];
                }
            #else
                result=(uintptr_t)data;
            #endif
        

            json=result;
        }
       

          void deserialize_handle(object& json, VkVideoSessionParametersKHR& member){
                VkVideoSessionParametersKHR result;
                auto data=value_to<uintptr_t>(json);
                
                #ifdef CLIENT
                    debug_printf("Handling server pointer %p:\n",(VkVideoSessionParametersKHR)data);
                    if (server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR.contains(data)){
                        result=(VkVideoSessionParametersKHR)server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR[data];
                        debug_printf("Deserializing to VkVideoSessionParametersKHR %p...\n",result);
                    }else{
                        auto handle=malloc(sizeof(VkVideoSessionParametersKHR));
                        debug_printf("Mapping to VkVideoSessionParametersKHR %p...\n",handle);
                        server_VkVideoSessionParametersKHR_to_client_VkVideoSessionParametersKHR[data]=(uintptr_t)handle;
                        client_VkVideoSessionParametersKHR_to_server_VkVideoSessionParametersKHR[(uintptr_t)handle]=data;
                        
                        result=(VkVideoSessionParametersKHR)handle; //This is highly dangerous -- I'm basically casting VkVideoSessionParametersKHR* to VkVideoSessionParametersKHR. I should do *((VkVideoSessionParametersKHR*)alloc_icd_object())
                    }
                #else
                    result=(VkVideoSessionParametersKHR)data;
                #endif
                
                member=result;
       }
