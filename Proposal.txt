A client<->server flow looks like this:
	1. The client calls a Vulkan function
	2. The driver sends a command object to the server
	3. The server receives the command object
	4. The server deserializes the command object
	5. The server executes the command with the parsed arguments
	6. The server then serializes the returned object, as well as the arguments into a response object
	7. The server sends the response object back to the driver
	8. The driver deserializes the response object
	9. The driver sets the arguments the client passed in based on the parsed arguments
	10. The function returns
There are some other parts that will be discussed later, but this is the main procedure.

We'll deal with each part separately:

I. Client calls a Vulkan function
There are two types of functions: those that return PFN_vkVoidFunction and those that return something else. We'll deal with both of them separately

Functions that return PFN_vkVoidFunction:
There are exactly 2 functions that return this value: vkGetDeviceProcAddr and vkGetInstanceProcAddr. For these functions, the normal behavior below is overwritten: 
1. Follow the behavior here: https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkGet{Device,Instance}ProcAddr.html, and save the address client_addr.
2. Dispatch the function to the server using the serialization protocol described below
3. Get the returned address host_addr using the deserialization protocol described below
4. Return client_addr
The driver maintains two dictionaries --- client_to_server and server_to_client. Whenever one of these functions is called, client_to_server[client_addr]=host_addr and server_to_client[host_addr]=client_addr. 

Functions that return something else:
For each of these functions, the driver dispatches the command to the server as a command object. The command object is a json object with the following keys: "command", which is the name of the command being dispatched; and "members", which points to a dictionary that map the name of an argument to the json object that is the result of   parsing that argument.

To populate "members", the driver goes through the arguments provided, and for each of them:
1. serialize arg into json object
2. Makes new entry in "members" that maps the name of the arg to the json object. 

To know how the driver serializes, we now talk about

SERIALIZATION:
The driver only supports serializng pointers with a single level of indirection, ie. *a, not **a.

So, the driver must transform an variable of arbitrary type into a single pointer of arbitrary type.

To do so, the driver uses this algorithm:
Let serialize be some function that takes a variable of arbitrary type and returns a json object.
Set up an empty json object with an empty dictionary at "members"
1. if arg is null, map key "NULL" to "true"
2. If the argument is a list, run serialize on each of the arguments, adding each one of them to "members" by stringifying the index and mapping the returned json object to that string index
3. If the argument is a pointer that has an indirection greater than 1, return serialize on the dereferenced argument
4. If the argument is a pointer that has an indirection less than 1, return serialize on the referenced argument
5. If the argument is a pointer to a struct, return serialize_{struct}(arg)
6. If the type is pointer to a non-struct "char *"/"int *"/"void *", return serialize_{type}(arg)

serialize_{struct} is a function that takes a pointer to that struct that returns a json object
Set up an empty json object with an empty dictionary at "members":
1. For each attribute in struct, run serialize on the attribute and add them to "members" by mapping their stringified attribute to the returned json object

serialize_{type} is a function that takes a pointer to the type and returns a json object
Set up an empty json object
1. If type is a function pointer:
	a. If type PFN_vkVoidFunction, dereference pointer, and set arg to client_to_host[arg]
	b. Else, set
2. Cast pointer into (char *) and write that the string into the "value" key

Before we can send our command object, there's one more thing to take care of: Synchronization
For all other funcpointers, tell host to create a function that records the information into buffer and send data back
SYNCHRONIZATION:
vkMapMemory, like the name suggests, maps vkDeviceMemory into a buffer on the process's address space. However, the client and server can't share memory. So, when vkMapMemory is called on the server, a buffer of equal length is created on the client. To keep the contents in sync, the driver and server will at times, send synchronization objects to each other.

WHEN SHOULD THIS HAPPEN:
Client->Server --- When vkMapMemory is called on a vkDeviceMemory mem, mem is placed in a dict called mapped. The keys are vkDeviceMemory, and the values are the buffers the memory is mapped to. If a vkDeviceMemory in mapped is mentioned between a vkBeginCommandBuffer and vkEndCommandBuffer, then when vkEndCommandBuffer is mentioned, a synchronization object is sent to the server before sending the command object.

Client<-Server --- Synchronization objects for all mem mentioned (as explained in the previous paragraph) are sent when a command object corresponding to synchronization commands (has possible return code VK_TIMEOUT) are recieved. The synchronization object is sent before the corresponding command object is sent to the client.
 
HOW DOES IT WORK:
When synchronizing a buffer of length n, the driver first splits n into 10 ranges, such that the length of each range is no larger than 1 more than the length of any other range.

Then, the driver iterates through each range r:
1. Find the hash of the bytes in the range specified by r.
2. Create a Sync_

Optimization --- on server, don't reserialise argument if const --- not meant to be changed

Syncing of buffers